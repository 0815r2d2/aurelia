version: 2.1


# # # # # # # # # # # # # # # #
# - Scalar variables -
# # # # # # # # # # # # # # # #
scalar-1: &working_dir ~/repo

# # # # # # # # # # # # # # # #
# - Map variables -
# # # # # # # # # # # # # # # #
map-1: &filter_ignore_develop_release
  filters:
    branches:
      ignore:
        - develop
        - release

map-2: &filter_only_master
  filters:
    branches:
      only:
        - master

map-3: &filter_only_release
  filters:
    branches:
      only:
        - release

map-4: &filter_only_develop
  filters:
    branches:
      only:
        - develop

map-5: &filter_only_tag
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9]+(\.[0-9]+)*$/

# # # # # # # # # # # # # # # #
# - Executors -
# # # # # # # # # # # # # # # #
executors:

  docker-circleci:
    parameters:
      node:
        type: string
        default: "10.12"
    working_directory: *working_dir
    docker:
      - image: "circleci/node:<< parameters.node >>-stretch-browsers"

  docker-aurelia:
    working_directory: *working_dir
    docker:
      - image: "aureliaeffect/circleci-v2:latest"

# # # # # # # # # # # # # # # #
# - Jobs -
# # # # # # # # # # # # # # # #
jobs:

  unit_test:
    parameters:
      coverage:
        type: boolean
        default: true
      npm_command:
        type: string
        default: "test"
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - checkout
      - run: npm ci --ignore-scripts
      - run: npm run bootstrap
      - run: npm run build
      - run: npm run << parameters.npm_command >>
      - when:
          condition: << parameters.coverage >>
          steps:
            - run:
                name: "Process coverage results for Code Climate"
                command: |
                  ~/cc-test-reporter format-coverage coverage/lcov.info -t lcov -o coverage/cc-final.json
                  ~/cc-test-reporter upload-coverage -i coverage/cc-final.json
                environment:
                  CC_TEST_REPORTER_ID: 29ad19bd108faacbd91b36265a5b5e891b404571ebf937f40655157877aa71a1
                when: always
            - run:
                name: "Process coverage for Codecov"
                command: |
                  codecov -f coverage/coverage-final.json
                when: always
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage

  lint_packages:
    executor: docker-circleci
    steps:
      - checkout
      - run: npm ci --ignore-scripts
      - run: npm run bootstrap
      - run: npm run lint

  merge_and_dist:
    executor: docker-aurelia
    parameters:
      from:
        type: string
      to:
        type: string
      message:
        type: string
        default: "chore(all): add latest build artifacts"
    steps:
      - checkout
      - run: npm ci --ignore-scripts
      - run: npm run bootstrap
      - run: npm run build
      - run: npm run bundle:release
      - run: ./node_modules/.bin/lerna clean -y
      - run: rm -rf packages/*/dist/build/**
      - run: git add packages/\*/dist/* --force
      - run: git stash
      - run: git checkout << parameters.to >>
      - run: git merge << parameters.from >> --no-ff --no-edit -Xtheirs
      - run: rm -rf packages/*/dist
      - run: git add .
      - run: git stash pop
      - run: git add packages/\*/dist/* --force
      - run: npm run change-package-refs:rollup
      - run: git add .
      - run: git commit --allow-empty -m "<< parameters.message >>"
      - run: git push origin << parameters.to >>

  e2e_browserstack:
    executor: docker-circleci
    steps:
      - checkout
      - run: npm ci --ignore-scripts
      - run: npm run bootstrap
      - run: npm run build
      - run:
          name: "Install e2e tests"
          command: |
            cd test/browserstack
            npm ci
            npm run build
      - run:
          name: "Serve e2e app in the background"
          background: true
          command: |
            cd test/browserstack
            npm run start
      - run:
          name: "Run e2e tests"
          command: |
            cd test/browserstack
            npm run e2e

  publish_npm:
    executor: docker-aurelia
    parameters:
      channel:
        type: string
    steps:
      - checkout
      - run: npm ci --ignore-scripts
      - run:
          name: "Authenticate with registry"
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run: npm run publish:<< parameters.channel >>

  # Standalone wdio test jobs
  e2e_wdio:
    executor: docker-aurelia
    parameters:
      path:
        type: string
      build:
        type: boolean
        default: false
      bundle:
        type: boolean
        default: false
      publish_local:
        type: boolean
        default: false
    steps:
      - checkout
      - run: npm ci --ignore-scripts
      - when:
          condition: << parameters.build >>
          steps:
            - run: npm run bootstrap
            - run: npm run build
      - when:
          condition: << parameters.bundle >>
          steps:
            - run: npm run bundle:all
      - when:
          condition: << parameters.publish_local >>
          steps:
            - run: npm run publish:local
      - run:
          name: "Install wdio"
          command: |
            cd test/wdio
            npm ci
      - run:
          name: "Install & build test app"
          command: |
            cd test/wdio/cases/<< parameters.path >>
            npm install
            npm run build
      - run:
          name: "Serve wdio test app"
          background: true
          command: |
            cd test/wdio/cases/<< parameters.path >>
            npm run serve
      - run:
          name: "Run wdio test"
          command: |
            cd test/wdio
            npm run test

# # # # # # # # # # # # # # # #
# - Workflows -
# # # # # # # # # # # # # # # #
workflows:
  # Runs build and tests
  # Triggered by push to master or topic branches
  build_test:
    jobs:
      - unit_test:
          <<: *filter_ignore_develop_release
          name: unit_test_chrome
          e: docker-aurelia
      - unit_test:
          <<: *filter_ignore_develop_release
          name: unit_test_firefox
          e: docker-aurelia
          npm_command: "test-firefox"
          coverage: false
      - unit_test:
          <<: *filter_ignore_develop_release
          name: unit_test_node
          e: docker-circleci
          npm_command: "test-node"
          coverage: false
      - lint_packages:
          <<: *filter_ignore_develop_release
      - e2e_browserstack:
          <<: *filter_only_master
      - e2e_wdio:
          <<: *filter_ignore_develop_release
          name: jit-aurelia-cli-ts
          path: "local/jit-aurelia-cli-ts"
          build: true
      - e2e_wdio:
          <<: *filter_ignore_develop_release
          name: jit-fuse-box-ts
          path: "local/jit-fuse-box-ts"
          build: true
      - e2e_wdio:
          <<: *filter_ignore_develop_release
          name: jit-webpack-ts
          path: "local/jit-webpack-ts"
          build: true
      - e2e_wdio:
          <<: *filter_ignore_develop_release
          name: jit-parcel-ts
          path: "local/jit-parcel-ts"
          build: true
          publish_local: true
      - e2e_wdio:
          <<: *filter_ignore_develop_release
          name: jit-iife-inline
          path: "local/jit-iife-inline"
          build: true
          bundle: true
          publish_local: true
      - merge_and_dist:
          <<: *filter_only_master
          requires:
            - lint_packages
            - unit_test_chrome
            - unit_test_firefox
            - unit_test_node
            - e2e_browserstack
            - jit-aurelia-cli-ts
            - jit-fuse-box-ts
            - jit-webpack-ts
            - jit-parcel-ts
            - jit-iife-inline
          from: master
          to: develop

  # Runs build and tests, and pushes the built artifacts to the release branch (which then triggers publish_latest)
  # Triggered by push to tag
  build_test_push_release:
    jobs:
      - unit_test:
          <<: *filter_only_tag
          name: unit_test_chrome
          e: docker-aurelia
      - unit_test:
          <<: *filter_only_tag
          name: unit_test_firefox
          e: docker-aurelia
          npm_command: "test-firefox"
          coverage: false
      - unit_test:
          <<: *filter_only_tag
          name: unit_test_node
          e: docker-circleci
          npm_command: "test-node"
          coverage: false
      - lint_packages:
          <<: *filter_only_tag
      - e2e_browserstack:
          <<: *filter_only_tag
      - merge_and_dist:
          <<: *filter_only_tag
          requires:
            - lint_packages
            - unit_test_chrome
            - unit_test_firefox
            - e2e_browserstack
          from: $CIRCLE_TAG
          to: release

  # Asks for manual approval and then publishes from the release branch to npm@latest
  # Triggered by push to release branch
  publish_latest:
    jobs:
      # artifacts are already prepared and committed by the tag workflow, so only approval + publish remains
      - request_publish_latest:
          <<: *filter_only_release
          type: approval
      - publish_npm:
          <<: *filter_only_release
          requires:
            - request_publish_latest
          channel: latest
      # verify the latest packages after publishing them
      - e2e_wdio:
          <<: *filter_only_release
          name: jit-aurelia-cli-ts
          path: "latest/jit-aurelia-cli-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          <<: *filter_only_release
          name: jit-browserify-ts
          path: "latest/jit-browserify-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          <<: *filter_only_release
          name: jit-fuse-box-ts
          path: "latest/jit-fuse-box-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          <<: *filter_only_release
          name: jit-parcel-ts
          path: "latest/jit-parcel-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          <<: *filter_only_release
          name: jit-webpack-ts
          path: "latest/jit-webpack-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          <<: *filter_only_release
          name: jit-iife-inline
          path: "latest/jit-iife-inline"
          requires:
            - publish_npm

  # Runs build and tests, and pushes the built artifacts to the develop branch (which then triggers publish_dev)
  # Triggered by schedule once per day on 0:00 UTC on the master branch
  build_test_push_dev:
    triggers:
      - schedule:
          <<: *filter_only_develop
          cron: "0 5 * * *"
    jobs:
      # artifacts are already prepared and committed by the build_test workflow, so only publish remains
      - publish_npm:
          channel: dev
      # verify the dev packages after publishing them
      - e2e_wdio:
          name: jit-aurelia-cli-ts
          path: "dev/jit-aurelia-cli-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          name: jit-browserify-ts
          path: "dev/jit-browserify-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          name: jit-fuse-box-ts
          path: "dev/jit-fuse-box-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          name: jit-parcel-ts
          path: "dev/jit-parcel-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          name: jit-webpack-ts
          path: "dev/jit-webpack-ts"
          requires:
            - publish_npm
      - e2e_wdio:
          name: jit-iife-inline
          path: "dev/jit-iife-inline"
          requires:
            - publish_npm
