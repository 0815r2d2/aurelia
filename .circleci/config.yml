version: 2.1


# # # # # # # # # # # # # # # #
# - Scalar variables -
# # # # # # # # # # # # # # # #
scalar-1: &node_modules_cache_key aurelia-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}

scalar-2: &working_dir ~/repo

# # # # # # # # # # # # # # # #
# - Map variables -
# # # # # # # # # # # # # # # #
map-1: &package_globs
  paths:
    - dist
    - packages/*/dist
    - packages/*/node_modules

map-2: &filter_ignore_develop_release
  filters:
    branches:
      ignore:
        - develop
        - release

map-3: &filter_only_master
  filters:
    branches:
      only:
        - master

map-4: &filter_only_release
  filters:
    branches:
      only:
        - release

map-5: &filter_only_develop
  filters:
    branches:
      only:
        - develop

map-6: &filter_only_tag
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9]+(\.[0-9]+)*$/

# # # # # # # # # # # # # # # #
# - Executors -
# # # # # # # # # # # # # # # #
executors:

  docker-circleci:
    parameters:
      node:
        type: string
        default: "10.12"
    working_directory: *working_dir
    docker:
      - image: "circleci/node:<< parameters.node >>-stretch-browsers"

  docker-aurelia:
    working_directory: *working_dir
    docker:
      - image: "aureliaeffect/circleci-v2:latest"


# # # # # # # # # # # # # # # #
# - Commands -
# # # # # # # # # # # # # # # #
commands:

  # first_* commands are initializers for jobs, they must come first
  first_npm_install:
    steps:
      - checkout
      - run:
          name: "Run npm install"
          command: npm ci --ignore-scripts

  first_npm_install_example_e2e:
    steps:
      - run:
          name: "Install e2e tests"
          command: |
            cd ./examples/test
            npm ci

  first_npm_install_example:
    parameters:
      path:
        type: string
      e2e:
        type: boolean
        default: true
    steps:
      - checkout
      - run:
          name: "Run npm install"
          command: |
            cd ./examples/<< parameters.path >>
            npm install
      - when:
          condition: << parameters.e2e >>
          steps:
            - first_npm_install_example_e2e

  # implies first_npm_install
  first_restore_cache:
    steps:
      - checkout
      - restore_cache:
          key: *node_modules_cache_key

  # implies first_restore_cache
  first_attach_workspace:
    steps:
      - first_restore_cache
      - attach_workspace:
          at: *working_dir

  # first_* commands are finalizers for jobs, they must come last
  last_save_cache:
    steps:
      - save_cache:
          key: *node_modules_cache_key
          paths:
            - node_modules

  last_persist_workspace:
    steps:
      - persist_to_workspace:
          root: *working_dir
          <<: *package_globs

  # do_* commands are arbitrary commands that run in-between first and last
  # - build related -
  do_build_example:
    parameters:
      path:
        type: string
    steps:
      - run:
          name: "Build example"
          command: |
            cd ./examples/<< parameters.path >>
            npm run build

  do_build_packages:
    steps:
      - run:
          name: "Bootstrap and build packages"
          command: |
            npm run bootstrap
            npm run build

  do_bundle_packages:
    steps:
      - run:
          name: "Bundle packages"
          command: npm run bundle:all

  do_lint_packages:
    steps:
      - run:
          name: "Lint packages"
          command: npm run lint

  # - test related -
  do_serve_example:
    parameters:
      path:
        type: string
    steps:
      - run:
          name: "Serve example"
          background: true
          command: |
            cd ./examples/<< parameters.path >>
            npm run serve

  do_test_example:
    parameters:
      path:
        type: string
    steps:
      - run:
          name: "Test example"
          command: |
            cd ./examples/test
            npm run test

  do_coverage_codecov:
    steps:
      - run:
          name: "Process coverage for Codecov"
          command: |
            codecov -f ~/repo/coverage/coverage-final.json
          when: always

  do_coverage_codeclimate:
    steps:
      - run:
          name: "Process coverage results for Code Climate"
          command: |
            ~/cc-test-reporter format-coverage ~/repo/coverage/lcov.info -t lcov -o ~/repo/coverage/cc-final.json
            ~/cc-test-reporter upload-coverage -i ~/repo/coverage/cc-final.json
          environment:
            CC_TEST_REPORTER_ID: 29ad19bd108faacbd91b36265a5b5e891b404571ebf937f40655157877aa71a1
          when: always

  do_e2e_browserstack:
    steps:
      - run:
          name: "Install e2e tests"
          command: |
            cd ./test/e2e
            npm ci
            npm run build
      - run:
          name: "Serve e2e app in the background"
          background: true
          command: |
            cd ./test/e2e
            npm run start
      - run:
          name: "Run e2e tests"
          command: |
            cd ./test/e2e
            npm run e2e

  # - git related -
  do_git_set_config:
    steps:
      - run:
          name: "Set git config user.name"
          command: git config --local user.name "aurelia@bluespire.com"
      - run:
          name: "Set git config user.email"
          command: git config --local user.email "AureliaEffect"

  do_git_merge:
    parameters:
      from_branch:
        type: string
        default: "master"
      to_branch:
        type: string
    steps:
      - run:
          name: "Merge << parameters.from_branch >> into << parameters.to_branch >>"
          command: |
            git checkout << parameters.to_branch >>
            git merge << parameters.from_branch >> --no-ff --no-edit -Xtheirs

  do_git_stash_dist:
    steps:
      - run:
          name: "Cleanup unwanted files"
          command: |
            ./node_modules/.bin/lerna clean -y
            rm -rf dist/*.map dist/*.ts dist/*/ packages/*/dist/build/**
      - run:
          name: "Stash dist folders"
          command: |
            git add packages/\*/dist/* dist --force
            git stash

  do_git_commit_dist:
    parameters:
      message:
        type: string
        default: "chore(all): add latest build artifacts"
    steps:
      - run:
          name: "Overwrite existing with stashed dist folders"
          command: |
            rm -rf packages/*/dist dist
            git add .
            git stash pop
            git add packages/\*/dist/* dist --force
      - run:
          name: "Commit dist folders"
          command: git commit --allow-empty -m "<< parameters.message >>"

  do_git_push:
    parameters:
      to_branch:
        type: string
    steps:
      - run:
          name: "Push << parameters.to_branch >>"
          command: git push origin << parameters.to_branch >>

  # - publish related -
  do_publish:
    parameters:
      channel:
        type: string
    steps:
      - run:
          name: "Authenticate with registry"
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: "Publish to @<< parameters.channel >>"
          command: |
            npm run publish:<< parameters.channel >>
            npm run upload-dist:<< parameters.channel >>

# # # # # # # # # # # # # # # #
# - Jobs -
# # # # # # # # # # # # # # # #
jobs:

  # Must come before any other job
  install_root:
    executor: docker-circleci
    steps:
      - first_npm_install
      - last_save_cache

  # Requires install_root
  build_packages:
    executor: docker-circleci
    steps:
      - first_restore_cache
      - do_build_packages
      - last_persist_workspace

  # Requires install_root
  lint_packages:
    executor: docker-circleci
    steps:
      - first_restore_cache
      - do_lint_packages

  # Requires build_packages
  bundle_packages:
    executor: docker-circleci
    steps:
      - first_attach_workspace
      - do_bundle_packages
      - last_persist_workspace

  # Requires bundle_packages
  merge_and_dist:
    executor: docker-aurelia
    parameters:
      from:
        type: string
        default: "master"
      to:
        type: string
        default: "dev"
    steps:
      - first_attach_workspace
      - do_git_set_config
      - do_git_stash_dist
      - do_git_merge:
          from_branch: << parameters.from >>
          to_branch: << parameters.to >>
      - do_git_commit_dist
      - do_git_push:
          to_branch: << parameters.to >>

  unit_test:
    executor: docker-aurelia
    parameters:
      coverage:
        type: boolean
        default: true
      npm_command:
        type: string
        default: "test"
    steps:
      - first_npm_install
      # can't safely restore cache here because this uses a different executor with a different node version
      - run: npm run << parameters.npm_command >>
      - when:
          condition: << parameters.coverage >>
          steps:
            - do_coverage_codeclimate
            - do_coverage_codecov
            - store_test_results:
                path: ~/repo/coverage
            - store_artifacts:
                path: ~/repo/coverage

  # Requires bundle_packages
  e2e_browserstack:
    executor: docker-circleci
    steps:
      - first_attach_workspace
      - do_e2e_browserstack

  publish_npm:
    executor: docker-aurelia
    parameters:
      channel:
        type: string
    steps:
      - first_restore_cache
      - do_publish:
          channel: << parameters.channel >>

  # Standalone example test job
  e2e_examples_wdio:
    executor: docker-circleci
    parameters:
      path:
        type: string
    steps:
      - first_npm_install_example:
          path: << parameters.path >>
      - do_build_example:
          path: << parameters.path >>
      - do_serve_example:
          path: << parameters.path >>
      - do_test_example:
          path: << parameters.path >>


# # # # # # # # # # # # # # # #
# - Workflows -
# # # # # # # # # # # # # # # #
workflows:
  # Runs build and tests
  # Triggered by push to master or topic branches
  build_test:
    jobs:
      - install_root:
          <<: *filter_ignore_develop_release
      - unit_test:
          <<: *filter_ignore_develop_release
      - build_packages:
          <<: *filter_ignore_develop_release
          requires:
            - install_root
      - lint_packages:
          <<: *filter_ignore_develop_release
          requires:
            - install_root
      - bundle_packages:
          <<: *filter_only_master
          requires:
            - build_packages
      - e2e_browserstack:
          <<: *filter_only_master
          requires:
            - bundle_packages

  test_examples:
    jobs:
      - e2e_examples_wdio:
          name: jit-aurelia-cli-ts
          path: "bundlers/jit-aurelia-cli-ts"
      - e2e_examples_wdio:
          name: jit-browserify-ts
          path: "bundlers/jit-browserify-ts"
      - e2e_examples_wdio:
          name: jit-fuse-box-ts
          path: "bundlers/jit-fuse-box-ts"
      - e2e_examples_wdio:
          name: jit-parcel-ts
          path: "bundlers/jit-jit-parcel-ts"
      - e2e_examples_wdio:
          name: jit-webpack-ts
          path: "bundlers/jit-webpack-ts"
      - e2e_examples_wdio:
          name: jit-iife-inline
          path: "no-bundlers/jit-iife-inline"

  # Runs build and tests, and pushes the built artifacts to the release branch (which then triggers publish_latest)
  # Triggered by push to tag
  build_test_push_release:
    jobs:
      - install_root:
          <<: *filter_only_tag
      - unit_test:
          <<: *filter_only_tag
          name: unit_test_chrome
      - unit_test:
          <<: *filter_only_tag
          name: unit_test_firefox
          npm_command: "test-firefox"
          coverage: false
      - build_packages:
          <<: *filter_only_tag
          requires:
            - install_root
      - lint_packages:
          <<: *filter_only_tag
          requires:
            - install_root
      - bundle_packages:
          <<: *filter_only_tag
          requires:
            - build_packages
      - e2e_browserstack:
          <<: *filter_only_tag
          requires:
            - bundle_packages
      - merge_and_dist:
          <<: *filter_only_tag
          requires:
            - lint_packages
            - unit_test_chrome
            - unit_test_firefox
            - e2e_browserstack
          from: $CIRCLE_TAG
          to: release

  # Asks for manual approval and then publishes from the release branch to npm@latest
  # Triggered by push to release branch
  publish_latest:
    jobs:
      # artifacts are already prepared and committed by the tag workflow, so only approval + publish remains
      - request_publish_latest:
          <<: *filter_only_release
          type: approval
      - publish_npm:
          <<: *filter_only_release
          requires:
            - request_publish_latest
          channel: latest

  # Publishes from the develop branch to npm@dev
  # Triggered by push to develop branch
  publish_dev:
    jobs:
      # artifacts are already prepared and committed by the scheduled workflow, so only publish remains
      - publish_npm:
          <<: *filter_only_develop
          channel: dev
      # verify the dev packages after publishing them


  # Runs build and tests, and pushes the built artifacts to the develop branch (which then triggers publish_dev)
  # Triggered by schedule once per day on 0:00 UTC on the master branch
  build_test_push_dev:
    triggers:
      - schedule:
          <<: *filter_only_master
          cron: "0 0 * * *"
    jobs:
      - install_root
      - unit_test:
          name: unit_test_chrome
      - unit_test:
          name: unit_test_firefox
          npm_command: "test-firefox"
          coverage: false
      - build_packages:
          requires:
            - install_root
      - lint_packages:
          requires:
            - install_root
      - bundle_packages:
          requires:
            - build_packages
      - e2e_browserstack:
          requires:
            - bundle_packages
      - merge_and_dist:
          requires:
            - lint_packages
            - unit_test_chrome
            - unit_test_firefox
            - e2e_browserstack
          to: "develop"
