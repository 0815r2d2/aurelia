{"version":3,"file":"index.system.js","sources":["../src/util.ts","../src/retry-interceptor.ts","../src/http-client-configuration.ts","../src/http-client.ts"],"sourcesContent":["/**\n* Serialize an object to JSON. Useful for easily creating JSON fetch request bodies.\n*\n* @param body The object to be serialized to JSON.\n* @param replacer The JSON.stringify replacer used when serializing.\n* @returns A JSON string.\n*/\nexport function json(body: any, replacer?: any): string {\n  return JSON.stringify((body !== undefined ? body : {}), replacer);\n}","import { PLATFORM } from '@aurelia/kernel';\nimport { HttpClient } from './http-client';\nimport { Interceptor, RetryConfiguration } from './interfaces';\n\nexport const retryStrategy: {\n  fixed: 0;\n  incremental: 1;\n  exponential: 2;\n  random: 3;\n} = {\n  fixed: 0,\n  incremental: 1,\n  exponential: 2,\n  random: 3\n};\n\nconst defaultRetryConfig: RetryConfiguration = {\n  maxRetries: 3,\n  interval: 1000,\n  strategy: retryStrategy.fixed\n};\n\nexport class RetryInterceptor implements Interceptor {\n  public retryConfig: RetryConfiguration;\n\n  constructor(retryConfig?: RetryConfiguration) {\n    this.retryConfig = {...defaultRetryConfig, ...(retryConfig || {})};\n\n    if (this.retryConfig.strategy === retryStrategy.exponential &&\n      this.retryConfig.interval <= 1000) {\n      throw new Error('An interval less than or equal to 1 second is not allowed when using the exponential retry strategy');\n    }\n  }\n\n  public request(request: Request): Request {\n    const $r = request as Request & { retryConfig?: RetryConfiguration };\n    if (!$r.retryConfig) {\n      $r.retryConfig = {...this.retryConfig};\n      $r.retryConfig.counter = 0;\n    }\n\n    // do this on every request\n    $r.retryConfig.requestClone = request.clone();\n\n    return request;\n  }\n\n  public response(response: Response, request: Request): Response {\n    // retry was successful, so clean up after ourselves\n    delete (request as any).retryConfig;\n    return response;\n  }\n\n  public responseError(error: Response, request: Request, httpClient: HttpClient) {\n    const { retryConfig } = (request as Request & { retryConfig: RetryConfiguration });\n    const { requestClone } = retryConfig;\n    return Promise.resolve().then(() => {\n      if (retryConfig.counter < retryConfig.maxRetries) {\n        const result = retryConfig.doRetry ? retryConfig.doRetry(error, request) : true;\n\n        return Promise.resolve(result).then(doRetry => {\n          if (doRetry) {\n            retryConfig.counter++;\n            return new Promise(resolve => PLATFORM.global.setTimeout(resolve, calculateDelay(retryConfig) || 0))\n              .then(() => {\n                const newRequest = requestClone.clone();\n                if (typeof (retryConfig.beforeRetry) === 'function') {\n                  return retryConfig.beforeRetry(newRequest, httpClient);\n                }\n                return newRequest;\n              })\n              .then(newRequest => {\n                return httpClient.fetch({...newRequest,  retryConfig} as any);\n              });\n          }\n\n          // no more retries, so clean up\n          delete (request as any).retryConfig;\n          throw error;\n        });\n      }\n      // no more retries, so clean up\n      delete (request as any).retryConfig;\n      throw error;\n    });\n  }\n}\n\nfunction calculateDelay(retryConfig: RetryConfiguration) {\n  const { interval, strategy, minRandomInterval, maxRandomInterval, counter } = retryConfig;\n\n  if (typeof (strategy) === 'function') {\n    return (retryConfig.strategy as Function)(counter);\n  }\n\n  switch (strategy) {\n    case (retryStrategy.fixed):\n      return retryStrategies[retryStrategy.fixed](interval);\n    case (retryStrategy.incremental):\n      return retryStrategies[retryStrategy.incremental](counter, interval);\n    case (retryStrategy.exponential):\n      return retryStrategies[retryStrategy.exponential](counter, interval);\n    case (retryStrategy.random):\n      return retryStrategies[retryStrategy.random](counter, interval, minRandomInterval, maxRandomInterval);\n    default:\n      throw new Error('Unrecognized retry strategy');\n  }\n}\n\nconst retryStrategies = [\n  // fixed\n  interval => interval,\n\n  // incremental\n  (retryCount, interval) => interval * retryCount,\n\n  // exponential\n  (retryCount, interval) => retryCount === 1 ? interval : Math.pow(interval, retryCount) / 1000,\n\n  // random\n  (retryCount, interval, minRandomInterval = 0, maxRandomInterval = 60000) => {\n    return Math.random() * (maxRandomInterval - minRandomInterval) + minRandomInterval;\n  }\n] as [\n    (interval: number) => number,\n    (retryCount: number, interval: number) => number,\n    (retryCount: number, interval: number) => number,\n    (retryCount: number, interval: number, minRandomInterval?: number, maxRandomInterval?: number) => number\n  ];\n","import { Interceptor, RetryConfiguration } from './interfaces';\nimport { RetryInterceptor } from './retry-interceptor';\n\n/**\n * A class for configuring HttpClients.\n */\nexport class HttpClientConfiguration {\n  /**\n   * The base URL to be prepended to each Request's url before sending.\n   */\n  public baseUrl: string = '';\n\n  /**\n   * Default values to apply to init objects when creating Requests. Note that\n   * defaults cannot be applied when Request objects are manually created because\n   * Request provides its own defaults and discards the original init object.\n   * See also https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n   */\n  public defaults: RequestInit = {};\n\n  /**\n   * Interceptors to be added to the HttpClient.\n   */\n  public interceptors: Interceptor[] = [];\n\n  /**\n   * Sets the baseUrl.\n   *\n   * @param baseUrl The base URL.\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public withBaseUrl(baseUrl: string): HttpClientConfiguration {\n    this.baseUrl = baseUrl;\n    return this;\n  }\n\n  /**\n   * Sets the defaults.\n   *\n   * @param defaults The defaults.\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public withDefaults(defaults: RequestInit): HttpClientConfiguration {\n    this.defaults = defaults;\n    return this;\n  }\n\n  /**\n   * Adds an interceptor to be run on all requests or responses.\n   *\n   * @param interceptor An object with request, requestError,\n   * response, or responseError methods. request and requestError act as\n   * resolve and reject handlers for the Request before it is sent.\n   * response and responseError act as resolve and reject handlers for\n   * the Response after it has been received.\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public withInterceptor(interceptor: Interceptor): HttpClientConfiguration {\n    this.interceptors.push(interceptor);\n    return this;\n  }\n\n  /**\n   * Applies a configuration that addresses common application needs, including\n   * configuring same-origin credentials, and using rejectErrorResponses.\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public useStandardConfiguration(): HttpClientConfiguration {\n    const standardConfig = { credentials: 'same-origin' };\n    Object.assign(this.defaults, standardConfig, this.defaults);\n    return this.rejectErrorResponses();\n  }\n\n  /**\n   * Causes Responses whose status codes fall outside the range 200-299 to reject.\n   * The fetch API only rejects on network errors or other conditions that prevent\n   * the request from completing, meaning consumers must inspect Response.ok in the\n   * Promise continuation to determine if the server responded with a success code.\n   * This method adds a response interceptor that causes Responses with error codes\n   * to be rejected, which is common behavior in HTTP client libraries.\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public rejectErrorResponses(): HttpClientConfiguration {\n    return this.withInterceptor({ response: rejectOnError });\n  }\n\n  public withRetry(config?: RetryConfiguration): HttpClientConfiguration {\n    const interceptor: Interceptor = new RetryInterceptor(config);\n\n    return this.withInterceptor(interceptor);\n  }\n}\n\nfunction rejectOnError(response: Response): Response {\n  if (!response.ok) {\n    throw response;\n  }\n\n  return response;\n}\n","import { DOM, IDOM } from '@aurelia/runtime';\nimport { HTMLDOM } from '@aurelia/runtime-html';\nimport { HttpClientConfiguration } from './http-client-configuration';\nimport { Interceptor, ValidInterceptorMethodName } from './interfaces';\nimport { RetryInterceptor } from './retry-interceptor';\nimport { InterfaceSymbol, PLATFORM } from '@aurelia/kernel';\n\nconst absoluteUrlRegexp = /^([a-z][a-z0-9+\\-.]*:)?\\/\\//i;\n\n/**\n * An HTTP client based on the Fetch API.\n */\nexport class HttpClient {\n  public static readonly inject: InterfaceSymbol[] = [IDOM];\n\n  /**\n   * The current number of active requests.\n   * Requests being processed by interceptors are considered active.\n   */\n  public activeRequestCount: number;\n\n  /**\n   * Indicates whether or not the client is currently making one or more requests.\n   */\n  public isRequesting: boolean;\n\n  /**\n   * Indicates whether or not the client has been configured.\n   */\n  public isConfigured: boolean;\n\n  /**\n   * The base URL set by the config.\n   */\n  public baseUrl: string;\n\n  /**\n   * The default request init to merge with values specified at request time.\n   */\n  public defaults: RequestInit;\n\n  /**\n   * The interceptors to be run during requests.\n   */\n  public interceptors: Interceptor[];\n\n  private readonly dom: HTMLDOM;\n  /**\n   * Creates an instance of HttpClient.\n   */\n  constructor(dom: HTMLDOM) {\n    if (dom.window.fetch === undefined) {\n      // tslint:disable-next-line:max-line-length\n      throw new Error('HttpClient requires a Fetch API implementation, but the current environment doesn\\'t support it. You may need to load a polyfill such as https://github.com/github/fetch');\n    }\n    this.dom = dom;\n    this.activeRequestCount = 0;\n    this.isRequesting = false;\n    this.isConfigured = false;\n    this.baseUrl = '';\n    this.defaults = null;\n    this.interceptors = [];\n  }\n\n  /**\n   * Configure this client with default settings to be used by all requests.\n   *\n   * @param config A configuration object, or a function that takes a config\n   * object and configures it.\n   * @returns The chainable instance of this HttpClient.\n   * @chainable\n   */\n  public configure(config: RequestInit | ((config: HttpClientConfiguration) => void) | HttpClientConfiguration): HttpClient {\n\n    let normalizedConfig: HttpClientConfiguration;\n\n    if (typeof config === 'object') {\n      normalizedConfig = { defaults: config as RequestInit } as HttpClientConfiguration;\n    } else if (typeof config === 'function') {\n      normalizedConfig = new HttpClientConfiguration();\n      normalizedConfig.baseUrl = this.baseUrl;\n      normalizedConfig.defaults = { ...this.defaults };\n      normalizedConfig.interceptors = this.interceptors;\n\n      const c = config(normalizedConfig);\n      //tslint:disable-next-line no-any\n      if (HttpClientConfiguration.prototype.isPrototypeOf(c as any)) {\n        //tslint:disable-next-line no-any\n        normalizedConfig = c as any;\n      }\n    } else {\n      throw new Error('invalid config');\n    }\n\n    const defaults = normalizedConfig.defaults;\n    if (defaults && Headers.prototype.isPrototypeOf(defaults.headers)) {\n      // Headers instances are not iterable in all browsers. Require a plain\n      // object here to allow default headers to be merged into request headers.\n      throw new Error('Default headers must be a plain object.');\n    }\n\n    const interceptors = normalizedConfig.interceptors;\n\n    if (interceptors && interceptors.length) {\n      // find if there is a RetryInterceptor\n      if (interceptors.filter(x => RetryInterceptor.prototype.isPrototypeOf(x)).length > 1) {\n        throw new Error('Only one RetryInterceptor is allowed.');\n      }\n\n      const retryInterceptorIndex = interceptors.findIndex(x => RetryInterceptor.prototype.isPrototypeOf(x));\n\n      if (retryInterceptorIndex >= 0 && retryInterceptorIndex !== interceptors.length - 1) {\n        throw new Error('The retry interceptor must be the last interceptor defined.');\n      }\n    }\n\n    this.baseUrl = normalizedConfig.baseUrl;\n    this.defaults = defaults;\n    this.interceptors = normalizedConfig.interceptors || [];\n    this.isConfigured = true;\n\n    return this;\n  }\n\n  /**\n   * Starts the process of fetching a resource. Default configuration parameters\n   * will be applied to the Request. The constructed Request will be passed to\n   * registered request interceptors before being sent. The Response will be passed\n   * to registered Response interceptors before it is returned.\n   *\n   * See also https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   *\n   * @param input The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param init An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  public fetch(input: Request | string, init?: RequestInit): Promise<Response> {\n    this.trackRequestStart();\n\n    let request = this.buildRequest(input, init);\n    return this.processRequest(request, this.interceptors).then(result => {\n      let response = null;\n\n      if (Response.prototype.isPrototypeOf(result)) {\n        response = Promise.resolve(result);\n      } else if (Request.prototype.isPrototypeOf(result)) {\n        request = result;\n        response = fetch(result);\n      } else {\n        // tslint:disable-next-line:max-line-length\n        throw new Error(`An invalid result was returned by the interceptor chain. Expected a Request or Response instance, but got [${result}]`);\n      }\n\n      return this.processResponse(response, this.interceptors, request);\n    })\n      .then(result => {\n        if (Request.prototype.isPrototypeOf(result)) {\n          return this.fetch(result);\n        }\n        return result;\n      })\n      .then(\n        result => {\n          this.trackRequestEnd();\n          return result;\n        },\n        error => {\n          this.trackRequestEnd();\n          throw error;\n        }\n      );\n  }\n\n  public buildRequest(input: string | Request, init: RequestInit): Request {\n    const defaults = this.defaults || {};\n    let request: Request;\n    //tslint:disable-next-line no-any\n    let body: any;\n    let requestContentType: string;\n\n    const parsedDefaultHeaders = parseHeaderValues(defaults.headers) as HeadersInit;\n    if (Request.prototype.isPrototypeOf(input)) {\n      request = input as Request;\n      requestContentType = new Headers(request.headers).get('Content-Type');\n    } else {\n      if (!init) {\n        init = {} as RequestInit;\n      }\n      body = init.body;\n      const bodyObj = body ? { body } : null;\n      const requestInit = { ...defaults, headers: {}, ...init, ...bodyObj } as RequestInit;\n      requestContentType = new Headers(requestInit.headers as Headers).get('Content-Type');\n      request = new Request(getRequestUrl(this.baseUrl, input as string), requestInit);\n    }\n    if (!requestContentType) {\n      if (new Headers(parsedDefaultHeaders).has('content-type')) {\n        request.headers.set('Content-Type', new Headers(parsedDefaultHeaders).get('content-type'));\n      } else if (body && isJSON(body)) {\n        request.headers.set('Content-Type', 'application/json');\n      }\n    }\n    setDefaultHeaders(request.headers, parsedDefaultHeaders);\n    if (body && Blob.prototype.isPrototypeOf(body) && body.type) {\n      // work around bug in IE & Edge where the Blob type is ignored in the request\n      // https://connect.microsoft.com/IE/feedback/details/2136163\n      request.headers.set('Content-Type', body.type);\n    }\n    return request;\n  }\n\n  /**\n   * Calls fetch as a GET request.\n   *\n   * @param input The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param init An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  public get(input: Request | string, init?: RequestInit): Promise<Response> {\n    return this.fetch(input, init);\n  }\n\n  /**\n   * Calls fetch with request method set to POST.\n   *\n   * @param input The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param body The body of the request.\n   * @param init An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  //tslint:disable-next-line no-any\n  public post(input: Request | string, body?: any, init?: RequestInit): Promise<Response> {\n    return this.callFetch(input, body, init, 'POST');\n  }\n\n  /**\n   * Calls fetch with request method set to PUT.\n   *\n   * @param input The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param body The body of the request.\n   * @param init An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  //tslint:disable-next-line no-any\n  public put(input: Request | string, body?: any, init?: RequestInit): Promise<Response> {\n    return this.callFetch(input, body, init, 'PUT');\n  }\n\n  /**\n   * Calls fetch with request method set to PATCH.\n   *\n   * @param input The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param body The body of the request.\n   * @param init An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  //tslint:disable-next-line no-any\n  public patch(input: Request | string, body?: any, init?: RequestInit): Promise<Response> {\n    return this.callFetch(input, body, init, 'PATCH');\n  }\n\n  /**\n   * Calls fetch with request method set to DELETE.\n   *\n   * @param input The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param body The body of the request.\n   * @param init An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  //tslint:disable-next-line no-any\n  public delete(input: Request | string, body?: any, init?: RequestInit): Promise<Response> {\n    return this.callFetch(input, body, init, 'DELETE');\n  }\n\n  private trackRequestStart(): void {\n    this.isRequesting = !!(++this.activeRequestCount);\n    if (this.isRequesting) {\n      const evt = DOM.createCustomEvent('aurelia-fetch-client-request-started', { bubbles: true, cancelable: true });\n      PLATFORM.setTimeout(() => DOM.dispatchEvent(evt), 1);\n    }\n  }\n\n  private trackRequestEnd(): void {\n    this.isRequesting = !!(--this.activeRequestCount);\n    if (!this.isRequesting) {\n      const evt = DOM.createCustomEvent('aurelia-fetch-client-requests-drained', { bubbles: true, cancelable: true });\n      PLATFORM.setTimeout(() => DOM.dispatchEvent(evt), 1);\n    }\n  }\n\n  private processRequest(request: Request, interceptors: Interceptor[]) {\n    return this.applyInterceptors(request, interceptors, 'request', 'requestError', this);\n  }\n\n  private processResponse(response: Promise<Response>, interceptors: Interceptor[], request: Request) {\n    return this.applyInterceptors(response, interceptors, 'response', 'responseError', request, this);\n  }\n\n  // tslint:disable-next-line:max-line-length\n  private applyInterceptors(input: Request | Promise<Response | Request>, interceptors: Interceptor[], successName: ValidInterceptorMethodName, errorName: ValidInterceptorMethodName, ...interceptorArgs: any[]) {\n    return (interceptors || [])\n      .reduce((chain, interceptor) => {\n        const successHandler = interceptor[successName];\n        const errorHandler = interceptor[errorName];\n\n        return chain.then(\n          successHandler && (value => successHandler.call(interceptor, value, ...interceptorArgs)) || identity,\n          errorHandler && (reason => errorHandler.call(interceptor, reason, ...interceptorArgs)) || thrower);\n      }, Promise.resolve(input));\n  }\n\n  private callFetch(input: string | Request, body: any, init: RequestInit, method: string) {\n    if (!init) {\n      init = {};\n    }\n    init.method = method;\n    if (body) {\n      init.body = body;\n    }\n    return this.fetch(input, init);\n  }\n}\n\n\nfunction parseHeaderValues(headers: object): object {\n  const parsedHeaders = {};\n  for (const name in headers || {}) {\n    if (headers.hasOwnProperty(name)) {\n      parsedHeaders[name] = (typeof headers[name] === 'function') ? headers[name]() : headers[name];\n    }\n  }\n  return parsedHeaders;\n}\n\nfunction getRequestUrl(baseUrl: string, url: string): string {\n  if (absoluteUrlRegexp.test(url)) {\n    return url;\n  }\n\n  return (baseUrl || '') + url;\n}\n\nfunction setDefaultHeaders(headers: Headers, defaultHeaders: object): void {\n  for (const name in defaultHeaders || {}) {\n    if (defaultHeaders.hasOwnProperty(name) && !headers.has(name)) {\n      headers.set(name, defaultHeaders[name]);\n    }\n  }\n}\n\nfunction isJSON(str) {\n  try {\n    JSON.parse(str);\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction identity(x: any): any {\n  return x;\n}\n\nfunction thrower(x: any): never {\n  throw x;\n}\n"],"names":[],"mappings":"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"}