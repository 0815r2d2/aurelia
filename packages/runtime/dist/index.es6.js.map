{"version":3,"file":"index.es6.js","sources":["../src/observation.ts","../../../node_modules/tslib/tslib.es6.js","../src/observation/subscriber-collection.ts","../src/observation/property-observer.ts","../src/observation/setter-observer.ts","../src/observation/binding-context.ts","../src/observation/signaler.ts","../src/resources/binding-behavior.ts","../src/resources/value-converter.ts","../src/binding/ast.ts","../src/binding/binding-mode.ts","../src/lifecycle.ts","../src/binding/connectable.ts","../src/binding/binding.ts","../src/binding/call.ts","../src/binding/expression-parser.ts","../src/binding/interpolation-binding.ts","../src/binding/let-binding.ts","../src/binding/ref.ts","../src/observation/target-observer.ts","../src/observation/collection-observer.ts","../src/observation/array-observer.ts","../src/observation/map-observer.ts","../src/observation/set-observer.ts","../src/observation/computed-observer.ts","../src/observation/dirty-checker.ts","../src/observation/primitive-observer.ts","../src/observation/property-accessor.ts","../src/observation/observer-locator.ts","../src/observation/self-observer.ts","../src/resources/binding-behaviors/binding-mode.ts","../src/resources/binding-behaviors/debounce.ts","../src/resources/binding-behaviors/signals.ts","../src/resources/binding-behaviors/throttle.ts","../src/definitions.ts","../src/templating/lifecycle-attach.ts","../src/templating/lifecycle-bind.ts","../src/templating/lifecycle-render.ts","../src/resources/custom-attribute.ts","../src/dom.ts","../src/templating/bindable.ts","../src/resources/custom-attributes/if.ts","../src/resources/custom-attributes/repeat.ts","../src/resources/custom-attributes/replaceable.ts","../src/resources/custom-attributes/with.ts","../src/resources/custom-element.ts","../src/resources/value-converters/sanitize.ts","../src/templating/view.ts","../src/rendering-engine.ts","../src/aurelia.ts","../src/renderer.ts","../src/configuration.ts","../src/instructions.ts"],"sourcesContent":["import { IDisposable, IIndexable } from '@aurelia/kernel';\nimport { ILifecycle } from './lifecycle';\n\nexport enum LifecycleFlags {\n  none                      = 0b0_0000_00000000000000_000_00,\n  mustEvaluate              = 0b0_0001_00000000000000_000_00,\n  mutation                  = 0b0_0000_00000000000000_000_11,\n  isCollectionMutation      = 0b0_0000_00000000000000_000_01,\n  isInstanceMutation        = 0b0_0000_00000000000000_000_10,\n  update                    = 0b0_0000_00000000000000_111_00,\n  updateTargetObserver      = 0b0_0000_00000000000000_001_00,\n  updateTargetInstance      = 0b0_0000_00000000000000_010_00,\n  updateSourceExpression    = 0b0_0000_00000000000000_100_00,\n  from                      = 0b0_0000_11111111111111_000_00,\n  fromFlush                 = 0b0_0000_00000000000111_000_00,\n  fromAsyncFlush            = 0b0_0000_00000000000001_000_00,\n  fromSyncFlush             = 0b0_0000_00000000000010_000_00,\n  fromTick                  = 0b0_0000_00000000000100_000_00,\n  fromStartTask             = 0b0_0000_00000000001000_000_00,\n  fromStopTask              = 0b0_0000_00000000010000_000_00,\n  fromBind                  = 0b0_0000_00000000100000_000_00,\n  fromUnbind                = 0b0_0000_00000001000000_000_00,\n  fromAttach                = 0b0_0000_00000010000000_000_00,\n  fromDetach                = 0b0_0000_00000100000000_000_00,\n  fromCache                 = 0b0_0000_00001000000000_000_00,\n  fromDOMEvent              = 0b0_0000_00010000000000_000_00,\n  fromObserverSetter        = 0b0_0000_00100000000000_000_00,\n  fromBindableHandler       = 0b0_0000_01000000000000_000_00,\n  fromLifecycleTask         = 0b0_0000_10000000000000_000_00,\n  parentUnmountQueued       = 0b0_0010_00000000000000_000_00,\n  // this flag is for the synchronous flush before detach (no point in updating the\n  // DOM if it's about to be detached)\n  doNotUpdateDOM            = 0b0_0100_00000000000000_000_00,\n  isTraversingParentScope   = 0b0_1000_00000000000000_000_00,\n  // Bitmask for flags that need to be stored on a binding during $bind for mutation\n  // callbacks outside of $bind\n  persistentBindingFlags    = 0b1_0000_00000000000000_000_00,\n  allowParentScopeTraversal = 0b1_0000_00000000000000_000_00,\n}\n\nexport function stringifyLifecycleFlags(flags: LifecycleFlags): string {\n  const flagNames: string[] = [];\n\n  if (flags & LifecycleFlags.mustEvaluate) { flagNames.push('mustEvaluate'); }\n  if (flags & LifecycleFlags.isCollectionMutation) { flagNames.push('isCollectionMutation'); }\n  if (flags & LifecycleFlags.isInstanceMutation) { flagNames.push('isInstanceMutation'); }\n  if (flags & LifecycleFlags.updateTargetObserver) { flagNames.push('updateTargetObserver'); }\n  if (flags & LifecycleFlags.updateTargetInstance) { flagNames.push('updateTargetInstance'); }\n  if (flags & LifecycleFlags.updateSourceExpression) { flagNames.push('updateSourceExpression'); }\n  if (flags & LifecycleFlags.fromAsyncFlush) { flagNames.push('fromAsyncFlush'); }\n  if (flags & LifecycleFlags.fromSyncFlush) { flagNames.push('fromSyncFlush'); }\n  if (flags & LifecycleFlags.fromStartTask) { flagNames.push('fromStartTask'); }\n  if (flags & LifecycleFlags.fromStopTask) { flagNames.push('fromStopTask'); }\n  if (flags & LifecycleFlags.fromBind) { flagNames.push('fromBind'); }\n  if (flags & LifecycleFlags.fromUnbind) { flagNames.push('fromUnbind'); }\n  if (flags & LifecycleFlags.fromAttach) { flagNames.push('fromAttach'); }\n  if (flags & LifecycleFlags.fromDetach) { flagNames.push('fromDetach'); }\n  if (flags & LifecycleFlags.fromCache) { flagNames.push('fromCache'); }\n  if (flags & LifecycleFlags.fromDOMEvent) { flagNames.push('fromDOMEvent'); }\n  if (flags & LifecycleFlags.fromObserverSetter) { flagNames.push('fromObserverSetter'); }\n  if (flags & LifecycleFlags.fromBindableHandler) { flagNames.push('fromBindableHandler'); }\n  if (flags & LifecycleFlags.fromLifecycleTask) { flagNames.push('fromLifecycleTask'); }\n  if (flags & LifecycleFlags.parentUnmountQueued) { flagNames.push('parentUnmountQueued'); }\n  if (flags & LifecycleFlags.doNotUpdateDOM) { flagNames.push('doNotUpdateDOM'); }\n  if (flags & LifecycleFlags.isTraversingParentScope) { flagNames.push('isTraversingParentScope'); }\n  if (flags & LifecycleFlags.allowParentScopeTraversal) { flagNames.push('allowParentScopeTraversal'); }\n\n  return flagNames.join('|');\n}\n\n/** @internal */\nexport const enum SubscriberFlags {\n  None            = 0,\n  Subscriber0     = 0b0001,\n  Subscriber1     = 0b0010,\n  Subscriber2     = 0b0100,\n  SubscribersRest = 0b1000,\n  Any             = 0b1111,\n}\n\nexport enum DelegationStrategy {\n  none = 0,\n  capturing = 1,\n  bubbling = 2\n}\n\n/**\n * Describes a type that tracks changes and can flush those changes in some way\n */\nexport interface IChangeTracker {\n  $nextFlush?: IChangeTracker;\n  hasChanges?: boolean;\n  flush(flags: LifecycleFlags): void;\n}\n\n/**\n * Basic interface to normalize getting/setting a value of any property on any object\n */\nexport interface IAccessor<TValue = unknown> {\n  getValue(): TValue;\n  setValue(newValue: TValue, flags: LifecycleFlags): void;\n}\n\n/**\n * Describes a target observer for to-view bindings (in other words, an observer without the observation).\n */\nexport interface IBindingTargetAccessor<\n  TObj = any,\n  TProp = keyof TObj,\n  TValue = unknown>\n  extends IDisposable,\n          IAccessor<TValue>,\n          IPropertyChangeTracker<TObj, TProp> {\n  isDOMObserver?: boolean;\n}\n\n/**\n * Describes a target observer for from-view or two-way bindings.\n */\nexport interface IBindingTargetObserver<\n  TObj = any,\n  TProp = keyof TObj,\n  TValue = unknown>\n  extends IBindingTargetAccessor<TObj, TProp, TValue>,\n          ISubscribable<MutationKind.instance>,\n          ISubscriberCollection<MutationKind.instance> {\n\n  bind?(flags: LifecycleFlags): void;\n  unbind?(flags: LifecycleFlags): void;\n}\n\nexport type AccessorOrObserver = IBindingTargetAccessor | IBindingTargetObserver;\n\n/**\n * An array of indices, where the index of an element represents the index to map FROM, and the numeric value of the element itself represents the index to map TO\n *\n * The deletedItems property contains the items (in case of an array) or keys (in case of map or set) that have been deleted.\n */\nexport type IndexMap = number[] & {\n  deletedItems?: unknown[];\n};\n\n/**\n * Mostly just a marker enum to help with typings (specifically to reduce duplication)\n */\nexport enum MutationKind {\n  instance   = 0b01,\n  collection = 0b10\n}\n\n/**\n * Describes a type that specifically tracks changes in an object property, or simply something that can have a getter and/or setter\n */\nexport interface IPropertyChangeTracker<TObj extends Record<string, unknown>, TProp = keyof TObj, TValue = unknown> {\n  obj: TObj;\n  propertyKey?: TProp;\n  currentValue?: TValue;\n}\n\n/**\n * Describes a type that specifically tracks changes in a collection (map, set or array)\n */\nexport interface ICollectionChangeTracker<T extends Collection> extends IChangeTracker {\n  collection: T;\n  indexMap: IndexMap;\n  resetIndexMap(): void;\n}\n\n/**\n * Represents a (subscriber) function that can be called by a PropertyChangeNotifier\n */\nexport type IPropertyChangeHandler<TValue = unknown> = (newValue: TValue, previousValue: TValue, flags: LifecycleFlags) => void;\n/**\n * Represents a (observer) function that can notify subscribers of mutations on a property\n */\nexport interface IPropertyChangeNotifier extends IPropertyChangeHandler {}\n\n/**\n * Describes a (subscriber) type that has a function conforming to the IPropertyChangeHandler interface\n */\nexport interface IPropertySubscriber<TValue = unknown> { handleChange(newValue: TValue, previousValue: TValue, flags: LifecycleFlags): void; }\n\n/**\n * Represents a (subscriber) function that can be called by a CollectionChangeNotifier\n */\nexport type ICollectionChangeHandler = (origin: string, args: IArguments | null, flags?: LifecycleFlags) => void;\n/**\n * Represents a (observer) function that can notify subscribers of mutations in a collection\n */\nexport interface ICollectionChangeNotifier extends ICollectionChangeHandler {}\n\n/**\n * Represents a (subscriber) function that can be called by a BatchedCollectionChangeNotifier\n */\nexport type IBatchedCollectionChangeHandler = (indexMap: number[]) => void;\n/**\n * Represents a (observer) function that can notify subscribers of batched mutations in a collection\n */\nexport interface IBatchedCollectionChangeNotifier extends IBatchedCollectionChangeHandler {}\n\n/**\n * Describes a (subscriber) type that has a function conforming to the ICollectionChangeHandler interface\n */\nexport interface ICollectionSubscriber { handleChange(origin: string, args: IArguments | null, flags: LifecycleFlags): void; }\n/**\n * Describes a (subscriber) type that has a function conforming to the IBatchedCollectionChangeNotifier interface\n */\nexport interface IBatchedCollectionSubscriber { handleBatchedChange(indexMap: number[]): void; }\n\n/**\n * Either a property or collection subscriber\n */\nexport type Subscriber = ICollectionSubscriber | IPropertySubscriber;\n/**\n * Either a batched property or batched collection subscriber\n */\nexport type BatchedSubscriber = IBatchedCollectionSubscriber;\n\n/**\n * Helper type that translates from mutationKind enum to the correct subscriber interface\n */\nexport type MutationKindToSubscriber<T> =\n  T extends MutationKind.instance ? IPropertySubscriber :\n  T extends MutationKind.collection ? ICollectionSubscriber :\n  never;\n\n/**\n * Helper type that translates from mutationKind enum to the correct batched subscriber interface\n */\nexport type MutationKindToBatchedSubscriber<T> =\n  T extends MutationKind.collection ? IBatchedCollectionSubscriber :\n  never;\n\n/**\n * Helper type that translates from mutationKind enum to the correct notifier interface\n */\nexport type MutationKindToNotifier<T> =\n  T extends MutationKind.instance ? IPropertyChangeNotifier :\n  T extends MutationKind.collection ? ICollectionChangeNotifier :\n  never;\n\n/**\n * Helper type that translates from mutationKind enum to the correct batched notifier interface\n */\nexport type MutationKindToBatchedNotifier<T> =\n  T extends MutationKind.collection ? IBatchedCollectionChangeNotifier :\n  never;\n\nexport interface ISubscribable<T extends MutationKind> {\n  subscribe(subscriber: MutationKindToSubscriber<T>): void;\n  unsubscribe(subscriber: MutationKindToSubscriber<T>): void;\n}\n\n/**\n * A collection of property or collection subscribers\n */\nexport interface ISubscriberCollection<T extends MutationKind> extends ISubscribable<T> {\n  /** @internal */_subscriberFlags?: SubscriberFlags;\n  /** @internal */_subscriber0?: MutationKindToSubscriber<T>;\n  /** @internal */_subscriber1?: MutationKindToSubscriber<T>;\n  /** @internal */_subscriber2?: MutationKindToSubscriber<T>;\n  /** @internal */_subscribersRest?: MutationKindToSubscriber<T>[];\n\n  callSubscribers: MutationKindToNotifier<T>;\n  hasSubscribers(): boolean;\n  hasSubscriber(subscriber: MutationKindToSubscriber<T>): boolean;\n  removeSubscriber(subscriber: MutationKindToSubscriber<T>): boolean;\n  addSubscriber(subscriber: MutationKindToSubscriber<T>): boolean;\n}\n\n/**\n * A collection of batched property or collection subscribers\n */\nexport interface IBatchedSubscriberCollection<T extends MutationKind> extends IBatchedSubscribable<T> {\n  /** @internal */_batchedSubscriberFlags?: SubscriberFlags;\n  /** @internal */_batchedSubscriber0?: MutationKindToBatchedSubscriber<T>;\n  /** @internal */_batchedSubscriber1?: MutationKindToBatchedSubscriber<T>;\n  /** @internal */_batchedSubscriber2?: MutationKindToBatchedSubscriber<T>;\n  /** @internal */_batchedSubscribersRest?: MutationKindToBatchedSubscriber<T>[];\n\n  /** @internal */lifecycle?: ILifecycle;\n  callBatchedSubscribers: MutationKindToBatchedNotifier<T>;\n\n  /** @internal */flush(flags: LifecycleFlags): void;\n  hasBatchedSubscribers(): boolean;\n  hasBatchedSubscriber(subscriber: MutationKindToBatchedSubscriber<T>): boolean;\n  removeBatchedSubscriber(subscriber: MutationKindToBatchedSubscriber<T>): boolean;\n  addBatchedSubscriber(subscriber: MutationKindToBatchedSubscriber<T>): boolean;\n}\n\nexport interface IBatchedSubscribable<T extends MutationKind> {\n  subscribeBatched(subscriber: MutationKindToBatchedSubscriber<T>): void;\n  unsubscribeBatched(subscriber: MutationKindToBatchedSubscriber<T>): void;\n}\n\n/**\n * Describes a complete property observer with an accessor, change tracking fields, normal and batched subscribers\n */\nexport interface IPropertyObserver<TObj extends Record<string, unknown>, TProp extends keyof TObj> extends\n  IDisposable,\n  IAccessor<TObj[TProp]>,\n  IPropertyChangeTracker<TObj, TProp>,\n  ISubscriberCollection<MutationKind.instance> {\n  observing: boolean;\n}\n\n/**\n * An any-typed property observer\n */\nexport type PropertyObserver = IPropertyObserver<IIndexable, string>;\n\n/**\n * A collection (array, set or map)\n */\nexport type Collection = unknown[] | Set<unknown> | Map<unknown, unknown>;\ninterface IObservedCollection {\n  $observer?: CollectionObserver;\n}\n\n/**\n * An array that is being observed for mutations\n */\nexport interface IObservedArray<T = unknown> extends IObservedCollection, Array<T> { }\n/**\n * A set that is being observed for mutations\n */\nexport interface IObservedSet<T = unknown> extends IObservedCollection, Set<T> { }\n/**\n * A map that is being observed for mutations\n */\nexport interface IObservedMap<K = unknown, V = unknown> extends IObservedCollection, Map<K, V> { }\n/**\n * A collection that is being observed for mutations\n */\nexport type ObservedCollection = IObservedArray | IObservedSet | IObservedMap;\n\nexport const enum CollectionKind {\n  indexed = 0b1000,\n  keyed   = 0b0100,\n  array   = 0b1001,\n  map     = 0b0110,\n  set     = 0b0111\n}\n\nexport type LengthPropertyName<T> =\n  T extends unknown[] ? 'length' :\n  T extends Set<unknown> ? 'size' :\n  T extends Map<unknown, unknown> ? 'size' :\n  never;\n\nexport type CollectionTypeToKind<T> =\n  T extends unknown[] ? CollectionKind.array | CollectionKind.indexed :\n  T extends Set<unknown> ? CollectionKind.set | CollectionKind.keyed :\n  T extends Map<unknown, unknown> ? CollectionKind.map | CollectionKind.keyed :\n  never;\n\nexport type CollectionKindToType<T> =\n  T extends CollectionKind.array ? unknown[] :\n  T extends CollectionKind.indexed ? unknown[] :\n  T extends CollectionKind.map ? Map<unknown, unknown> :\n  T extends CollectionKind.set ? Set<unknown> :\n  T extends CollectionKind.keyed ? Set<unknown> | Map<unknown, unknown> :\n  never;\n\nexport type ObservedCollectionKindToType<T> =\n  T extends CollectionKind.array ? IObservedArray :\n  T extends CollectionKind.indexed ? IObservedArray :\n  T extends CollectionKind.map ? IObservedMap :\n  T extends CollectionKind.set ? IObservedSet :\n  T extends CollectionKind.keyed ? IObservedSet | IObservedMap :\n  never;\n\n// TODO: organize this (for now it's a quick fix for length observer, but we may actually want this\n// in every observer for alternative change tracking mechanisms)\nexport interface IPatch {\n  patch(flags: LifecycleFlags): void;\n}\n\n/**\n * An observer that tracks collection mutations and notifies subscribers (either directly or in batches)\n */\nexport interface ICollectionObserver<T extends CollectionKind> extends\n  IDisposable,\n  ICollectionChangeTracker<CollectionKindToType<T>>,\n  ISubscriberCollection<MutationKind.collection>,\n  IBatchedSubscriberCollection<MutationKind.collection> {\n    collection: ObservedCollectionKindToType<T>;\n    lengthPropertyName: LengthPropertyName<CollectionKindToType<T>>;\n    collectionKind: T;\n    lengthObserver: IBindingTargetObserver & IPatch;\n    getLengthObserver(): IBindingTargetObserver;\n}\nexport type CollectionObserver = ICollectionObserver<CollectionKind>;\n\nexport interface IBindingContext {\n  [key: string]: unknown;\n\n  readonly $synthetic?: true;\n  readonly $observers?: ObserversLookup<IOverrideContext>;\n  getObservers?(): ObserversLookup<IOverrideContext>;\n}\n\nexport interface IOverrideContext {\n  [key: string]: unknown;\n\n  readonly $synthetic?: true;\n  readonly $observers?: ObserversLookup<IOverrideContext>;\n  readonly bindingContext: IBindingContext;\n  readonly parentOverrideContext: IOverrideContext | null;\n  getObservers(): ObserversLookup<IOverrideContext>;\n}\n\nexport interface IScope {\n  readonly bindingContext: IBindingContext;\n  readonly overrideContext: IOverrideContext;\n  // parentScope is strictly internal API and mainly for replaceable template controller.\n  // NOT intended for regular scope traversal!\n  /** @internal */readonly parentScope: IScope | null;\n}\n\n// TODO: currently unused, still need to fix the observersLookup type\nexport interface IObserversLookup<TObj extends IIndexable = IIndexable, TKey extends keyof TObj =\n  Exclude<keyof TObj, '$synthetic' | '$observers' | 'bindingContext' | 'overrideContext' | 'parentOverrideContext'>> { }\n\nexport type ObserversLookup<TObj extends IIndexable = IIndexable, TKey extends keyof TObj =\n  Exclude<keyof TObj, '$synthetic' | '$observers' | 'bindingContext' | 'overrideContext' | 'parentOverrideContext'>> =\n  { [P in TKey]: PropertyObserver; } & { getOrCreate(obj: IBindingContext | IOverrideContext, key: string): PropertyObserver };\n\nexport type IObservable = IIndexable & {\n  readonly $synthetic?: false;\n  $observers?: Record<string, AccessorOrObserver>;\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n  IBatchedCollectionSubscriber,\n  IBatchedSubscriberCollection,\n  IndexMap,\n  IPropertySubscriber,\n  ISubscriberCollection,\n  LifecycleFlags,\n  MutationKind,\n  MutationKindToBatchedSubscriber,\n  MutationKindToSubscriber,\n  SubscriberFlags\n} from '../observation';\n\nexport function subscriberCollection<T extends MutationKind>(mutationKind: T): ClassDecorator {\n  // tslint:disable-next-line:ban-types // ClassDecorator expects it to be derived from Function\n  return function(target: Function): void {\n    const proto = target.prototype as ISubscriberCollection<MutationKind.instance | MutationKind.collection>;\n\n    proto._subscriberFlags = SubscriberFlags.None;\n    proto._subscriber0 = null;\n    proto._subscriber1 = null;\n    proto._subscriber2 = null;\n    proto._subscribersRest = null;\n\n    proto.addSubscriber = addSubscriber;\n    proto.removeSubscriber = removeSubscriber;\n    proto.hasSubscriber = hasSubscriber;\n    proto.hasSubscribers = hasSubscribers;\n    proto.callSubscribers = (mutationKind === MutationKind.instance ? callPropertySubscribers : callCollectionSubscribers);\n  };\n}\n\nfunction addSubscriber<T extends MutationKind>(this: ISubscriberCollection<T>, subscriber: MutationKindToSubscriber<T>): boolean {\n  if (this.hasSubscriber(subscriber)) {\n    return false;\n  }\n  const subscriberFlags = this._subscriberFlags;\n  if (!(subscriberFlags & SubscriberFlags.Subscriber0)) {\n    this._subscriber0 = subscriber;\n    this._subscriberFlags |= SubscriberFlags.Subscriber0;\n    return true;\n  }\n  if (!(subscriberFlags & SubscriberFlags.Subscriber1)) {\n    this._subscriber1 = subscriber;\n    this._subscriberFlags |= SubscriberFlags.Subscriber1;\n    return true;\n  }\n  if (!(subscriberFlags & SubscriberFlags.Subscriber2)) {\n    this._subscriber2 = subscriber;\n    this._subscriberFlags |= SubscriberFlags.Subscriber2;\n    return true;\n  }\n  if (!(subscriberFlags & SubscriberFlags.SubscribersRest)) {\n    this._subscribersRest = [subscriber];\n    this._subscriberFlags |= SubscriberFlags.SubscribersRest;\n    return true;\n  }\n  this._subscribersRest.push(subscriber);\n  return true;\n}\n\nfunction removeSubscriber<T extends MutationKind>(this: ISubscriberCollection<T>, subscriber: IPropertySubscriber): boolean {\n  const subscriberFlags = this._subscriberFlags;\n  if ((subscriberFlags & SubscriberFlags.Subscriber0) && this._subscriber0 === subscriber) {\n    this._subscriber0 = null;\n    this._subscriberFlags &= ~SubscriberFlags.Subscriber0;\n    return true;\n  }\n  if ((subscriberFlags & SubscriberFlags.Subscriber1) && this._subscriber1 === subscriber) {\n    this._subscriber1 = null;\n    this._subscriberFlags &= ~SubscriberFlags.Subscriber1;\n    return true;\n  }\n  if ((subscriberFlags & SubscriberFlags.Subscriber2) && this._subscriber2 === subscriber) {\n    this._subscriber2 = null;\n    this._subscriberFlags &= ~SubscriberFlags.Subscriber2;\n    return true;\n  }\n  if (subscriberFlags & SubscriberFlags.SubscribersRest) {\n    const subscribers = this._subscribersRest;\n    for (let i = 0, ii = subscribers.length; i < ii; ++i) {\n      if (subscribers[i] === subscriber) {\n        subscribers.splice(i, 1);\n        if (ii === 1) {\n          this._subscriberFlags &= ~SubscriberFlags.SubscribersRest;\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction callPropertySubscribers(\n  this: ISubscriberCollection<MutationKind.instance>,\n  newValue: unknown,\n  previousValue: unknown,\n  flags: LifecycleFlags): void {\n  /**\n   * Note: change handlers may have the side-effect of adding/removing subscribers to this collection during this\n   * callSubscribers invocation, so we're caching them all before invoking any.\n   * Subscribers added during this invocation are not invoked (and they shouldn't be).\n   * Subscribers removed during this invocation will still be invoked (and they also shouldn't be,\n   * however this is accounted for via $isBound and similar flags on the subscriber objects)\n   */\n  const subscriber0 = this._subscriber0;\n  const subscriber1 = this._subscriber1;\n  const subscriber2 = this._subscriber2;\n  let subscribers = this._subscribersRest;\n  if (subscribers !== null) {\n    subscribers = subscribers.slice();\n  }\n  if (subscriber0 !== null) {\n    subscriber0.handleChange(newValue, previousValue, flags);\n  }\n  if (subscriber1 !== null) {\n    subscriber1.handleChange(newValue, previousValue, flags);\n  }\n  if (subscriber2 !== null) {\n    subscriber2.handleChange(newValue, previousValue, flags);\n  }\n  const length = subscribers && subscribers.length;\n  if (length !== undefined && length > 0) {\n    for (let i = 0; i < length; ++i) {\n      const subscriber = subscribers[i];\n      if (subscriber !== null) {\n        subscriber.handleChange(newValue, previousValue, flags);\n      }\n    }\n  }\n}\n\nfunction callCollectionSubscribers(this: ISubscriberCollection<MutationKind.collection> & Required<IBatchedSubscriberCollection<MutationKind.collection>>, origin: string, args: IArguments | null, flags: LifecycleFlags): void {\n  const subscriber0 = this._subscriber0;\n  const subscriber1 = this._subscriber1;\n  const subscriber2 = this._subscriber2;\n  let subscribers = this._subscribersRest;\n  if (subscribers !== null) {\n    subscribers = subscribers.slice();\n  }\n  if (subscriber0 !== null) {\n    subscriber0.handleChange(origin, args, flags);\n  }\n  if (subscriber1 !== null) {\n    subscriber1.handleChange(origin, args, flags);\n  }\n  if (subscriber2 !== null) {\n    subscriber2.handleChange(origin, args, flags);\n  }\n  const length = subscribers && subscribers.length;\n  if (length !== undefined && length > 0) {\n    for (let i = 0; i < length; ++i) {\n      const subscriber = subscribers[i];\n      if (subscriber !== null) {\n        subscriber.handleChange(origin, args, flags);\n      }\n    }\n  }\n  this.lifecycle.enqueueFlush(this).catch(error => { throw error; });\n}\n\nfunction hasSubscribers<T extends MutationKind>(this: ISubscriberCollection<T>): boolean {\n  return this._subscriberFlags !== SubscriberFlags.None;\n}\n\nfunction hasSubscriber<T extends MutationKind>(this: ISubscriberCollection<T>, subscriber: IPropertySubscriber): boolean {\n  // Flags here is just a perf tweak\n  // Compared to not using flags, it's a moderate speed-up when this collection does not have the subscriber;\n  // and minor slow-down when it does, and the former is more common than the latter.\n  const subscriberFlags = this._subscriberFlags;\n  if ((subscriberFlags & SubscriberFlags.Subscriber0) && this._subscriber0 === subscriber) {\n    return true;\n  }\n  if ((subscriberFlags & SubscriberFlags.Subscriber1) && this._subscriber1 === subscriber) {\n    return true;\n  }\n  if ((subscriberFlags & SubscriberFlags.Subscriber2) && this._subscriber2 === subscriber) {\n    return true;\n  }\n  if (subscriberFlags & SubscriberFlags.SubscribersRest) {\n    // no need to check length; if the flag is set, there's always at least one\n    const subscribers = this._subscribersRest;\n    for (let i = 0, ii = subscribers.length; i < ii; ++i) {\n      if (subscribers[i] === subscriber) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function batchedSubscriberCollection(): ClassDecorator {\n  // tslint:disable-next-line:ban-types // ClassDecorator expects it to be derived from Function\n  return function(target: Function): void {\n    const proto = target.prototype as IBatchedSubscriberCollection<MutationKind.collection>;\n\n    proto._batchedSubscriberFlags = SubscriberFlags.None;\n    proto._batchedSubscriber0 = null;\n    proto._batchedSubscriber1 = null;\n    proto._batchedSubscriber2 = null;\n    proto._batchedSubscribersRest = null;\n\n    proto.addBatchedSubscriber = addBatchedSubscriber;\n    proto.removeBatchedSubscriber = removeBatchedSubscriber;\n    proto.hasBatchedSubscriber = hasBatchedSubscriber;\n    proto.hasBatchedSubscribers = hasBatchedSubscribers;\n    proto.callBatchedSubscribers = callBatchedCollectionSubscribers;\n  };\n}\n\nfunction addBatchedSubscriber(this: IBatchedSubscriberCollection<MutationKind.collection>, subscriber: MutationKindToBatchedSubscriber<MutationKind.collection>): boolean {\n  if (this.hasBatchedSubscriber(subscriber)) {\n    return false;\n  }\n  const subscriberFlags = this._batchedSubscriberFlags;\n  if (!(subscriberFlags & SubscriberFlags.Subscriber0)) {\n    this._batchedSubscriber0 = subscriber;\n    this._batchedSubscriberFlags |= SubscriberFlags.Subscriber0;\n    return true;\n  }\n  if (!(subscriberFlags & SubscriberFlags.Subscriber1)) {\n    this._batchedSubscriber1 = subscriber;\n    this._batchedSubscriberFlags |= SubscriberFlags.Subscriber1;\n    return true;\n  }\n  if (!(subscriberFlags & SubscriberFlags.Subscriber2)) {\n    this._batchedSubscriber2 = subscriber;\n    this._batchedSubscriberFlags |= SubscriberFlags.Subscriber2;\n    return true;\n  }\n  if (!(subscriberFlags & SubscriberFlags.SubscribersRest)) {\n    this._batchedSubscribersRest = [subscriber];\n    this._batchedSubscriberFlags |= SubscriberFlags.SubscribersRest;\n    return true;\n  }\n  this._batchedSubscribersRest.push(subscriber);\n  return true;\n}\n\nfunction removeBatchedSubscriber(this: IBatchedSubscriberCollection<MutationKind.collection>, subscriber: IBatchedCollectionSubscriber): boolean {\n  const subscriberFlags = this._batchedSubscriberFlags;\n  if ((subscriberFlags & SubscriberFlags.Subscriber0) && this._batchedSubscriber0 === subscriber) {\n    this._batchedSubscriber0 = null;\n    this._batchedSubscriberFlags &= ~SubscriberFlags.Subscriber0;\n    return true;\n  }\n  if ((subscriberFlags & SubscriberFlags.Subscriber1) && this._batchedSubscriber1 === subscriber) {\n    this._batchedSubscriber1 = null;\n    this._batchedSubscriberFlags &= ~SubscriberFlags.Subscriber1;\n    return true;\n  }\n  if ((subscriberFlags & SubscriberFlags.Subscriber2) && this._batchedSubscriber2 === subscriber) {\n    this._batchedSubscriber2 = null;\n    this._batchedSubscriberFlags &= ~SubscriberFlags.Subscriber2;\n    return true;\n  }\n  if (subscriberFlags & SubscriberFlags.SubscribersRest) {\n    const subscribers = this._batchedSubscribersRest;\n    for (let i = 0, ii = subscribers.length; i < ii; ++i) {\n      if (subscribers[i] === subscriber) {\n        subscribers.splice(i, 1);\n        if (ii === 1) {\n          this._batchedSubscriberFlags &= ~SubscriberFlags.SubscribersRest;\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction callBatchedCollectionSubscribers(this: IBatchedSubscriberCollection<MutationKind.collection>, indexMap: IndexMap): void {\n  const subscriber0 = this._batchedSubscriber0;\n  const subscriber1 = this._batchedSubscriber1;\n  const subscriber2 = this._batchedSubscriber2;\n  let subscribers = this._batchedSubscribersRest;\n  if (subscribers !== null) {\n    subscribers = subscribers.slice();\n  }\n  if (subscriber0 !== null) {\n    subscriber0.handleBatchedChange(indexMap);\n  }\n  if (subscriber1 !== null) {\n    subscriber1.handleBatchedChange(indexMap);\n  }\n  if (subscriber2 !== null) {\n    subscriber2.handleBatchedChange(indexMap);\n  }\n  const length = subscribers && subscribers.length;\n  if (length !== undefined && length > 0) {\n    for (let i = 0; i < length; ++i) {\n      const subscriber = subscribers[i];\n      if (subscriber !== null) {\n        subscriber.handleBatchedChange(indexMap);\n      }\n    }\n  }\n}\n\nfunction hasBatchedSubscribers(this: IBatchedSubscriberCollection<MutationKind.collection>): boolean {\n  return this._batchedSubscriberFlags !== SubscriberFlags.None;\n}\n\nfunction hasBatchedSubscriber(this: IBatchedSubscriberCollection<MutationKind.collection>, subscriber: IBatchedCollectionSubscriber): boolean {\n  // Flags here is just a perf tweak\n  // Compared to not using flags, it's a moderate speed-up when this collection does not have the subscriber;\n  // and minor slow-down when it does, and the former is more common than the latter.\n  const subscriberFlags = this._batchedSubscriberFlags;\n  if ((subscriberFlags & SubscriberFlags.Subscriber0) && this._batchedSubscriber0 === subscriber) {\n    return true;\n  }\n  if ((subscriberFlags & SubscriberFlags.Subscriber1) && this._batchedSubscriber1 === subscriber) {\n    return true;\n  }\n  if ((subscriberFlags & SubscriberFlags.Subscriber2) && this._batchedSubscriber2 === subscriber) {\n    return true;\n  }\n  if (subscriberFlags & SubscriberFlags.SubscribersRest) {\n    // no need to check length; if the flag is set, there's always at least one\n    const subscribers = this._batchedSubscribersRest;\n    for (let i = 0, ii = subscribers.length; i < ii; ++i) {\n      if (subscribers[i] === subscriber) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n","import { Reporter } from '@aurelia/kernel';\nimport { IPropertySubscriber, LifecycleFlags, MutationKind, PropertyObserver } from '../observation';\nimport { subscriberCollection } from './subscriber-collection';\n\nconst defineProperty = Reflect.defineProperty;\n// note: we're reusing the same object for setting all descriptors, just changing some properties as needed\n//   this works, because the properties are copied by defineProperty (so changing them afterwards doesn't affect existing descriptors)\n// see also: https://tc39.github.io/ecma262/#sec-topropertydescriptor\nconst observedPropertyDescriptor: PropertyDescriptor = {\n  get: undefined,\n  set: undefined,\n  enumerable: true,\n  configurable: true\n};\n\nfunction subscribe(this: PropertyObserver, subscriber: IPropertySubscriber): void {\n  if (this.observing === false) {\n    this.observing = true;\n    const { obj, propertyKey } = this;\n    this.currentValue = obj[propertyKey];\n    observedPropertyDescriptor.get = () => this.getValue();\n    observedPropertyDescriptor.set = value => { this.setValue(value, LifecycleFlags.updateTargetInstance); };\n    if (!defineProperty(obj, propertyKey, observedPropertyDescriptor)) {\n      Reporter.write(1, propertyKey, obj);\n    }\n  }\n  this.addSubscriber(subscriber);\n}\n\nfunction dispose(this: PropertyObserver): void {\n  // tslint:disable-next-line:no-dynamic-delete\n  delete this.obj[this.propertyKey];\n  this.obj = null;\n  this.propertyKey = null;\n  this.currentValue = null;\n}\n\nexport function propertyObserver(): ClassDecorator {\n  // tslint:disable-next-line:ban-types // ClassDecorator expects it to be derived from Function\n  return function(target: Function): void {\n    subscriberCollection(MutationKind.instance)(target);\n    const proto = target.prototype as PropertyObserver;\n\n    proto.observing = false;\n    proto.obj = null;\n    proto.propertyKey = null;\n    // Note: this will generate some \"false positive\" changes when setting a target undefined from a source undefined,\n    // but those aren't harmful because the changes won't be propagated through to subscribers during $bind anyway.\n    // It will, however, solve some \"false negative\" changes when the source value is undefined but the target value is not;\n    // in such cases, this.currentValue in the observer being undefined will block the change from propagating to the target.\n    // This is likely not working correctly in vCurrent either.\n    proto.currentValue = Symbol();\n\n    proto.subscribe = proto.subscribe || subscribe;\n    proto.unsubscribe = proto.unsubscribe || proto.removeSubscriber;\n\n    proto.dispose = proto.dispose || dispose;\n  };\n}\n","import { IIndexable } from '@aurelia/kernel';\nimport { IPropertyObserver, IPropertySubscriber, LifecycleFlags } from '../observation';\nimport { propertyObserver } from './property-observer';\n\nexport interface SetterObserver extends IPropertyObserver<IIndexable, string> {}\n\n@propertyObserver()\nexport class SetterObserver implements SetterObserver {\n  public subscribe: (subscriber: IPropertySubscriber) => void;\n  public unsubscribe: (subscriber: IPropertySubscriber) => void;\n  public obj: IIndexable;\n  public propertyKey: string;\n\n  constructor(obj: IIndexable, propertyKey: string) {\n    this.obj = obj;\n    this.propertyKey = propertyKey;\n  }\n\n  public getValue(): unknown {\n    return this.currentValue;\n  }\n  public setValue(newValue: unknown, flags: LifecycleFlags): void {\n    const currentValue = this.currentValue;\n    if (currentValue !== newValue) {\n      this.currentValue = newValue;\n      if (!(flags & LifecycleFlags.fromBind)) {\n        this.callSubscribers(newValue, currentValue, flags);\n      }\n      // If subscribe() has been called, the target property descriptor is replaced by these getter/setter methods,\n      // so calling obj[propertyKey] will actually return this.currentValue.\n      // However, if subscribe() was not yet called (indicated by !this.observing), the target descriptor\n      // is unmodified and we need to explicitly set the property value.\n      // This will happen in one-time, to-view and two-way bindings during $bind, meaning that the $bind will not actually update the target value.\n      // This wasn't visible in vCurrent due to connect-queue always doing a delayed update, so in many cases it didn't matter whether $bind updated the target or not.\n      if (!this.observing) {\n        this.obj[this.propertyKey] = newValue;\n      }\n    }\n  }\n}\n","import { IIndexable, Reporter, StrictPrimitive, Tracer } from '@aurelia/kernel';\nimport { IBindScope } from '../lifecycle';\nimport {\n  IBindingContext,\n  IOverrideContext,\n  IScope,\n  LifecycleFlags,\n  ObservedCollection,\n  ObserversLookup,\n  PropertyObserver\n} from '../observation';\nimport { SetterObserver } from './setter-observer';\n\nconst slice = Array.prototype.slice;\n\nconst enum RuntimeError {\n  UndefinedScope = 250, // trying to evaluate on something that's not a valid binding\n  NullScope = 251, // trying to evaluate on an unbound binding\n  NilOverrideContext = 252,\n  NilParentScope = 253\n}\n\n/** @internal */\nexport class InternalObserversLookup {\n  public getOrCreate(obj: IBindingContext | IOverrideContext, key: string): PropertyObserver {\n    if (Tracer.enabled) { Tracer.enter('InternalObserversLookup.getOrCreate', slice.call(arguments)); }\n    let observer = this[key];\n    if (observer === undefined) {\n      observer = this[key] = new SetterObserver(obj, key);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return observer;\n  }\n}\n\ntype BindingContextValue = ObservedCollection | StrictPrimitive | IIndexable;\n\nexport class BindingContext implements IBindingContext {\n  [key: string]: BindingContextValue;\n\n  public readonly $synthetic: true;\n\n  public $observers: ObserversLookup<IOverrideContext>;\n\n  private constructor(keyOrObj?: string | IIndexable, value?: BindingContextValue) {\n    this.$synthetic = true;\n\n    if (keyOrObj !== undefined) {\n      if (value !== undefined) {\n        // if value is defined then it's just a property and a value to initialize with\n        this[keyOrObj as string] = value;\n      } else {\n        // can either be some random object or another bindingContext to clone from\n        for (const prop in keyOrObj as IIndexable) {\n          if (keyOrObj.hasOwnProperty(prop)) {\n            this[prop] = keyOrObj[prop];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Create a new synthetic `BindingContext` for use in a `Scope`.\n   * @param obj Optional. An existing object or `BindingContext` to (shallow) clone (own) properties from.\n   */\n  public static create(obj?: IIndexable): BindingContext;\n  /**\n   * Create a new synthetic `BindingContext` for use in a `Scope`.\n   * @param key The name of the only property to initialize this `BindingContext` with.\n   * @param value The value of the only property to initialize this `BindingContext` with.\n   */\n  public static create(key: string, value: BindingContextValue): BindingContext;\n  /**\n   * Create a new synthetic `BindingContext` for use in a `Scope`.\n   *\n   * This overload signature is simply the combined signatures of the other two, and can be used\n   * to keep strong typing in situations where the arguments are dynamic.\n   */\n  public static create(keyOrObj?: string | IIndexable, value?: BindingContextValue): BindingContext;\n  public static create(keyOrObj?: string | IIndexable, value?: BindingContextValue): BindingContext {\n    return new BindingContext(keyOrObj, value);\n  }\n\n  public static get(scope: IScope, name: string, ancestor: number, flags: LifecycleFlags): IBindingContext | IOverrideContext | IBindScope {\n    if (Tracer.enabled) { Tracer.enter('BindingContext.get', slice.call(arguments)); }\n    if (scope === undefined) {\n      throw Reporter.error(RuntimeError.UndefinedScope);\n    }\n    if (scope === null) {\n      throw Reporter.error(RuntimeError.NullScope);\n    }\n    let overrideContext = scope.overrideContext;\n\n    if (ancestor > 0) {\n      // jump up the required number of ancestor contexts (eg $parent.$parent requires two jumps)\n      while (ancestor > 0) {\n        if (overrideContext.parentOverrideContext === null) {\n          if (Tracer.enabled) { Tracer.leave(); }\n          return undefined;\n        }\n        ancestor--;\n        overrideContext = overrideContext.parentOverrideContext;\n      }\n\n      if (Tracer.enabled) { Tracer.leave(); }\n      return name in overrideContext ? overrideContext : overrideContext.bindingContext;\n    }\n\n    // traverse the context and it's ancestors, searching for a context that has the name.\n    while (overrideContext && !(name in overrideContext) && !(overrideContext.bindingContext && name in overrideContext.bindingContext)) {\n      overrideContext = overrideContext.parentOverrideContext;\n    }\n\n    if (overrideContext) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      // we located a context with the property.  return it.\n      return name in overrideContext ? overrideContext : overrideContext.bindingContext;\n    }\n\n    // the name wasn't found. see if parent scope traversal is allowed and if so, try that\n    if ((flags & LifecycleFlags.allowParentScopeTraversal) && scope.parentScope !== null) {\n      const result = this.get(scope.parentScope, name, ancestor, flags\n        // unset the flag; only allow one level of scope boundary traversal\n        & ~LifecycleFlags.allowParentScopeTraversal\n        // tell the scope to return null if the name could not be found\n        | LifecycleFlags.isTraversingParentScope);\n      if (result !== null) {\n        if (Tracer.enabled) { Tracer.leave(); }\n        return result;\n      }\n    }\n\n    // still nothing found. return the root binding context (or null\n    // if this is a parent scope traversal, to ensure we fall back to the\n    // correct level)\n    if (flags & LifecycleFlags.isTraversingParentScope) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return null;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return scope.bindingContext || scope.overrideContext;\n  }\n\n  public getObservers(): ObserversLookup<IOverrideContext> {\n    if (Tracer.enabled) { Tracer.enter('BindingContext.getObservers', slice.call(arguments)); }\n    let observers = this.$observers;\n    if (observers === undefined) {\n      this.$observers = observers = new InternalObserversLookup() as ObserversLookup<IOverrideContext>;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return observers;\n  }\n}\n\nexport class Scope implements IScope {\n  public readonly bindingContext: IBindingContext | IBindScope;\n  public readonly overrideContext: IOverrideContext;\n  // parentScope is strictly internal API and mainly for replaceable template controller.\n  // NOT intended for regular scope traversal!\n  /** @internal */public readonly parentScope: IScope | null;\n\n  private constructor(bindingContext: IBindingContext | IBindScope, overrideContext: IOverrideContext) {\n    this.bindingContext = bindingContext;\n    this.overrideContext = overrideContext;\n    this.parentScope = null;\n  }\n\n  /**\n   * Create a new `Scope` backed by the provided `BindingContext` and a new standalone `OverrideContext`.\n   *\n   * Use this overload when the scope is for the root component, in a unit test,\n   * or when you simply want to prevent binding expressions from traversing up the scope.\n   * @param bc The `BindingContext` to back the `Scope` with.\n   */\n  public static create(bc: IBindingContext | IBindScope): Scope;\n  /**\n   * Create a new `Scope` backed by the provided `BindingContext` and `OverrideContext`.\n   *\n   * @param bc The `BindingContext` to back the `Scope` with.\n   * @param oc The `OverrideContext` to back the `Scope` with.\n   * If a binding expression attempts to access a property that does not exist on the `BindingContext`\n   * during binding, it will traverse up via the `parentOverrideContext` of the `OverrideContext` until\n   * it finds the property.\n   */\n  public static create(bc: IBindingContext | IBindScope, oc: IOverrideContext): Scope;\n  /**\n   * Create a new `Scope` backed by the provided `BindingContext` and `OverrideContext`.\n   *\n   * Use this overload when the scope is for the root component, in a unit test,\n   * or when you simply want to prevent binding expressions from traversing up the scope.\n   *\n   * @param bc The `BindingContext` to back the `Scope` with.\n   * @param oc null. This overload is functionally equivalent to not passing this argument at all.\n   */\n  public static create(bc: IBindingContext | IBindScope, oc: null): Scope;\n  public static create(bc: IBindingContext | IBindScope, oc?: IOverrideContext | null): Scope {\n    if (Tracer.enabled) { Tracer.enter('Scope.create', slice.call(arguments)); }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return new Scope(bc, oc === null || oc === undefined ? OverrideContext.create(bc, oc) : oc);\n  }\n\n  public static fromOverride(oc: IOverrideContext): Scope {\n    if (Tracer.enabled) { Tracer.enter('Scope.fromOverride', slice.call(arguments)); }\n    if (oc === null || oc === undefined) {\n      throw Reporter.error(RuntimeError.NilOverrideContext);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return new Scope(oc.bindingContext, oc);\n  }\n\n  public static fromParent(ps: IScope | null, bc: IBindingContext | IBindScope): Scope {\n    if (Tracer.enabled) { Tracer.enter('Scope.fromParent', slice.call(arguments)); }\n    if (ps === null || ps === undefined) {\n      throw Reporter.error(RuntimeError.NilParentScope);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return new Scope(bc, OverrideContext.create(bc, ps.overrideContext));\n  }\n}\n\nexport class OverrideContext implements IOverrideContext {\n  [key: string]: ObservedCollection | StrictPrimitive | IIndexable;\n\n  public readonly $synthetic: true;\n  public readonly bindingContext: IBindingContext | IBindScope;\n  public readonly parentOverrideContext: IOverrideContext | null;\n\n  private constructor(bindingContext: IBindingContext | IBindScope, parentOverrideContext: IOverrideContext | null) {\n    this.$synthetic = true;\n    this.bindingContext = bindingContext;\n    this.parentOverrideContext = parentOverrideContext;\n  }\n\n  public static create(bc: IBindingContext | IBindScope, poc: IOverrideContext | null): OverrideContext {\n    if (Tracer.enabled) { Tracer.enter('OverrideContext.create', slice.call(arguments)); }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return new OverrideContext(bc, poc === undefined ? null : poc);\n  }\n\n  public getObservers(): ObserversLookup<IOverrideContext> {\n    if (Tracer.enabled) { Tracer.enter('OverrideContext.getObservers', slice.call(arguments)); }\n    let observers = this.$observers;\n    if (observers === undefined) {\n      this.$observers = observers = new InternalObserversLookup();\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return observers as ObserversLookup<IOverrideContext>;\n  }\n}\n","import { DI, Immutable } from '@aurelia/kernel';\nimport { IPropertySubscriber, LifecycleFlags } from '../observation';\n\ntype Signal = string;\n\nexport interface ISignaler {\n  signals: Immutable<Record<string, Set<IPropertySubscriber>>>;\n  dispatchSignal(name: Signal, flags?: LifecycleFlags): void;\n  addSignalListener(name: Signal, listener: IPropertySubscriber): void;\n  removeSignalListener(name: Signal, listener: IPropertySubscriber): void;\n}\n\nexport const ISignaler = DI.createInterface<ISignaler>('ISignaler').withDefault(x => x.singleton(Signaler));\n\n/** @internal */\nexport class Signaler implements ISignaler {\n  public signals: Record<string, Set<IPropertySubscriber>>;\n\n  constructor() {\n    this.signals = Object.create(null);\n  }\n\n  public dispatchSignal(name: Signal, flags?: LifecycleFlags): void {\n    const listeners = this.signals[name];\n    if (listeners === undefined) {\n      return;\n    }\n    for (const listener of listeners.keys()) {\n      listener.handleChange(undefined, undefined, flags | LifecycleFlags.updateTargetInstance);\n    }\n  }\n\n  public addSignalListener(name: Signal, listener: IPropertySubscriber): void {\n    const signals = this.signals;\n    const listeners = signals[name];\n    if (listeners === undefined) {\n      signals[name] = new Set([listener]);\n    } else {\n      listeners.add(listener);\n    }\n  }\n\n  public removeSignalListener(name: Signal, listener: IPropertySubscriber): void {\n    const listeners = this.signals[name];\n    if (listeners) {\n      listeners.delete(listener);\n    }\n  }\n}\n","import {\n  Class,\n  Constructable,\n  IContainer,\n  IResourceDefinition,\n  IResourceKind,\n  IResourceType,\n  Registration,\n  Writable\n} from '@aurelia/kernel';\nimport { IBinding } from '../binding/binding';\nimport { IScope, LifecycleFlags } from '../observation';\n\nexport interface IBindingBehavior {\n  bind(flags: LifecycleFlags, scope: IScope, binding: IBinding): void;\n  unbind(flags: LifecycleFlags, scope: IScope, binding: IBinding): void;\n}\n\nexport interface IBindingBehaviorDefinition extends IResourceDefinition { }\n\nexport interface IBindingBehaviorType extends IResourceType<IBindingBehaviorDefinition, IBindingBehavior> { }\n\nexport interface IBindingBehaviorResource extends\n  IResourceKind<IBindingBehaviorDefinition, IBindingBehavior, Class<IBindingBehavior>> {\n}\n\ntype BindingBehaviorDecorator = <TProto, TClass>(target: Class<TProto, TClass> & Partial<IBindingBehaviorType>) => Class<TProto, TClass> & IBindingBehaviorType;\n\nfunction register(this: IBindingBehaviorType, container: IContainer): void {\n  const resourceKey = BindingBehaviorResource.keyFrom(this.description.name);\n  container.register(Registration.singleton(resourceKey, this));\n}\n\nexport function bindingBehavior(name: string): BindingBehaviorDecorator;\nexport function bindingBehavior(definition: IBindingBehaviorDefinition): BindingBehaviorDecorator;\nexport function bindingBehavior(nameOrDefinition: string | IBindingBehaviorDefinition): BindingBehaviorDecorator {\n  return target => BindingBehaviorResource.define(nameOrDefinition, target);\n}\n\nfunction keyFrom(this: IBindingBehaviorResource, name: string): string {\n  return `${this.name}:${name}`;\n}\n\nfunction isType<T>(this: IBindingBehaviorResource, Type: T & Partial<IBindingBehaviorType>): Type is T & IBindingBehaviorType {\n  return Type.kind === this;\n}\n\nfunction define<T extends Constructable>(this: IBindingBehaviorResource, name: string, ctor: T): T & IBindingBehaviorType;\nfunction define<T extends Constructable>(this: IBindingBehaviorResource, ndefinition: IBindingBehaviorDefinition, ctor: T): T & IBindingBehaviorType;\nfunction define<T extends Constructable>(this: IBindingBehaviorResource, nameOrDefinition: string | IBindingBehaviorDefinition, ctor: T): T & IBindingBehaviorType {\n  const Type = ctor as T & Writable<IBindingBehaviorType>;\n  const description = typeof nameOrDefinition === 'string'\n    ? { name: nameOrDefinition }\n    : nameOrDefinition;\n\n  Type.kind = BindingBehaviorResource;\n  Type.description = description;\n  Type.register = register;\n\n  return Type;\n}\n\nexport const BindingBehaviorResource: IBindingBehaviorResource = {\n  name: 'binding-behavior',\n  keyFrom,\n  isType,\n  define\n};\n","import {\n  Class,\n  Constructable,\n  IContainer,\n  IResourceDefinition,\n  IResourceKind,\n  IResourceType,\n  Registration,\n  Writable\n} from '@aurelia/kernel';\n\nexport interface IValueConverter {\n  toView(input: unknown, ...args: unknown[]): unknown;\n  fromView?(input: unknown, ...args: unknown[]): unknown;\n}\n\nexport interface IValueConverterDefinition extends IResourceDefinition { }\n\nexport interface IValueConverterType extends IResourceType<IValueConverterDefinition, IValueConverter> { }\n\nexport interface IValueConverterResource extends\n  IResourceKind<IValueConverterDefinition, IValueConverter, Class<IValueConverter>> { }\n\ntype ValueConverterDecorator = <TProto, TClass>(target: Class<TProto, TClass> & Partial<IValueConverterType>) => Class<TProto, TClass> & IValueConverterType;\n\nfunction register(this: IValueConverterType, container: IContainer): void {\n  const resourceKey = this.kind.keyFrom(this.description.name);\n  container.register(Registration.singleton(resourceKey, this));\n}\n\nexport function valueConverter(name: string): ValueConverterDecorator;\nexport function valueConverter(definition: IValueConverterDefinition): ValueConverterDecorator;\nexport function valueConverter(nameOrDefinition: string | IValueConverterDefinition): ValueConverterDecorator {\n  return target => ValueConverterResource.define(nameOrDefinition, target);\n}\n\nfunction keyFrom(this: IValueConverterResource, name: string): string {\n  return `${this.name}:${name}`;\n}\n\nfunction isType<T>(this: IValueConverterResource, Type: T & Partial<IValueConverterType>): Type is T & IValueConverterType {\n  return Type.kind === this;\n}\n\nfunction define<T extends Constructable>(this: IValueConverterResource, name: string, ctor: T): T & IValueConverterType;\nfunction define<T extends Constructable>(this: IValueConverterResource, ndefinition: IValueConverterDefinition, ctor: T): T & IValueConverterType;\nfunction define<T extends Constructable>(this: IValueConverterResource, nameOrDefinition: string | IValueConverterDefinition, ctor: T): T & IValueConverterType {\n  const Type = ctor as T & Writable<IValueConverterType>;\n  const description = typeof nameOrDefinition === 'string'\n    ? { name: nameOrDefinition }\n    : nameOrDefinition;\n\n  Type.kind = ValueConverterResource;\n  Type.description = description;\n  Type.register = register;\n\n  return Type;\n}\n\nexport const ValueConverterResource: IValueConverterResource = {\n  name: 'value-converter',\n  keyFrom,\n  isType,\n  define\n};\n","import { IIndexable, IServiceLocator, PLATFORM, Reporter, StrictPrimitive } from '@aurelia/kernel';\nimport { IBindScope } from '../lifecycle';\nimport { Collection, IBindingContext, IOverrideContext, IScope, LifecycleFlags, ObservedCollection } from '../observation';\nimport { BindingContext } from '../observation/binding-context';\nimport { ISignaler } from '../observation/signaler';\nimport { BindingBehaviorResource } from '../resources/binding-behavior';\nimport { IValueConverter, ValueConverterResource } from '../resources/value-converter';\nimport { IBinding } from './binding';\nimport { IConnectableBinding } from './connectable';\n\nexport type IsPrimary = AccessThis | AccessScope | ArrayLiteral | ObjectLiteral | PrimitiveLiteral | Template;\nexport type IsLiteral = ArrayLiteral | ObjectLiteral | PrimitiveLiteral | Template;\nexport type IsLeftHandSide = IsPrimary | CallFunction | CallMember | CallScope | AccessMember | AccessKeyed | TaggedTemplate;\nexport type IsUnary = IsLeftHandSide | Unary;\nexport type IsBinary = IsUnary | Binary;\nexport type IsConditional = IsBinary | Conditional;\nexport type IsAssign = IsConditional | Assign;\nexport type IsValueConverter = IsAssign | ValueConverter;\nexport type IsBindingBehavior = IsValueConverter | BindingBehavior;\nexport type IsAssignable = AccessScope | AccessKeyed | AccessMember | Assign;\nexport type IsExpression = IsBindingBehavior | Interpolation;\nexport type IsExpressionOrStatement = IsExpression | ForOfStatement | BindingIdentifierOrPattern | HtmlLiteral;\nexport type Connects = AccessScope | ArrayLiteral | ObjectLiteral | Template | Unary | CallScope | AccessMember | AccessKeyed | TaggedTemplate | Binary | Conditional | ValueConverter | BindingBehavior | ForOfStatement;\nexport type Observes = AccessScope | AccessKeyed | AccessMember;\nexport type CallsFunction = CallFunction | CallScope | CallMember | TaggedTemplate;\nexport type IsResource = ValueConverter | BindingBehavior;\nexport type HasBind = BindingBehavior;\nexport type HasUnbind = ValueConverter | BindingBehavior;\nexport type HasAncestor = AccessThis | AccessScope | CallScope;\n\nexport interface IVisitor<T = unknown> {\n  visitAccessKeyed(expr: AccessKeyed): T;\n  visitAccessMember(expr: AccessMember): T;\n  visitAccessScope(expr: AccessScope): T;\n  visitAccessThis(expr: AccessThis): T;\n  visitArrayBindingPattern(expr: ArrayBindingPattern): T;\n  visitArrayLiteral(expr: ArrayLiteral): T;\n  visitAssign(expr: Assign): T;\n  visitBinary(expr: Binary): T;\n  visitBindingBehavior(expr: BindingBehavior): T;\n  visitBindingIdentifier(expr: BindingIdentifier): T;\n  visitCallFunction(expr: CallFunction): T;\n  visitCallMember(expr: CallMember): T;\n  visitCallScope(expr: CallScope): T;\n  visitConditional(expr: Conditional): T;\n  visitForOfStatement(expr: ForOfStatement): T;\n  visitHtmlLiteral(expr: HtmlLiteral): T;\n  visitInterpolation(expr: Interpolation): T;\n  visitObjectBindingPattern(expr: ObjectBindingPattern): T;\n  visitObjectLiteral(expr: ObjectLiteral): T;\n  visitPrimitiveLiteral(expr: PrimitiveLiteral): T;\n  visitTaggedTemplate(expr: TaggedTemplate): T;\n  visitTemplate(expr: Template): T;\n  visitUnary(expr: Unary): T;\n  visitValueConverter(expr: ValueConverter): T;\n}\n\nexport interface IExpression {\n  readonly $kind: ExpressionKind;\n  evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator | null): unknown;\n  connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void;\n  accept<T>(visitor: IVisitor<T>): T;\n  assign?(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator | null, value: unknown): unknown;\n  bind?(flags: LifecycleFlags, scope: IScope, binding: IBinding): void;\n  unbind?(flags: LifecycleFlags, scope: IScope, binding: IBinding): void;\n}\n\nexport const enum ExpressionKind {\n  Connects             = 0b000000000001_00000, // The expression's connect() function calls observeProperty and/or calls connect() on another expression that it wraps (all expressions except for AccessThis, PrimitiveLiteral, CallMember/Function and Assign)\n  Observes             = 0b000000000010_00000, // The expression's connect() function calls observeProperty (only AccessScope, AccessMember and AccessKeyed do this)\n  CallsFunction        = 0b000000000100_00000, // Calls a function (CallFunction, CallScope, CallMember, TaggedTemplate) -> needs a valid function object returning from its lefthandside's evaluate()\n  HasAncestor          = 0b000000001000_00000, // Has an \"ancestor\" property, meaning the expression could climb up the context (only AccessThis, AccessScope and CallScope)\n  IsPrimary            = 0b000000010000_00000, // Is a primary expression according to ES parsing rules\n  IsLeftHandSide       = 0b000000100000_00000, // Is a left-hand side expression according to ES parsing rules, includes IsPrimary\n  HasBind              = 0b000001000000_00000, // Has a bind() method (currently only BindingBehavior)\n  HasUnbind            = 0b000010000000_00000, // Has an unbind() method (currentl only BindingBehavior and ValueConverter)\n  IsAssignable         = 0b000100000000_00000, // Is an assignable expression according to ES parsing rules (only AccessScope, AccessMember, AccessKeyed ans Assign)\n  IsLiteral            = 0b001000000000_00000, // Is an Aurelia resource (ValueConverter or BindingBehavior)\n  IsResource           = 0b010000000000_00000, // Is literal expression (Primitive, Array, Object or Template)\n  IsForDeclaration     = 0b100000000000_00000, // Is a For declaration (for..of, for..in -> currently only ForOfStatement)\n  Type                 = 0b000000000000_11111, // Type mask to uniquely identify each AST class (concrete types start below)\n  // ---------------------------------------------------------------------------------------------------------------------------\n  AccessThis           = 0b000000111000_00001, //               HasAncestor\n  AccessScope          = 0b000100111011_00010, // IsAssignable  HasAncestor       Observes  Connects\n  ArrayLiteral         = 0b001000110001_00011, //                                           Connects\n  ObjectLiteral        = 0b001000110001_00100, //                                           Connects\n  PrimitiveLiteral     = 0b001000110000_00101, //\n  Template             = 0b001000110001_00110, //                                           Connects\n  Unary                = 0b000000000001_00111, //                                           Connects\n  CallScope            = 0b000000101101_01000, //               HasAncestor  CallsFunction  Connects\n  CallMember           = 0b000000100100_01001, //                            CallsFunction\n  CallFunction         = 0b000000100100_01010, //                            CallsFunction\n  AccessMember         = 0b000100100011_01011, // IsAssignable                    Observes  Connects\n  AccessKeyed          = 0b000100100011_01100, // IsAssignable                    Observes  Connects\n  TaggedTemplate       = 0b000000100101_01101, //                            CallsFunction  Connects\n  Binary               = 0b000000000001_01110, //                                           Connects\n  Conditional          = 0b000000000001_11111, //                                           Connects\n  Assign               = 0b000100000000_10000, // IsAssignable\n  ValueConverter       = 0b010010000001_10001, //                                           Connects\n  BindingBehavior      = 0b010011000001_10010, //                                           Connects\n  HtmlLiteral          = 0b000000000001_10011, //                                           Connects\n  ArrayBindingPattern  = 0b100000000000_10100, //\n  ObjectBindingPattern = 0b100000000000_10101, //\n  BindingIdentifier    = 0b100000000000_10110, //\n  ForOfStatement       = 0b000000000001_10111, //                                           Connects\n  Interpolation        = 0b000000000000_11000  //\n}\n\nexport function connects(expr: IsExpressionOrStatement): expr is Connects {\n  return (expr.$kind & ExpressionKind.Connects) === ExpressionKind.Connects;\n}\nexport function observes(expr: IsExpressionOrStatement): expr is Observes {\n  return (expr.$kind & ExpressionKind.Observes) === ExpressionKind.Observes;\n}\nexport function callsFunction(expr: IsExpressionOrStatement): expr is CallsFunction {\n  return (expr.$kind & ExpressionKind.CallsFunction) === ExpressionKind.CallsFunction;\n}\nexport function hasAncestor(expr: IsExpressionOrStatement): expr is HasAncestor {\n  return (expr.$kind & ExpressionKind.HasAncestor) === ExpressionKind.HasAncestor;\n}\nexport function isAssignable(expr: IsExpressionOrStatement): expr is IsAssignable {\n  return (expr.$kind & ExpressionKind.IsAssignable) === ExpressionKind.IsAssignable;\n}\nexport function isLeftHandSide(expr: IsExpressionOrStatement): expr is IsLeftHandSide {\n  return (expr.$kind & ExpressionKind.IsLeftHandSide) === ExpressionKind.IsLeftHandSide;\n}\nexport function isPrimary(expr: IsExpressionOrStatement): expr is IsPrimary {\n  return (expr.$kind & ExpressionKind.IsPrimary) === ExpressionKind.IsPrimary;\n}\nexport function isResource(expr: IsExpressionOrStatement): expr is IsResource {\n  return (expr.$kind & ExpressionKind.IsResource) === ExpressionKind.IsResource;\n}\nexport function hasBind(expr: IsExpressionOrStatement): expr is HasBind {\n  return (expr.$kind & ExpressionKind.HasBind) === ExpressionKind.HasBind;\n}\nexport function hasUnbind(expr: IsExpressionOrStatement): expr is HasUnbind {\n  return (expr.$kind & ExpressionKind.HasUnbind) === ExpressionKind.HasUnbind;\n}\nexport function isLiteral(expr: IsExpressionOrStatement): expr is IsLiteral {\n  return (expr.$kind & ExpressionKind.IsLiteral) === ExpressionKind.IsLiteral;\n}\nexport function arePureLiterals(expressions: ReadonlyArray<IsExpressionOrStatement> | undefined): expressions is IsLiteral[] {\n  if (expressions === undefined || expressions.length === 0) {\n    return true;\n  }\n  for (let i = 0; i < expressions.length; ++i) {\n    if (!isPureLiteral(expressions[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function isPureLiteral(expr: IsExpressionOrStatement): expr is IsLiteral {\n  if (isLiteral(expr)) {\n    switch (expr.$kind) {\n      case ExpressionKind.ArrayLiteral:\n        return arePureLiterals(expr.elements);\n      case ExpressionKind.ObjectLiteral:\n        return arePureLiterals(expr.values);\n      case ExpressionKind.Template:\n        return arePureLiterals(expr.expressions);\n      case ExpressionKind.PrimitiveLiteral:\n        return true;\n    }\n  }\n  return false;\n}\n\nconst enum RuntimeError {\n  NoLocator = 202,\n  NoBehaviorFound = 203,\n  BehaviorAlreadyApplied = 204,\n  NoConverterFound = 205,\n  NoBinding = 206,\n  NotAFunction = 207,\n  UnknownOperator = 208,\n  UndefinedScope = 250, // trying to evaluate on something that's not a valid binding\n  NullScope = 251, // trying to evaluate on an unbound binding\n}\n\nexport class BindingBehavior implements IExpression {\n  public $kind: ExpressionKind.BindingBehavior;\n  public readonly expression: IsBindingBehavior;\n  public readonly name: string;\n  public readonly args: ReadonlyArray<IsAssign>;\n  public readonly behaviorKey: string;\n  private readonly expressionHasBind: boolean;\n  private readonly expressionHasUnbind: boolean;\n\n  constructor(expression: IsBindingBehavior, name: string, args: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.BindingBehavior;\n    this.expression = expression;\n    this.name = name;\n    this.args = args;\n    this.behaviorKey = BindingBehaviorResource.keyFrom(this.name);\n    this.expressionHasBind = hasBind(expression);\n    this.expressionHasUnbind = hasUnbind(expression);\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    return this.expression.evaluate(flags, scope, locator);\n  }\n\n  public assign(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator, value: unknown): unknown {\n    return this.expression.assign(flags, scope, locator, value);\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    this.expression.connect(flags, scope, binding);\n  }\n\n  public bind(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    if (scope === undefined) {\n      throw Reporter.error(RuntimeError.UndefinedScope, this);\n    }\n    if (scope === null) {\n      throw Reporter.error(RuntimeError.NullScope, this);\n    }\n    if (!binding) {\n      throw Reporter.error(RuntimeError.NoBinding, this);\n    }\n    const locator = binding.locator;\n    if (!locator) {\n      throw Reporter.error(RuntimeError.NoLocator, this);\n    }\n    if (this.expressionHasBind) {\n      (this.expression as BindingBehavior).bind(flags, scope, binding);\n    }\n    const behaviorKey = this.behaviorKey;\n    const behavior = locator.get<BindingBehavior>(behaviorKey);\n    if (!behavior) {\n      throw Reporter.error(RuntimeError.NoBehaviorFound, this);\n    }\n    if (binding[behaviorKey] !== undefined && binding[behaviorKey] !== null) {\n      throw Reporter.error(RuntimeError.BehaviorAlreadyApplied, this);\n    }\n    binding[behaviorKey] = behavior;\n    behavior.bind.apply(behavior, ([flags, scope, binding] as unknown[]).concat(evalList(flags, scope, locator, this.args)));\n  }\n\n  public unbind(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const behaviorKey = this.behaviorKey;\n    binding[behaviorKey].unbind(flags, scope, binding);\n    binding[behaviorKey] = null;\n    if (this.expressionHasUnbind) {\n      (this.expression as BindingBehavior | ValueConverter).unbind(flags, scope, binding);\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitBindingBehavior(this);\n  }\n}\n\nexport class ValueConverter implements IExpression {\n  public $kind: ExpressionKind.ValueConverter;\n  public readonly expression: IsValueConverter;\n  public readonly name: string;\n  public readonly args: ReadonlyArray<IsAssign>;\n  public readonly converterKey: string;\n\n  constructor(expression: IsValueConverter, name: string, args: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.ValueConverter;\n    this.expression = expression;\n    this.name = name;\n    this.args = args;\n    this.converterKey = ValueConverterResource.keyFrom(this.name);\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    if (!locator) {\n      throw Reporter.error(RuntimeError.NoLocator, this);\n    }\n    const converter = locator.get<ValueConverter & IValueConverter>(this.converterKey);\n    if (!converter) {\n      throw Reporter.error(RuntimeError.NoConverterFound, this);\n    }\n    if ('toView' in converter) {\n      const args = this.args;\n      const len = args.length;\n      const result = Array(len + 1);\n      result[0] = this.expression.evaluate(flags, scope, locator);\n      for (let i = 0; i < len; ++i) {\n        result[i + 1] = args[i].evaluate(flags, scope, locator);\n      }\n      return converter.toView.apply(converter, result);\n    }\n    return this.expression.evaluate(flags, scope, locator);\n  }\n\n  public assign(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator, value: unknown): unknown {\n    if (!locator) {\n      throw Reporter.error(RuntimeError.NoLocator, this);\n    }\n    const converter = locator.get<ValueConverter & IValueConverter>(this.converterKey);\n    if (!converter) {\n      throw Reporter.error(RuntimeError.NoConverterFound, this);\n    }\n    if ('fromView' in converter) {\n      value = converter.fromView.apply(converter, [value].concat(evalList(flags, scope, locator, this.args)));\n    }\n    return this.expression.assign(flags, scope, locator, value);\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    if (scope === undefined) {\n      throw Reporter.error(RuntimeError.UndefinedScope, this);\n    }\n    if (scope === null) {\n      throw Reporter.error(RuntimeError.NullScope, this);\n    }\n    if (!binding) {\n      throw Reporter.error(RuntimeError.NoBinding, this);\n    }\n    const locator = binding.locator;\n    if (!locator) {\n      throw Reporter.error(RuntimeError.NoLocator, this);\n    }\n    this.expression.connect(flags, scope, binding);\n    const args = this.args;\n    for (let i = 0, ii = args.length; i < ii; ++i) {\n      args[i].connect(flags, scope, binding);\n    }\n    const converter = locator.get(this.converterKey) as { signals?: string[] };\n    if (!converter) {\n      throw Reporter.error(RuntimeError.NoConverterFound, this);\n    }\n    const signals = converter.signals;\n    if (signals === undefined) {\n      return;\n    }\n    const signaler = locator.get(ISignaler);\n    for (let i = 0, ii = signals.length; i < ii; ++i) {\n      signaler.addSignalListener(signals[i], binding);\n    }\n  }\n\n  public unbind(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const locator = binding.locator;\n    const converter = locator.get(this.converterKey) as { signals?: string[] };\n    const signals = converter.signals;\n    if (signals === undefined) {\n      return;\n    }\n    const signaler = locator.get(ISignaler);\n    for (let i = 0, ii = signals.length; i < ii; ++i) {\n      signaler.removeSignalListener(signals[i], binding);\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitValueConverter(this);\n  }\n}\n\nexport class Assign implements IExpression {\n  public $kind: ExpressionKind.Assign;\n  public readonly target: IsAssignable;\n  public readonly value: IsAssign;\n\n  constructor(target: IsAssignable, value: IsAssign) {\n    this.$kind = ExpressionKind.Assign;\n    this.target = target;\n    this.value = value;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    return this.target.assign(flags, scope, locator, this.value.evaluate(flags, scope, locator));\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    return;\n  }\n\n  public assign(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator, value: unknown): unknown {\n    this.value.assign(flags, scope, locator, value);\n    return this.target.assign(flags, scope, locator, value);\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitAssign(this);\n  }\n}\n\nexport class Conditional implements IExpression {\n  public $kind: ExpressionKind.Conditional;\n  public assign: IExpression['assign'];\n  public readonly condition: IsBinary;\n  public readonly yes: IsAssign;\n  public readonly no: IsAssign;\n\n  constructor(condition: IsBinary, yes: IsAssign, no: IsAssign) {\n    this.$kind = ExpressionKind.Conditional;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.condition = condition;\n    this.yes = yes;\n    this.no = no;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    return (!!this.condition.evaluate(flags, scope, locator))\n      ? this.yes.evaluate(flags, scope, locator)\n      : this.no.evaluate(flags, scope, locator);\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const condition = this.condition;\n    if (condition.evaluate(flags, scope, null)) {\n      this.condition.connect(flags, scope, binding);\n      this.yes.connect(flags, scope, binding);\n    } else {\n      this.condition.connect(flags, scope, binding);\n      this.no.connect(flags, scope, binding);\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitConditional(this);\n  }\n}\n\nexport class AccessThis implements IExpression {\n  public static readonly $this: AccessThis = new AccessThis(0);\n  public static readonly $parent: AccessThis = new AccessThis(1);\n  public $kind: ExpressionKind.AccessThis;\n  public assign: IExpression['assign'];\n  public connect: IExpression['connect'];\n  public readonly ancestor: number;\n\n  constructor(ancestor: number = 0) {\n    this.$kind = ExpressionKind.AccessThis;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.connect = PLATFORM.noop;\n    this.ancestor = ancestor;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): IBindingContext | undefined {\n    if (scope === undefined) {\n      throw Reporter.error(RuntimeError.UndefinedScope, this);\n    }\n    if (scope === null) {\n      throw Reporter.error(RuntimeError.NullScope, this);\n    }\n    let oc: IOverrideContext | null = scope.overrideContext;\n    let i = this.ancestor;\n    while (i-- && oc) {\n      oc = oc.parentOverrideContext;\n    }\n    return i < 1 && oc ? oc.bindingContext : undefined;\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitAccessThis(this);\n  }\n}\n\nexport class AccessScope implements IExpression {\n  public $kind: ExpressionKind.AccessScope;\n  public readonly name: string;\n  public readonly ancestor: number;\n\n  constructor(name: string, ancestor: number = 0) {\n    this.$kind = ExpressionKind.AccessScope;\n    this.name = name;\n    this.ancestor = ancestor;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): IBindingContext | IBindScope | IOverrideContext {\n    const name = this.name;\n    return BindingContext.get(scope, name, this.ancestor, flags)[name];\n  }\n\n  public assign(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator, value: unknown): unknown {\n    const name = this.name;\n    const context = BindingContext.get(scope, name, this.ancestor, flags);\n    return context ? (context[name] = value) : undefined;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const name = this.name;\n    const context = BindingContext.get(scope, name, this.ancestor, flags);\n    binding.observeProperty(context, name);\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitAccessScope(this);\n  }\n}\n\nexport class AccessMember implements IExpression {\n  public $kind: ExpressionKind.AccessMember;\n  public readonly object: IsLeftHandSide;\n  public readonly name: string;\n\n  constructor(object: IsLeftHandSide, name: string) {\n    this.$kind = ExpressionKind.AccessMember;\n    this.object = object;\n    this.name = name;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    const instance = this.object.evaluate(flags, scope, locator) as IIndexable;\n    return instance === null || instance === undefined ? instance : instance[this.name];\n  }\n\n  public assign(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator, value: unknown): unknown {\n    let instance = this.object.evaluate(flags, scope, locator) as IIndexable;\n    if (instance === null || typeof instance !== 'object') {\n      instance = {};\n      this.object.assign(flags, scope, locator, instance);\n    }\n    instance[this.name] = value;\n    return value;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const obj = this.object.evaluate(flags, scope, null) as IIndexable;\n    this.object.connect(flags, scope, binding);\n    if (obj) {\n      binding.observeProperty(obj, this.name);\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitAccessMember(this);\n  }\n}\n\nexport class AccessKeyed implements IExpression {\n  public $kind: ExpressionKind.AccessKeyed;\n  public readonly object: IsLeftHandSide;\n  public readonly key: IsAssign;\n\n  constructor(object: IsLeftHandSide, key: IsAssign) {\n    this.$kind = ExpressionKind.AccessKeyed;\n    this.object = object;\n    this.key = key;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    const instance = this.object.evaluate(flags, scope, locator) as IIndexable;\n    if (instance === null || instance === undefined) {\n      return undefined;\n    }\n    const key = this.key.evaluate(flags, scope, locator) as string;\n    // note: getKeyed and setKeyed are removed because they are identical to the default spec behavior\n    // and the runtime does this this faster\n    return instance[key];\n  }\n\n  public assign(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator, value: unknown): unknown {\n    const instance = this.object.evaluate(flags, scope, locator) as IIndexable;\n    const key = this.key.evaluate(flags, scope, locator) as string;\n    return instance[key] = value;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const obj = this.object.evaluate(flags, scope, null);\n    this.object.connect(flags, scope, binding);\n    if (typeof obj === 'object' && obj !== null) {\n      this.key.connect(flags, scope, binding);\n      const key = this.key.evaluate(flags, scope, null);\n      // observe the property represented by the key as long as it's not an array indexer\n      // (note: string indexers behave the same way as numeric indexers as long as they represent numbers)\n      if (!(Array.isArray(obj) && isNumeric(key))) {\n        binding.observeProperty(obj, key as string);\n      }\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitAccessKeyed(this);\n  }\n}\n\nexport class CallScope implements IExpression {\n  public $kind: ExpressionKind.CallScope;\n  public assign: IExpression['assign'];\n  public readonly name: string;\n  public readonly args: ReadonlyArray<IsAssign>;\n  public readonly ancestor: number;\n\n  constructor(name: string, args: ReadonlyArray<IsAssign>, ancestor: number = 0) {\n    this.$kind = ExpressionKind.CallScope;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.name = name;\n    this.args = args;\n    this.ancestor = ancestor;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator | null): unknown {\n    const args = evalList(flags, scope, locator, this.args);\n    const context = BindingContext.get(scope, this.name, this.ancestor, flags);\n    const func = getFunction(flags, context, this.name);\n    if (func) {\n      return func.apply(context, args);\n    }\n    return undefined;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const args = this.args;\n    for (let i = 0, ii = args.length; i < ii; ++i) {\n      args[i].connect(flags, scope, binding);\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitCallScope(this);\n  }\n}\n\nexport class CallMember implements IExpression {\n  public $kind: ExpressionKind.CallMember;\n  public assign: IExpression['assign'];\n  public readonly object: IsLeftHandSide;\n  public readonly name: string;\n  public readonly args: ReadonlyArray<IsAssign>;\n\n  constructor(object: IsLeftHandSide, name: string, args: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.CallMember;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.object = object;\n    this.name = name;\n    this.args = args;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    const instance = this.object.evaluate(flags, scope, locator) as IIndexable;\n    const args = evalList(flags, scope, locator, this.args);\n    const func = getFunction(flags, instance, this.name);\n    if (func) {\n      return func.apply(instance, args);\n    }\n    return undefined;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const obj = this.object.evaluate(flags, scope, null) as IIndexable;\n    this.object.connect(flags, scope, binding);\n    if (getFunction(flags & ~LifecycleFlags.mustEvaluate, obj, this.name)) {\n      const args = this.args;\n      for (let i = 0, ii = args.length; i < ii; ++i) {\n        args[i].connect(flags, scope, binding);\n      }\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitCallMember(this);\n  }\n}\n\nexport class CallFunction implements IExpression {\n  public $kind: ExpressionKind.CallFunction;\n  public assign: IExpression['assign'];\n  public readonly func: IsLeftHandSide;\n  public readonly args: ReadonlyArray<IsAssign>;\n\n  constructor(func: IsLeftHandSide, args: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.CallFunction;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.func = func;\n    this.args = args;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    const func = this.func.evaluate(flags, scope, locator);\n    if (typeof func === 'function') {\n      return func.apply(null, evalList(flags, scope, locator, this.args));\n    }\n    if (!(flags & LifecycleFlags.mustEvaluate) && (func === null || func === undefined)) {\n      return undefined;\n    }\n    throw Reporter.error(RuntimeError.NotAFunction, this);\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const func = this.func.evaluate(flags, scope, null);\n    this.func.connect(flags, scope, binding);\n    if (typeof func === 'function') {\n      const args = this.args;\n      for (let i = 0, ii = args.length; i < ii; ++i) {\n        args[i].connect(flags, scope, binding);\n      }\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitCallFunction(this);\n  }\n}\n\nexport type BinaryOperator = '&&' | '||' |  '==' |  '===' |  '!=' |  '!==' |  'instanceof' |  'in' |  '+' |  '-' |  '*' |  '/' |  '%' |  '<' |  '>' |  '<=' |  '>=';\n\nexport class Binary implements IExpression {\n  public $kind: ExpressionKind.Binary;\n  public assign: IExpression['assign'];\n  public readonly operation: BinaryOperator;\n  public readonly left: IsBinary;\n  public readonly right: IsBinary;\n\n  constructor(operation: BinaryOperator, left: IsBinary, right: IsBinary) {\n    this.$kind = ExpressionKind.Binary;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.operation = operation;\n    this.left = left;\n    this.right = right;\n\n    // what we're doing here is effectively moving the large switch statement from evaluate to the constructor\n    // so that the check only needs to be done once, and evaluate (which is called many times) will have a lot less\n    // work to do; we can do this because the operation can't change after it's parsed\n    this.evaluate = this[operation] as IExpression['evaluate'];\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    throw Reporter.error(RuntimeError.UnknownOperator, this);\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const left = this.left.evaluate(flags, scope, null);\n    this.left.connect(flags, scope, binding);\n    if (this.operation === '&&' && !left || this.operation === '||' && left) {\n      return;\n    }\n    this.right.connect(flags, scope, binding);\n  }\n\n  private ['&&'](f: LifecycleFlags, s: IScope, l: IServiceLocator): unknown {\n    return this.left.evaluate(f, s, l) && this.right.evaluate(f, s, l);\n  }\n  private ['||'](f: LifecycleFlags, s: IScope, l: IServiceLocator): unknown {\n    return this.left.evaluate(f, s, l) || this.right.evaluate(f, s, l);\n  }\n  private ['=='](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    // tslint:disable-next-line:triple-equals\n    return this.left.evaluate(f, s, l) == this.right.evaluate(f, s, l);\n  }\n  private ['==='](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    return this.left.evaluate(f, s, l) === this.right.evaluate(f, s, l);\n  }\n  private ['!='](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    // tslint:disable-next-line:triple-equals\n    return this.left.evaluate(f, s, l) != this.right.evaluate(f, s, l);\n  }\n  private ['!=='](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    return this.left.evaluate(f, s, l) !== this.right.evaluate(f, s, l);\n  }\n  private ['instanceof'](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    const right = this.right.evaluate(f, s, l);\n    if (typeof right === 'function') {\n      return this.left.evaluate(f, s, l) instanceof right;\n    }\n    return false;\n  }\n  private ['in'](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    const right = this.right.evaluate(f, s, l);\n    if (right !== null && typeof right === 'object') {\n      return this.left.evaluate(f, s, l) as string in right;\n    }\n    return false;\n  }\n  // note: autoConvertAdd (and the null check) is removed because the default spec behavior is already largely similar\n  // and where it isn't, you kind of want it to behave like the spec anyway (e.g. return NaN when adding a number to undefined)\n  // this makes bugs in user code easier to track down for end users\n  // also, skipping these checks and leaving it to the runtime is a nice little perf boost and simplifies our code\n  private ['+'](f: LifecycleFlags, s: IScope, l: IServiceLocator): number {\n    return (this.left.evaluate(f, s, l) as number) + (this.right.evaluate(f, s, l) as number);\n  }\n  private ['-'](f: LifecycleFlags, s: IScope, l: IServiceLocator): number {\n    return (this.left.evaluate(f, s, l) as number) - (this.right.evaluate(f, s, l) as number);\n  }\n  private ['*'](f: LifecycleFlags, s: IScope, l: IServiceLocator): number {\n    return (this.left.evaluate(f, s, l) as number) * (this.right.evaluate(f, s, l) as number);\n  }\n  private ['/'](f: LifecycleFlags, s: IScope, l: IServiceLocator): number {\n    return (this.left.evaluate(f, s, l) as number) / (this.right.evaluate(f, s, l) as number);\n  }\n  private ['%'](f: LifecycleFlags, s: IScope, l: IServiceLocator): number {\n    return (this.left.evaluate(f, s, l) as number) % (this.right.evaluate(f, s, l) as number);\n  }\n  private ['<'](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    return (this.left.evaluate(f, s, l) as number) < (this.right.evaluate(f, s, l) as number);\n  }\n  private ['>'](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    return (this.left.evaluate(f, s, l) as number) > (this.right.evaluate(f, s, l) as number);\n  }\n  private ['<='](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    return (this.left.evaluate(f, s, l) as number) <= (this.right.evaluate(f, s, l) as number);\n  }\n  private ['>='](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    return (this.left.evaluate(f, s, l) as number) >= (this.right.evaluate(f, s, l) as number);\n  }\n\n  // tslint:disable-next-line:member-ordering\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitBinary(this);\n  }\n}\n\nexport type UnaryOperator = 'void' | 'typeof' | '!' | '-' | '+';\n\nexport class Unary implements IExpression {\n  public $kind: ExpressionKind.Unary;\n  public assign: IExpression['assign'];\n  public readonly operation: UnaryOperator;\n  public readonly expression: IsLeftHandSide;\n\n  constructor(operation: UnaryOperator, expression: IsLeftHandSide) {\n    this.$kind = ExpressionKind.Unary;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.operation = operation;\n    this.expression = expression;\n\n    // see Binary (we're doing the same thing here)\n    this.evaluate = this[operation] as IExpression['evaluate'];\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    throw Reporter.error(RuntimeError.UnknownOperator, this);\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    this.expression.connect(flags, scope, binding);\n  }\n\n  public ['void'](f: LifecycleFlags, s: IScope, l: IServiceLocator): undefined {\n    return void this.expression.evaluate(f, s, l);\n  }\n  public ['typeof'](f: LifecycleFlags, s: IScope, l: IServiceLocator): string {\n    return typeof this.expression.evaluate(f, s, l);\n  }\n  public ['!'](f: LifecycleFlags, s: IScope, l: IServiceLocator): boolean {\n    return !this.expression.evaluate(f, s, l);\n  }\n  public ['-'](f: LifecycleFlags, s: IScope, l: IServiceLocator): number {\n    return -(this.expression.evaluate(f, s, l) as number);\n  }\n  public ['+'](f: LifecycleFlags, s: IScope, l: IServiceLocator): number {\n    return +(this.expression.evaluate(f, s, l) as number);\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitUnary(this);\n  }\n}\nexport class PrimitiveLiteral<TValue extends StrictPrimitive = StrictPrimitive> implements IExpression {\n  public static readonly $undefined: PrimitiveLiteral<undefined> = new PrimitiveLiteral<undefined>(undefined);\n  public static readonly $null: PrimitiveLiteral<null> = new PrimitiveLiteral<null>(null);\n  public static readonly $true: PrimitiveLiteral<true> = new PrimitiveLiteral<true>(true);\n  public static readonly $false: PrimitiveLiteral<false> = new PrimitiveLiteral<false>(false);\n  public static readonly $empty: PrimitiveLiteral<string> = new PrimitiveLiteral<''>('');\n  public $kind: ExpressionKind.PrimitiveLiteral;\n  public connect: IExpression['connect'];\n  public assign: IExpression['assign'];\n  public readonly value: TValue;\n\n  constructor(value: TValue) {\n    this.$kind = ExpressionKind.PrimitiveLiteral;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.connect = PLATFORM.noop;\n    this.value = value;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): TValue {\n    return this.value;\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitPrimitiveLiteral(this);\n  }\n}\n\nexport class HtmlLiteral implements IExpression {\n  public $kind: ExpressionKind.HtmlLiteral;\n  public assign: IExpression['assign'];\n  public readonly parts: ReadonlyArray<HtmlLiteral>;\n\n  constructor(parts: ReadonlyArray<HtmlLiteral>) {\n    this.$kind = ExpressionKind.HtmlLiteral;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.parts = parts;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): string {\n    const elements = this.parts;\n    let result = '';\n    for (let i = 0, ii = elements.length; i < ii; ++i) {\n      const value = elements[i].evaluate(flags, scope, locator);\n      if (value === undefined || value === null) {\n        continue;\n      }\n      result += value;\n    }\n    return result;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    for (let i = 0, ii = this.parts.length; i < ii; ++i) {\n      this.parts[i].connect(flags, scope, binding);\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitHtmlLiteral(this);\n  }\n}\n\nexport class ArrayLiteral implements IExpression {\n  public static readonly $empty: ArrayLiteral = new ArrayLiteral(PLATFORM.emptyArray);\n  public $kind: ExpressionKind.ArrayLiteral;\n  public assign: IExpression['assign'];\n  public readonly elements: ReadonlyArray<IsAssign>;\n\n  constructor(elements: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.ArrayLiteral;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.elements = elements;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): ReadonlyArray<unknown> {\n    const elements = this.elements;\n    const length = elements.length;\n    const result = Array(length);\n    for (let i = 0; i < length; ++i) {\n      result[i] = elements[i].evaluate(flags, scope, locator);\n    }\n    return result;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const elements = this.elements;\n    for (let i = 0, ii = elements.length; i < ii; ++i) {\n      elements[i].connect(flags, scope, binding);\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitArrayLiteral(this);\n  }\n}\n\nexport class ObjectLiteral implements IExpression {\n  public static readonly $empty: ObjectLiteral = new ObjectLiteral(PLATFORM.emptyArray, PLATFORM.emptyArray);\n  public $kind: ExpressionKind.ObjectLiteral;\n  public assign: IExpression['assign'];\n  public readonly keys: ReadonlyArray<number | string>;\n  public readonly values: ReadonlyArray<IsAssign>;\n\n  constructor(keys: ReadonlyArray<number | string>, values: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.ObjectLiteral;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.keys = keys;\n    this.values = values;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): Record<string, unknown> {\n    const instance: Record<string, unknown> = {};\n    const keys = this.keys;\n    const values = this.values;\n    for (let i = 0, ii = keys.length; i < ii; ++i) {\n      instance[keys[i]] = values[i].evaluate(flags, scope, locator);\n    }\n    return instance;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const keys = this.keys;\n    const values = this.values;\n    for (let i = 0, ii = keys.length; i < ii; ++i) {\n      values[i].connect(flags, scope, binding);\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitObjectLiteral(this);\n  }\n}\n\nexport class Template implements IExpression {\n  public static readonly $empty: Template = new Template(['']);\n  public $kind: ExpressionKind.Template;\n  public assign: IExpression['assign'];\n  public readonly cooked: ReadonlyArray<string>;\n  public readonly expressions: ReadonlyArray<IsAssign>;\n\n  constructor(cooked: ReadonlyArray<string>, expressions?: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.Template;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.cooked = cooked;\n    this.expressions = expressions === undefined ? PLATFORM.emptyArray : expressions;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): string {\n    const expressions = this.expressions;\n    const cooked = this.cooked;\n    let result = cooked[0];\n    for (let i = 0, ii = expressions.length; i < ii; ++i) {\n      result += expressions[i].evaluate(flags, scope, locator);\n      result += cooked[i + 1];\n    }\n    return result;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const expressions = this.expressions;\n    for (let i = 0, ii = expressions.length; i < ii; ++i) {\n      expressions[i].connect(flags, scope, binding);\n      i++;\n    }\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitTemplate(this);\n  }\n}\n\nexport class TaggedTemplate implements IExpression {\n  public $kind: ExpressionKind.TaggedTemplate;\n  public assign: IExpression['assign'];\n  public readonly cooked: ReadonlyArray<string> & { raw?: ReadonlyArray<string> };\n  public readonly func: IsLeftHandSide;\n  public readonly expressions: ReadonlyArray<IsAssign>;\n\n  constructor(cooked: ReadonlyArray<string> & { raw?: ReadonlyArray<string> }, raw: ReadonlyArray<string>, func: IsLeftHandSide, expressions?: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.TaggedTemplate;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.cooked = cooked;\n    this.cooked.raw = raw;\n    this.func = func;\n    this.expressions = expressions === undefined ? PLATFORM.emptyArray : expressions;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): string {\n    const expressions = this.expressions;\n    const len = expressions.length;\n    const results = Array(len);\n    for (let i = 0, ii = len; i < ii; ++i) {\n      results[i] = expressions[i].evaluate(flags, scope, locator);\n    }\n    const func = this.func.evaluate(flags, scope, locator);\n    if (typeof func !== 'function') {\n      throw Reporter.error(RuntimeError.NotAFunction, this);\n    }\n    return func.apply(null, [this.cooked].concat(results));\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    const expressions = this.expressions;\n    for (let i = 0, ii = expressions.length; i < ii; ++i) {\n      expressions[i].connect(flags, scope, binding);\n    }\n    this.func.connect(flags, scope, binding);\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitTaggedTemplate(this);\n  }\n}\n\nexport class ArrayBindingPattern implements IExpression {\n  public $kind: ExpressionKind.ArrayBindingPattern;\n  public readonly elements: ReadonlyArray<IsAssign>;\n\n  // We'll either have elements, or keys+values, but never all 3\n  constructor(elements: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.ArrayBindingPattern;\n    this.elements = elements;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    // TODO\n    return undefined;\n  }\n\n  public assign(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator, obj: IIndexable): unknown {\n    // TODO\n    return undefined;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    return;\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitArrayBindingPattern(this);\n  }\n}\n\nexport class ObjectBindingPattern implements IExpression {\n  public $kind: ExpressionKind.ObjectBindingPattern;\n  public readonly keys: ReadonlyArray<string | number>;\n  public readonly values: ReadonlyArray<IsAssign>;\n\n  // We'll either have elements, or keys+values, but never all 3\n  constructor(keys: ReadonlyArray<string | number>, values: ReadonlyArray<IsAssign>) {\n    this.$kind = ExpressionKind.ObjectBindingPattern;\n    this.keys = keys;\n    this.values = values;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    // TODO\n    return undefined;\n  }\n\n  public assign(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator, obj: IIndexable): unknown {\n    // TODO\n    return undefined;\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    return;\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitObjectBindingPattern(this);\n  }\n}\n\nexport class BindingIdentifier implements IExpression {\n  public $kind: ExpressionKind.BindingIdentifier;\n  public readonly name: string;\n\n  constructor(name: string) {\n    this.$kind = ExpressionKind.BindingIdentifier;\n    this.name = name;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator | null): string {\n    return this.name;\n  }\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    return;\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitBindingIdentifier(this);\n  }\n}\n\nexport type BindingIdentifierOrPattern = BindingIdentifier | ArrayBindingPattern | ObjectBindingPattern;\n\nconst toStringTag = Object.prototype.toString;\n\n// https://tc39.github.io/ecma262/#sec-iteration-statements\n// https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\nexport class ForOfStatement implements IExpression {\n  public $kind: ExpressionKind.ForOfStatement;\n  public assign: IExpression['assign'];\n  public readonly declaration: BindingIdentifierOrPattern;\n  public readonly iterable: IsBindingBehavior;\n\n  constructor(declaration: BindingIdentifierOrPattern, iterable: IsBindingBehavior) {\n    this.$kind = ExpressionKind.ForOfStatement;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.declaration = declaration;\n    this.iterable = iterable;\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): unknown {\n    return this.iterable.evaluate(flags, scope, locator);\n  }\n\n  public count(result: ObservedCollection | number | null | undefined): number {\n    return CountForOfStatement[toStringTag.call(result)](result);\n  }\n\n  public iterate(result: ObservedCollection | number | null | undefined, func: (arr: Collection, index: number, item: unknown) => void): void {\n    IterateForOfStatement[toStringTag.call(result)](result, func);\n  }\n\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    this.declaration.connect(flags, scope, binding);\n    this.iterable.connect(flags, scope, binding);\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitForOfStatement(this);\n  }\n}\n\n/*\n* Note: this implementation is far simpler than the one in vCurrent and might be missing important stuff (not sure yet)\n* so while this implementation is identical to Template and we could reuse that one, we don't want to lock outselves in to potentially the wrong abstraction\n* but this class might be a candidate for removal if it turns out it does provide all we need\n*/\nexport class Interpolation implements IExpression {\n  public $kind: ExpressionKind.Interpolation;\n  public assign: IExpression['assign'];\n  public readonly parts: ReadonlyArray<string>;\n  public readonly expressions: ReadonlyArray<IsBindingBehavior>;\n  public readonly isMulti: boolean;\n  public readonly firstExpression: IsBindingBehavior;\n  constructor(parts: ReadonlyArray<string>, expressions?: ReadonlyArray<IsBindingBehavior>) {\n    this.$kind = ExpressionKind.Interpolation;\n    this.assign = PLATFORM.noop as () => unknown;\n    this.parts = parts;\n    this.expressions = expressions === undefined ? PLATFORM.emptyArray : expressions;\n    this.isMulti = this.expressions.length > 1;\n    this.firstExpression = this.expressions[0];\n  }\n\n  public evaluate(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator): string {\n    if (this.isMulti) {\n      const expressions = this.expressions;\n      const parts = this.parts;\n      let result = parts[0];\n      for (let i = 0, ii = expressions.length; i < ii; ++i) {\n        result += expressions[i].evaluate(flags, scope, locator);\n        result += parts[i + 1];\n      }\n      return result;\n    } else {\n      const parts = this.parts;\n      return parts[0] + this.firstExpression.evaluate(flags, scope, locator) + parts[1];\n    }\n  }\n  public connect(flags: LifecycleFlags, scope: IScope, binding: IConnectableBinding): void {\n    return;\n  }\n\n  public accept<T>(visitor: IVisitor<T>): T {\n    return visitor.visitInterpolation(this);\n  }\n}\n\n/*\n* Note: for a property that is always the same, directly assigning it to the prototype is more efficient CPU wise\n* (gets assigned once, instead of per constructor call) as well as memory wise (stored once, instead of per instance)\n*\n* This gives us a cheap way to add some extra information to the AST for the runtime to do things more efficiently.\n*/\nBindingBehavior.prototype.$kind = ExpressionKind.BindingBehavior;\nValueConverter.prototype.$kind = ExpressionKind.ValueConverter;\nAssign.prototype.$kind = ExpressionKind.Assign;\nConditional.prototype.$kind = ExpressionKind.Conditional;\nAccessThis.prototype.$kind = ExpressionKind.AccessThis;\nAccessScope.prototype.$kind = ExpressionKind.AccessScope;\nAccessMember.prototype.$kind = ExpressionKind.AccessMember;\nAccessKeyed.prototype.$kind = ExpressionKind.AccessKeyed;\nCallScope.prototype.$kind = ExpressionKind.CallScope;\nCallMember.prototype.$kind = ExpressionKind.CallMember;\nCallFunction.prototype.$kind = ExpressionKind.CallFunction;\nBinary.prototype.$kind = ExpressionKind.Binary;\nUnary.prototype.$kind = ExpressionKind.Unary;\nPrimitiveLiteral.prototype.$kind = ExpressionKind.PrimitiveLiteral;\nHtmlLiteral.prototype.$kind = ExpressionKind.HtmlLiteral;\nArrayLiteral.prototype.$kind = ExpressionKind.ArrayLiteral;\nObjectLiteral.prototype.$kind = ExpressionKind.ObjectLiteral;\nTemplate.prototype.$kind = ExpressionKind.Template;\nTaggedTemplate.prototype.$kind = ExpressionKind.TaggedTemplate;\nArrayBindingPattern.prototype.$kind = ExpressionKind.ArrayBindingPattern;\nObjectBindingPattern.prototype.$kind = ExpressionKind.ObjectBindingPattern;\nBindingIdentifier.prototype.$kind = ExpressionKind.BindingIdentifier;\nForOfStatement.prototype.$kind = ExpressionKind.ForOfStatement;\nInterpolation.prototype.$kind = ExpressionKind.Interpolation;\n\n/// Evaluate the [list] in context of the [scope].\nfunction evalList(flags: LifecycleFlags, scope: IScope, locator: IServiceLocator | null, list: ReadonlyArray<IExpression>): unknown[] {\n  const len = list.length;\n  const result = Array(len);\n  for (let i = 0; i < len; ++i) {\n    result[i] = list[i].evaluate(flags, scope, locator);\n  }\n  return result;\n}\n\nfunction getFunction(flags: LifecycleFlags, obj: IIndexable, name: string): (...args: unknown[]) => unknown | null {\n  const func = obj === null || obj === undefined ? null : obj[name];\n  if (typeof func === 'function') {\n    return func as (...args: unknown[]) => unknown;\n  }\n  if (!(flags & LifecycleFlags.mustEvaluate) && (func === null || func === undefined)) {\n    return null;\n  }\n  throw Reporter.error(RuntimeError.NotAFunction, obj, name, func);\n}\n\nfunction isNumeric(value: unknown): value is number {\n  const valueType = typeof value;\n  if (valueType === 'number') return true;\n  if (valueType !== 'string') return false;\n  const len = (value as string).length;\n  if (len === 0) return false;\n  for (let i = 0; i < len; ++i) {\n    const char = (value as string).charCodeAt(i);\n    if (char < 0x30 /*0*/ || char > 0x39/*9*/) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** @internal */\nexport const IterateForOfStatement = {\n  ['[object Array]'](result: unknown[], func: (arr: Collection, index: number, item: unknown) => void): void {\n    for (let i = 0, ii = result.length; i < ii; ++i) {\n      func(result, i, result[i]);\n    }\n  },\n  ['[object Map]'](result: Map<unknown, unknown>, func: (arr: Collection, index: number, item: unknown) => void): void {\n    const arr = Array(result.size);\n    let i = -1;\n    for (const entry of result.entries()) {\n      arr[++i] = entry;\n    }\n    IterateForOfStatement['[object Array]'](arr, func);\n  },\n  ['[object Set]'](result: Set<unknown>, func: (arr: Collection, index: number, item: unknown) => void): void {\n    const arr = Array(result.size);\n    let i = -1;\n    for (const key of result.keys()) {\n      arr[++i] = key;\n    }\n    IterateForOfStatement['[object Array]'](arr, func);\n  },\n  ['[object Number]'](result: number, func: (arr: Collection, index: number, item: unknown) => void): void {\n    const arr = Array(result);\n    for (let i = 0; i < result; ++i) {\n      arr[i] = i;\n    }\n    IterateForOfStatement['[object Array]'](arr, func);\n  },\n  ['[object Null]'](result: null, func: (arr: Collection, index: number, item: unknown) => void): void {\n    return;\n  },\n  ['[object Undefined]'](result: null, func: (arr: Collection, index: number, item: unknown) => void): void {\n    return;\n  }\n};\n\n/** @internal */\nexport const CountForOfStatement = {\n  ['[object Array]'](result: unknown[]): number { return result.length; },\n  ['[object Map]'](result: Map<unknown, unknown>): number { return result.size; },\n  ['[object Set]'](result: Set<unknown>): number { return result.size; },\n  ['[object Number]'](result: number): number { return result; },\n  ['[object Null]'](result: null): number { return 0; },\n  ['[object Undefined]'](result: null): number { return 0; }\n};\n","/*\n* Note: the oneTime binding now has a non-zero value for 2 reasons:\n*  - plays nicer with bitwise operations (more consistent code, more explicit settings)\n*  - allows for potentially having something like BindingMode.oneTime | BindingMode.fromView, where an initial value is set once to the view but updates from the view also propagate back to the view model\n*\n* Furthermore, the \"default\" mode would be for simple \".bind\" expressions to make it explicit for our logic that the default is being used.\n* This essentially adds extra information which binding could use to do smarter things and allows bindingBehaviors that add a mode instead of simply overwriting it\n*/\nexport enum BindingMode {\n  oneTime  = 0b0001,\n  toView   = 0b0010,\n  fromView = 0b0100,\n  twoWay   = 0b0110,\n  default  = 0b1000\n}\n","import {\n  DI,\n  IContainer,\n  IDisposable,\n  Immutable,\n  InterfaceSymbol,\n  IResolver,\n  IServiceLocator,\n  Omit,\n  PLATFORM,\n  Registration,\n  Tracer\n} from '@aurelia/kernel';\nimport { IConnectableBinding } from './binding/connectable';\nimport { ITargetedInstruction, TemplateDefinition, TemplatePartDefinitions } from './definitions';\nimport { INode, INodeSequence, IRenderLocation } from './dom';\nimport { IChangeTracker, IScope, LifecycleFlags } from './observation';\n\nconst slice = Array.prototype.slice;\n\nexport const enum State {\n  none                  = 0b000000000000,\n  isBinding             = 0b000000000001,\n  isBound               = 0b000000000010,\n  isAttaching           = 0b000000000100,\n  isAttached            = 0b000000001000,\n  isMounted             = 0b000000010000,\n  isDetaching           = 0b000000100000,\n  isUnbinding           = 0b000001000000,\n  isCached              = 0b000010000000,\n  isContainerless       = 0b000100000000\n}\n\nexport const enum Hooks {\n  none                   = 0b000000000001,\n  hasCreated             = 0b000000000010,\n  hasBinding             = 0b000000000100,\n  hasBound               = 0b000000001000,\n  hasAttaching           = 0b000000010000,\n  hasAttached            = 0b000000100000,\n  hasDetaching           = 0b000001000000,\n  hasDetached            = 0b000010000000,\n  hasUnbinding           = 0b000100000000,\n  hasUnbound             = 0b001000000000,\n  hasRender              = 0b010000000000,\n  hasCaching             = 0b100000000000\n}\n\nexport interface IHooks {\n  $hooks?: Hooks;\n}\n\nexport interface IState {\n  $state?: State;\n  $lifecycle?: ILifecycle;\n}\n\nexport interface IBindables {\n  /**\n   * The Bindings, Views, CustomElements, CustomAttributes and other bindable components that belong to this instance.\n   */\n  $bindableHead?: IBindScope;\n  $bindableTail?: IBindScope;\n}\n\nexport interface IAttachables {\n\n  /**\n   * The Views, CustomElements, CustomAttributes and other attachable components that belong to this instance.\n   */\n  $attachableHead?: IAttach;\n  $attachableTail?: IAttach;\n}\n\n/**\n * An object containing the necessary information to render something for display.\n */\nexport interface IRenderable<T extends INode = INode> extends IBindables, IAttachables, IState {\n\n  /**\n   * The (dependency) context of this instance.\n   *\n   * Contains any dependencies required by this instance or its children.\n   */\n  readonly $context: IRenderContext<T>;\n\n  /**\n   * The nodes that represent the visible aspect of this instance.\n   *\n   * Typically this will be a sequence of `DOM` nodes contained in a `DocumentFragment`\n   */\n  readonly $nodes: INodeSequence<T>;\n\n  /**\n   * The binding scope that the `$bindables` of this instance will be bound to.\n   *\n   * This includes the `BindingContext` which can be either a user-defined view model instance, or a synthetic view model instantiated by a `templateController`\n   */\n  readonly $scope: IScope;\n}\n\nexport const IRenderable = DI.createInterface<IRenderable>('IRenderable').noDefault();\n\nexport interface IRenderContext<T extends INode = INode> extends IServiceLocator {\n  createChild(): IRenderContext<T>;\n  render(renderable: IRenderable<T>, targets: ArrayLike<object>, templateDefinition: TemplateDefinition, host?: T, parts?: TemplatePartDefinitions): void;\n  beginComponentOperation(renderable: IRenderable<T>, target: object, instruction: Immutable<ITargetedInstruction>, factory?: IViewFactory<T>, parts?: TemplatePartDefinitions, location?: IRenderLocation<T>, locationIsContainer?: boolean): IDisposable;\n}\n\nexport interface IView<T extends INode = INode> extends IBindScope, IRenderable<T>, IAttach, IMountable {\n  readonly cache: IViewCache<T>;\n  readonly isFree: boolean;\n  readonly location: IRenderLocation<T>;\n\n  /**\n   * Reserves this `IView` for mounting at a particular `IRenderLocation`.\n   * Also marks this `IView` such that it cannot be returned to the cache until\n   * it is released again.\n   *\n   * @param location The RenderLocation before which the view will be appended to the DOM.\n   */\n  hold(location: IRenderLocation<T>): void;\n\n  /**\n   * Marks this `IView` such that it can be returned to the cache when it is unmounted.\n   *\n   * If this `IView` is not currently attached, it will be unmounted immediately.\n   *\n   * @param flags The `LifecycleFlags` to pass to the unmount operation (only effective\n   * if the view is already in detached state).\n   *\n   * @returns Whether this `IView` can/will be returned to cache\n   */\n  release(flags: LifecycleFlags): boolean;\n\n  lockScope(scope: IScope): void;\n}\n\nexport interface IViewCache<T extends INode = INode> {\n  readonly isCaching: boolean;\n  setCacheSize(size: number | '*', doNotOverrideIfAlreadySet: boolean): void;\n  canReturnToCache(view: IView<T>): boolean;\n  tryReturnToCache(view: IView<T>): boolean;\n}\n\nexport interface IViewFactory<T extends INode = INode> extends IViewCache<T> {\n  readonly name: string;\n  create(): IView<T>;\n}\n\nexport const IViewFactory = DI.createInterface<IViewFactory>('IViewFactory').noDefault();\n\nexport interface ILifecycleCreated extends IHooks, IState {\n  /**\n   * Called at the end of `$hydrate`.\n   *\n   * The following key properties are now assigned and initialized (see `IRenderable` for more detail):\n   * - `this.$bindables`\n   * - `this.$attachables`\n   * - `this.$scope` (null if this is a custom attribute, or contains the view model if this is a custom element)\n   * - `this.$nodes`\n   *\n   * @description\n   * This is the second and last \"hydrate\" lifecycle hook (after `render`). It happens only once per instance (contrary to bind/attach\n   * which can happen many times per instance), though it can happen many times per type (once for each instance)\n   *\n   * This hook is called right before the `$bind` lifecycle starts, making this the last opportunity\n   * for any high-level post processing on initialized properties.\n   */\n  created?(): void;\n}\n\nexport interface ILifecycleBinding extends IHooks, IState {\n  /**\n   * Called at the start of `$bind`, before this instance and its children (if any) are bound.\n   *\n   * - `this.$isBound` is false.\n   * - `this.$scope` is initialized.\n   *\n   * @param flags Contextual information about the lifecycle, such as what triggered it.\n   * Some uses for this hook:\n   * - `flags & LifecycleFlags.fromStartTask`: the Aurelia app is starting (this is the initial bind)\n   * - `flags & LifecycleFlags.fromBind`: this is a normal `$bind` lifecycle\n   * - `flags & LifecycleFlags.updateTargetInstance`: this `$bind` was triggered by some upstream observer and is not a real `$bind` lifecycle\n   * - `flags & LifecycleFlags.fromFlush` (only occurs in conjunction with updateTargetInstance): the update was queued to a `LinkedChangeList` which is now being flushed\n   *\n   * @description\n   * This is the first \"create\" lifecycle hook of the hooks that can occur multiple times per instance,\n   * and the third lifecycle hook (after `render` and `created`) of the very first this.lifecycle.\n   */\n  binding?(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleBound extends IHooks, IState {\n  /** @internal */$nextBound?: ILifecycleBound;\n\n  /**\n   * Called at the end of `$bind`, after this instance and its children (if any) are bound.\n   *\n   * - `$isBound` is true.\n   * - `this.$scope` is initialized.\n   *\n   * @param flags Contextual information about the lifecycle, such as what triggered it.\n   * Some uses for this hook:\n   * - `flags & LifecycleFlags.fromStartTask`: the Aurelia app is starting (this is the initial bind)\n   * - `flags & LifecycleFlags.fromBind`: this is a normal `$bind` lifecycle\n   * - `flags & LifecycleFlags.updateTargetInstance`: this `$bind` was triggered by some upstream observer and is not a real `$bind` lifecycle\n   * - `flags & LifecycleFlags.fromFlush` (only occurs in conjunction with updateTargetInstance): the update was queued to a `LinkedChangeList` which is now being flushed\n   *\n   * @description\n   * This is the second \"create\" lifecycle hook (after `binding`) of the hooks that can occur multiple times per instance,\n   * and the fourth lifecycle hook (after `render`, `created` and `binding`) of the very first this.lifecycle.\n   */\n  bound?(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleUnbinding extends IHooks, IState {\n  /**\n   * Called at the start of `$unbind`, before this instance and its children (if any) are unbound.\n   *\n   * - `this.$isBound` is true.\n   * - `this.$scope` is still available.\n   *\n   * @param flags Contextual information about the lifecycle, such as what triggered it.\n   * Some uses for this hook:\n   * - `flags & LifecycleFlags.fromBind`: the component is just switching scope\n   * - `flags & LifecycleFlags.fromUnbind`: the component is really disposing\n   * - `flags & LifecycleFlags.fromStopTask`: the Aurelia app is stopping\n   *\n   * @description\n   * This is the fourth \"cleanup\" lifecycle hook (after `detaching`, `caching` and `detached`)\n   *\n   * Last opportunity to perform any source or target updates before the bindings are disconnected.\n   *\n   */\n  unbinding?(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleUnbound extends IHooks, IState {\n  /** @internal */$nextUnbound?: ILifecycleUnbound;\n\n  /**\n   * Called at the end of `$unbind`, after this instance and its children (if any) are unbound.\n   *\n   * - `this.$isBound` is false at this point.\n   *\n   * - `this.$scope` may not be available anymore (unless it's a `@customElement`)\n   *\n   * @param flags Contextual information about the lifecycle, such as what triggered it.\n   * Some uses for this hook:\n   * - `flags & LifecycleFlags.fromBind`: the component is just switching scope\n   * - `flags & LifecycleFlags.fromUnbind`: the component is really disposing\n   * - `flags & LifecycleFlags.fromStopTask`: the Aurelia app is stopping\n   *\n   * @description\n   * This is the fifth (and last) \"cleanup\" lifecycle hook (after `detaching`, `caching`, `detached`\n   * and `unbinding`).\n   *\n   * The lifecycle either ends here, or starts at `$bind` again.\n   */\n  unbound?(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleAttaching extends IHooks, IState {\n  /**\n   * Called at the start of `$attach`, before this instance and its children (if any) are attached.\n   *\n   * `$isAttached` is false.\n   *\n   * @param encapsulationSource Ask Rob.\n   * @param lifecycle Utility that encapsulates the attach sequence for a hierarchy of attachables and guarantees the correct attach order.\n   *\n   * @description\n   * This is the third \"create\" lifecycle hook (after `binding` and `bound`) of the hooks that can occur multiple times per instance,\n   * and the fifth lifecycle hook (after `render`, `created`, `binding` and `bound`) of the very first lifecycle\n   *\n   * This is the time to add any (sync or async) tasks (e.g. animations) to the lifecycle that need to happen before\n   * the nodes are added to the DOM.\n   */\n  attaching?(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleAttached extends IHooks, IState {\n  /** @internal */$nextAttached?: ILifecycleAttached;\n\n  /**\n   * Called at the end of `$attach`, after this instance and its children (if any) are attached.\n   *\n   * - `$isAttached` is true.\n   *\n   * @description\n   * This is the fourth (and last) \"create\" lifecycle hook (after `binding`, `bound` and `attaching`) of the hooks that can occur\n   * multiple times per instance, and the sixth lifecycle hook (after `render`, `created`, `binding`, `bound` and `attaching`)\n   * of the very first lifecycle\n   *\n   * This instance and its children (if any) can be assumed\n   * to be fully initialized, bound, rendered, added to the DOM and ready for use.\n   */\n  attached?(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleDetaching extends IHooks, IState {\n  /**\n   * Called at the start of `$detach`, before this instance and its children (if any) are detached.\n   *\n   * - `$isAttached` is true.\n   *\n   * @param lifecycle Utility that encapsulates the detach sequence for a hierarchy of attachables and guarantees the correct detach order.\n   *\n   * @description\n   * This is the first \"cleanup\" lifecycle hook.\n   *\n   * This is the time to add any (sync or async) tasks (e.g. animations) to the lifecycle that need to happen before\n   * the nodes are removed from the DOM.\n   */\n  detaching?(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleDetached extends IHooks, IState {\n  /** @internal */$nextDetached?: ILifecycleDetached;\n\n  /**\n   * Called at the end of `$detach`, after this instance and its children (if any) are detached.\n   *\n   * - `$isAttached` is false.\n   *\n   * @description\n   * This is the third \"cleanup\" lifecycle hook (after `detaching` and `caching`).\n   *\n   * The `$nodes` are now removed from the DOM and the `View` (if possible) is returned to cache.\n   *\n   * If no `$unbind` lifecycle is queued, this is the last opportunity to make state changes before the lifecycle ends.\n   */\n  detached?(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleCaching extends IHooks, IState {\n  /**\n   * Called during `$unmount` (which happens during `$detach`), specifically after the\n   * `$nodes` are removed from the DOM, but before the view is actually added to the cache.\n   *\n   * @description\n   * This is the second \"cleanup\" lifecycle hook.\n   *\n   * This lifecycle is invoked if and only if the `ViewFactory` that created the `View` allows the view to be cached.\n   *\n   * Usually this hook is not invoked unless you explicitly set the cache size to to something greater than zero\n   * on the resource description.\n   */\n  caching?(flags: LifecycleFlags): void;\n}\n\n/**\n * Defines optional lifecycle hooks that will be called only when they are implemented.\n */\nexport interface ILifecycleHooks extends\n  ILifecycleCreated,\n  ILifecycleBinding,\n  ILifecycleBound,\n  ILifecycleUnbinding,\n  ILifecycleUnbound,\n  ILifecycleAttaching,\n  ILifecycleAttached,\n  ILifecycleDetaching,\n  ILifecycleDetached,\n  ILifecycleCaching { }\n\nexport interface ILifecycleCache {\n  $cache(flags: LifecycleFlags): void;\n}\n\nexport interface ICachable extends ILifecycleCache { }\n\nexport interface ILifecycleAttach {\n  $attach(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleDetach {\n  $detach(flags: LifecycleFlags): void;\n}\n\nexport interface IAttach extends ILifecycleAttach, ILifecycleDetach, ICachable {\n  /** @internal */$nextAttach: IAttach;\n  /** @internal */$prevAttach: IAttach;\n}\n\nexport interface ILifecycleMount {\n  /** @internal */$nextMount?: ILifecycleMount;\n\n  /**\n   * Add the `$nodes` of this instance to the Host or RenderLocation that this instance is holding.\n   */\n  $mount(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleUnmount {\n  /** @internal */$nextUnmount?: ILifecycleUnmount;\n\n  /**\n   * Remove the `$nodes` of this instance from the Host or RenderLocation that this instance is holding, optionally returning them to a cache.\n   * @returns\n   * - `true` if the instance has been returned to the cache.\n   * - `false` if the cache (typically ViewFactory) did not allow the instance to be cached.\n   * - `undefined` (void) if the instance does not support caching. Functionally equivalent to `false`\n   */\n  $unmount(flags: LifecycleFlags): boolean | void;\n}\nexport interface IMountable extends ILifecycleMount, ILifecycleUnmount { }\n\nexport interface ILifecycleUnbind {\n  $state?: State;\n  $unbind(flags: LifecycleFlags): void;\n}\n\nexport interface ILifecycleUnbindAfterDetach extends ILifecycleUnbind {\n  $nextUnbindAfterDetach?: ILifecycleUnbindAfterDetach;\n}\n\nexport interface ILifecycleBind {\n  $state?: State;\n  $bind(flags: LifecycleFlags, scope?: IScope): void;\n}\n\nexport interface ILifecycleBindScope {\n  $state?: State;\n  $bind(flags: LifecycleFlags, scope: IScope): void;\n}\n\nexport interface IBind extends ILifecycleBind, ILifecycleUnbind {\n  /** @internal */$nextBind: IBindScope;\n  /** @internal */$prevBind: IBindScope;\n}\n\nexport interface IBindScope extends Omit<IBind, '$bind'>, ILifecycleBindScope { }\n\nconst marker = Object.freeze(Object.create(null));\n\n/*\n * Note: the lifecycle object ensures that certain callbacks are executed in a particular order that may\n * deviate from the order in which the component tree is walked.\n * The component tree is always walked in a top-down recursive fashion, for example:\n * {\n *   path: \"1\",\n *   children: [\n *     { path: \"1.1\", children: [\n *       { path: \"1.1.1\" },\n *       { path: \"1.1.2\" }\n *     ]},\n *     { path: \"1.2\", children: [\n *       { path: \"1.2.1\" },\n *       { path: \"1.2.2\" }\n *     ]}\n *   ]\n * }\n * The call chain would be: 1 -> 1.1 -> 1.1.1 -> 1.1.2 -> 1.2 -> 1.2.1 -> 1.2.2\n *\n * During mounting, for example, we want to mount the root component *last* (so that the DOM doesn't need to be updated\n * for each mount operation), and we want to invoke the detached callbacks in the same order that the components were mounted.\n * But all mounts need to happen before any of the detach callbacks are invoked, so we store the components in a LinkedList\n * whose execution is deferred until all the normal $attach/$detach calls have occurred.\n * In the example of attach, the call chains would look like this:\n * $attach: 1 -> 1.1 -> 1.1.1 -> 1.1.2 -> 1.2 -> 1.2.1 -> 1.2.2\n * $mount: 1.1.1 -> 1.1.2 -> 1.1 -> 1.2.1 -> 1.2.2 -> 1.2 -> 1\n * attached: 1.1.1 -> 1.1.2 -> 1.1 -> 1.2.1 -> 1.2.2 -> 1.2 -> 1\n *\n * Instead of (without the lifecycles):\n * $attach: 1, $mount: 1, detached: 1 -> $attach: 1.1, $mount: 1.1, detached: 1.1 -> etc..\n *\n * Furthermore, the lifecycle object tracks the call depth so that it will automatically run a list of operations\n * when the top-most component finishes execution, and components themselves don't need to worry about where in the\n * tree they reside.\n */\n\nexport interface IFlushLifecycle {\n  processFlushQueue(flags: LifecycleFlags): void;\n\n  /**\n   * Queue a flush() callback to be executed either on the next promise tick or on the next\n   * bind lifecycle (if during startTask) or on the next attach lifecycle.\n   *\n   * This method is idempotent; adding the same item more than once has the same effect as\n   * adding it once.\n   *\n   * This queue is primarily used by DOM target observers and collection observers.\n   */\n  enqueueFlush(requestor: IChangeTracker): Promise<void>;\n}\n\nexport interface IBindLifecycle extends IFlushLifecycle {\n  processConnectQueue(flags: LifecycleFlags): void;\n  processPatchQueue(flags: LifecycleFlags): void;\n  processBindQueue(flags: LifecycleFlags): void;\n  processUnbindQueue(flags: LifecycleFlags): void;\n\n  /**\n   * Open up / expand a bind batch for enqueueing `bound` callbacks.\n   *\n   * When the top-most caller calls `endBind`, the `bound` callbacks will be invoked.\n   *\n   * Each `beginBind` *must* be matched by an `endBind`.\n   */\n  beginBind(): void;\n\n  /**\n   * Add a `bound` callback to the queue, to be invoked when the current bind batch\n   * is ended via `endBind` by the top-most caller.\n   *\n   * This method is idempotent; adding the same item more than once has the same effect as\n   * adding it once.\n   */\n  enqueueBound(requestor: ILifecycleBound): void;\n\n  /**\n   * Add a `connect` callback to the queue, to be invoked *after* mounting and *before*\n   * `detached` callbacks.\n   *\n   * This method is idempotent; adding the same item more than once has the same effect as\n   * adding it once.\n   */\n  enqueueConnect(requestor: IConnectableBinding): void;\n\n  /**\n   * Close / shrink a bind batch for invoking queued `bound` callbacks.\n   * @param flags The flags that will be passed into the `bound` callbacks.\n   *\n   * Flags during bind are primarily for optimization purposes, and to control whether\n   * changes are batched or propagated synchronously.\n   * If unsure which flags to provide, it's OK to use `LifecycleFlags.none` (or simply `0`)\n   * This default will work, but is generally less efficient.\n   */\n  endBind(flags: LifecycleFlags): ILifecycleTask;\n\n  /**\n   * Open up / expand an unbind batch for enqueueing `unbound` callbacks.\n   *\n   * When the top-most caller calls `endUnbind`, the `unbound` callbacks will be invoked.\n   *\n   * Each `beginUnbind` *must* be matched by an `endUnbind`.\n   */\n  beginUnbind(): void;\n\n  /**\n   * Add an `unbound` callback to the queue, to be invoked when the current unbind batch\n   * is ended via `endUnbind` by the top-most caller.\n   *\n   * This method is idempotent; adding the same item more than once has the same effect as\n   * adding it once.\n   */\n  enqueueUnbound(requestor: ILifecycleUnbound): void;\n\n  /**\n   * Close / shrink an unbind batch for invoking queued `unbound` callbacks.\n   * @param flags The flags that will be passed into the `unbound` callbacks.\n   *\n   * Flags during unbind are primarily for optimization purposes, and to control whether\n   * changes are batched or propagated synchronously.\n   * If unsure which flags to provide, it's OK to use `LifecycleFlags.none` (or simply `0`)\n   * This default will work, but is generally less efficient.\n   */\n  endUnbind(flags: LifecycleFlags): ILifecycleTask;\n}\n\nexport interface IAttachLifecycle extends IFlushLifecycle {\n  processAttachQueue(flags: LifecycleFlags): void;\n  processDetachQueue(flags: LifecycleFlags): void;\n\n  /**\n   * Open up / expand an attach batch for enqueueing `$mount` and `attached` callbacks.\n   *\n   * When the top-most caller calls `endAttach`, the `$mount` and `attached` callbacks\n   * will be invoked (in that order).\n   *\n   * Each `beginAttach` *must* be matched by an `endAttach`.\n   */\n  beginAttach(): void;\n\n  /**\n   * Add a `$mount` callback to the queue, to be invoked when the current attach batch\n   * is ended via `endAttach` by the top-most caller.\n   *\n   * This method is idempotent; adding the same item more than once has the same effect as\n   * adding it once.\n   */\n  enqueueMount(requestor: ILifecycleMount): void;\n\n  /**\n   * Add an `attached` callback to the queue, to be invoked when the current attach batch\n   * is ended via `endAttach` by the top-most caller.\n   *\n   * This method is idempotent; adding the same item more than once has the same effect as\n   * adding it once.\n   */\n  enqueueAttached(requestor: ILifecycleAttached): void;\n\n  /**\n   * Close / shrink an attach batch for invoking queued `$mount` and `attached` callbacks.\n   * @param flags The flags that will be passed into the `$mount` and `attached` callbacks.\n   *\n   * Flags during attach are primarily for optimization purposes.\n   * If unsure which flags to provide, it's OK to use `LifecycleFlags.none` (or simply `0`)\n   * This default will work, but is generally less efficient.\n   */\n  endAttach(flags: LifecycleFlags): ILifecycleTask;\n\n  /**\n   * Open up / expand a detach batch for enqueueing `$unmount` and `detached` callbacks.\n   *\n   * When the top-most caller calls `endAttach`, the `$unmount` and `detached` callbacks\n   * will be invoked (in that order).\n   *\n   * Each `beginAttach` *must* be matched by an `endAttach`.\n   */\n  beginDetach(): void;\n\n  /**\n   * Add a `$unmount` callback to the queue, to be invoked when the current detach batch\n   * is ended via `endAttach` by the top-most caller.\n   *\n   * This method is idempotent; adding the same item more than once has the same effect as\n   * adding it once.\n   */\n  enqueueUnmount(requestor: ILifecycleUnmount): void;\n\n  /**\n   * Add a `detached` callback to the queue, to be invoked when the current detach batch\n   * is ended via `endAttach` by the top-most caller.\n   *\n   * This method is idempotent; adding the same item more than once has the same effect as\n   * adding it once.\n   */\n  enqueueDetached(requestor: ILifecycleDetached): void;\n\n  /**\n   * Add an `$unbind` callback to the queue, to be invoked when the current detach batch\n   * is ended via `endAttach` by the top-most caller. The callback is invoked after all the\n   * `$unmount` and `detached` callbacks are processed.\n   *\n   * This method is idempotent; adding the same item more than once has the same effect as\n   * adding it once.\n   */\n  enqueueUnbindAfterDetach(requestor: ILifecycleUnbind): void;\n\n  /**\n   * Close / shrink a detach batch for invoking queued `$unmount` and `detached` callbacks.\n   * @param flags The flags that will be passed into the `$unmount` and `detached` callbacks.\n   *\n   * Flags during detach are primarily for optimization purposes, and to control whether a\n   * component should be unmounted or not (the default is to only unmount root nodes).\n   * If unsure which flags to provide, it's OK to use `LifecycleFlags.none` (or simply `0`).\n   * This default will work, but is generally less efficient.\n   */\n  endDetach(flags: LifecycleFlags): ILifecycleTask;\n}\n\nexport interface ILifecycle extends IBindLifecycle, IAttachLifecycle {\n  registerTask(task: ILifecycleTask): void;\n  finishTask(task: ILifecycleTask): void;\n}\n\nexport const ILifecycle = DI.createInterface<ILifecycle>('ILifecycle').withDefault(x => x.singleton(Lifecycle));\n\n/** @internal */\nexport class Lifecycle implements ILifecycle {\n  /** @internal */public bindDepth: number;\n  /** @internal */public attachDepth: number;\n  /** @internal */public detachDepth: number;\n  /** @internal */public unbindDepth: number;\n\n  /** @internal */public flushHead: IChangeTracker;\n  /** @internal */public flushTail: IChangeTracker;\n\n  /** @internal */public connectHead: IConnectableBinding;\n  /** @internal */public connectTail: IConnectableBinding;\n\n  /** @internal */public patchHead: IConnectableBinding;\n  /** @internal */public patchTail: IConnectableBinding;\n\n  /** @internal */public boundHead: ILifecycleBound;\n  /** @internal */public boundTail: ILifecycleBound;\n\n  /** @internal */public mountHead: ILifecycleMount;\n  /** @internal */public mountTail: ILifecycleMount;\n\n  /** @internal */public attachedHead: ILifecycleAttached;\n  /** @internal */public attachedTail: ILifecycleAttached;\n\n  /** @internal */public unmountHead: ILifecycleUnmount;\n  /** @internal */public unmountTail: ILifecycleUnmount;\n\n  /** @internal */public detachedHead: ILifecycleDetached;\n  /** @internal */public detachedTail: ILifecycleDetached;\n\n  /** @internal */public unbindAfterDetachHead: ILifecycleUnbindAfterDetach;\n  /** @internal */public unbindAfterDetachTail: ILifecycleUnbindAfterDetach;\n\n  /** @internal */public unboundHead: ILifecycleUnbound;\n  /** @internal */public unboundTail: ILifecycleUnbound;\n\n  /** @internal */public flushed: Promise<void>;\n  /** @internal */public promise: Promise<void>;\n\n  /** @internal */public flushCount: number;\n  /** @internal */public connectCount: number;\n  /** @internal */public patchCount: number;\n  /** @internal */public boundCount: number;\n  /** @internal */public mountCount: number;\n  /** @internal */public attachedCount: number;\n  /** @internal */public unmountCount: number;\n  /** @internal */public detachedCount: number;\n  /** @internal */public unbindAfterDetachCount: number;\n  /** @internal */public unboundCount: number;\n\n  // These are dummy properties to make the lifecycle conform to the interfaces\n  // of the components it manages. This allows the lifecycle itself to be the first link\n  // in the chain and removes the need for an additional null check on each addition.\n  /** @internal */public $nextFlush: IChangeTracker;\n  /** @internal */public flush: IChangeTracker['flush'];\n  /** @internal */public $nextConnect: IConnectableBinding;\n  /** @internal */public connect: IConnectableBinding['connect'];\n  /** @internal */public $nextPatch: IConnectableBinding;\n  /** @internal */public patch: IConnectableBinding['patch'];\n  /** @internal */public $nextBound: ILifecycleBound;\n  /** @internal */public bound: ILifecycleBound['bound'];\n  /** @internal */public $nextMount: ILifecycleMount;\n  /** @internal */public $mount: ILifecycleMount['$mount'];\n  /** @internal */public $nextAttached: ILifecycleAttached;\n  /** @internal */public attached: ILifecycleAttached['attached'];\n  /** @internal */public $nextUnmount: ILifecycleUnmount;\n  /** @internal */public $unmount: ILifecycleUnmount['$unmount'];\n  /** @internal */public $nextDetached: ILifecycleDetached;\n  /** @internal */public detached: ILifecycleDetached['detached'];\n  /** @internal */public $nextUnbindAfterDetach: ILifecycleUnbindAfterDetach;\n  /** @internal */public $unbind: ILifecycleUnbindAfterDetach['$unbind'];\n  /** @internal */public $nextUnbound: ILifecycleUnbound;\n  /** @internal */public unbound: ILifecycleUnbound['unbound'];\n\n  /** @internal */public task: AggregateLifecycleTask | null;\n\n  constructor() {\n    this.bindDepth = 0;\n    this.attachDepth = 0;\n    this.detachDepth = 0;\n    this.unbindDepth = 0;\n\n    this.flushHead = this;\n    this.flushTail = this;\n\n    this.connectHead = this as unknown as IConnectableBinding; // this cast is safe because we know exactly which properties we'll use\n    this.connectTail = this as unknown as IConnectableBinding;\n\n    this.patchHead = this as unknown as IConnectableBinding;\n    this.patchTail = this as unknown as IConnectableBinding;\n\n    this.boundHead = this;\n    this.boundTail = this;\n\n    this.mountHead = this;\n    this.mountTail = this;\n\n    this.attachedHead = this;\n    this.attachedTail = this;\n\n    this.unmountHead = this;\n    this.unmountTail = this;\n\n    this.detachedHead = this; //LOL\n    this.detachedTail = this;\n\n    this.unbindAfterDetachHead = this;\n    this.unbindAfterDetachTail = this;\n\n    this.unboundHead = this;\n    this.unboundTail = this;\n\n    this.flushed = null;\n    this.promise = Promise.resolve();\n\n    this.flushCount = 0;\n    this.connectCount = 0;\n    this.patchCount = 0;\n    this.boundCount = 0;\n    this.mountCount = 0;\n    this.attachedCount = 0;\n    this.unmountCount = 0;\n    this.detachedCount = 0;\n    this.unbindAfterDetachCount = 0;\n    this.unboundCount = 0;\n\n    this.$nextFlush = marker;\n    this.flush = PLATFORM.noop;\n    this.$nextConnect = marker;\n    this.connect = PLATFORM.noop;\n    this.$nextPatch = marker;\n    this.patch = PLATFORM.noop;\n    this.$nextBound = marker;\n    this.bound = PLATFORM.noop;\n    this.$nextMount = marker;\n    this.$mount = PLATFORM.noop;\n    this.$nextAttached = marker;\n    this.attached = PLATFORM.noop;\n    this.$nextUnmount = marker;\n    this.$unmount = PLATFORM.noop;\n    this.$nextDetached = marker;\n    this.detached = PLATFORM.noop;\n    this.$nextUnbindAfterDetach = marker;\n    this.$unbind = PLATFORM.noop;\n    this.$nextUnbound = marker;\n    this.unbound = PLATFORM.noop;\n\n    this.task = null;\n  }\n\n  public static register(container: IContainer): IResolver<ILifecycle> {\n    return Registration.singleton(ILifecycle, this).register(container);\n  }\n\n  public registerTask(task: ILifecycleTask): void {\n    if (this.task === null) {\n      this.task = new AggregateLifecycleTask();\n    }\n    this.task.addTask(task);\n  }\n\n  public finishTask(task: ILifecycleTask): void {\n    if (this.task !== null) {\n      if (this.task === task) {\n        this.task = null;\n      } else {\n        this.task.removeTask(task);\n      }\n    }\n  }\n\n  public enqueueFlush(requestor: IChangeTracker): Promise<void> {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.enqueueFlush', slice.call(arguments)); }\n    // Queue a flush() callback; the depth is just for debugging / testing purposes and has\n    // no effect on execution. flush() will automatically be invoked when the promise resolves,\n    // or it can be manually invoked synchronously.\n    if (this.flushHead === this) {\n      this.flushed = this.promise.then(() => { this.processFlushQueue(LifecycleFlags.fromAsyncFlush); });\n    }\n    if (requestor.$nextFlush === null) {\n      requestor.$nextFlush = marker;\n      this.flushTail.$nextFlush = requestor;\n      this.flushTail = requestor;\n      ++this.flushCount;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return this.flushed;\n  }\n\n  public processFlushQueue(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.processFlushQueue', slice.call(arguments)); }\n    flags |= LifecycleFlags.fromSyncFlush;\n    // flush callbacks may lead to additional flush operations, so keep looping until\n    // the flush head is back to `this` (though this will typically happen in the first iteration)\n    while (this.flushCount > 0) {\n      let current = this.flushHead.$nextFlush;\n      this.flushHead = this.flushTail = this;\n      this.flushCount = 0;\n      let next: typeof current;\n      do {\n        next = current.$nextFlush;\n        current.$nextFlush = null;\n        current.flush(flags);\n        current = next;\n      } while (current !== marker);\n      // doNotUpdateDOM will cause DOM updates to be re-queued which results in an infinite loop\n      // unless we break here\n      // Note that breaking on this flag is still not the ideal solution; future improvement would\n      // be something like a separate DOM queue and a non-DOM queue, but for now this fixes the infinite\n      // loop without breaking anything (apart from the edgiest of edge cases which are not yet tested)\n      if (flags & LifecycleFlags.doNotUpdateDOM) {\n        break;\n      }\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public beginBind(): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.beginBind', slice.call(arguments)); }\n    ++this.bindDepth;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public enqueueBound(requestor: ILifecycleBound): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.enqueueBound', slice.call(arguments)); }\n    // build a standard singly linked list for bound callbacks\n    if (requestor.$nextBound === null) {\n      requestor.$nextBound = marker;\n      this.boundTail.$nextBound = requestor;\n      this.boundTail = requestor;\n      ++this.boundCount;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public enqueueConnect(requestor: IConnectableBinding): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.enqueueConnect', slice.call(arguments)); }\n    // enqueue connect and patch calls in separate lists so that they can be invoked\n    // independently from eachother\n    // TODO: see if we can eliminate/optimize some of this, because this is a relatively hot path\n    // (first get all the necessary integration tests working, then look for optimizations)\n\n    // build a standard singly linked list for connect callbacks\n    if (requestor.$nextConnect === null) {\n      requestor.$nextConnect = marker;\n      this.connectTail.$nextConnect = requestor;\n      this.connectTail = requestor;\n      ++this.connectCount;\n    }\n    // build a standard singly linked list for patch callbacks\n    if (requestor.$nextPatch === null) {\n      requestor.$nextPatch = marker;\n      this.patchTail.$nextPatch = requestor;\n      this.patchTail = requestor;\n      ++this.patchCount;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public processConnectQueue(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.processConnectQueue', slice.call(arguments)); }\n    // connects cannot lead to additional connects, so we don't need to loop here\n    if (this.connectCount > 0) {\n      this.connectCount = 0;\n      let current = this.connectHead.$nextConnect;\n      this.connectHead = this.connectTail = this as unknown as IConnectableBinding;\n      let next: typeof current;\n      do {\n        current.connect(flags);\n        next = current.$nextConnect;\n        current.$nextConnect = null;\n        current = next;\n      } while (current !== marker);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public processPatchQueue(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.processPatchQueue', slice.call(arguments)); }\n    // flush before patching, but only if this is the initial bind;\n    // no DOM is attached yet so we can safely let everything propagate\n    if (flags & LifecycleFlags.fromStartTask) {\n      this.processFlushQueue(flags | LifecycleFlags.fromSyncFlush);\n    }\n    // patch callbacks may lead to additional bind operations, so keep looping until\n    // the patch head is back to `this` (though this will typically happen in the first iteration)\n    while (this.patchCount > 0) {\n      this.patchCount = 0;\n      let current = this.patchHead.$nextPatch;\n      this.patchHead = this.patchTail = this as unknown as IConnectableBinding;\n      let next: typeof current;\n      do {\n        current.patch(flags);\n        next = current.$nextPatch;\n        current.$nextPatch = null;\n        current = next;\n      } while (current !== marker);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public endBind(flags: LifecycleFlags): ILifecycleTask {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.endBind', slice.call(arguments)); }\n    // close / shrink a bind batch\n    if (--this.bindDepth === 0) {\n      if (this.task !== null && !this.task.done) {\n        this.task.owner = this;\n        if (Tracer.enabled) { Tracer.leave(); }\n        return this.task;\n      }\n\n      this.processBindQueue(flags);\n\n      if (Tracer.enabled) { Tracer.leave(); }\n      return LifecycleTask.done;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public processBindQueue(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.processBindQueue', slice.call(arguments)); }\n    // flush before processing bound callbacks, but only if this is the initial bind;\n    // no DOM is attached yet so we can safely let everything propagate\n    if (flags & LifecycleFlags.fromStartTask) {\n      this.processFlushQueue(flags | LifecycleFlags.fromSyncFlush);\n    }\n    // bound callbacks may lead to additional bind operations, so keep looping until\n    // the bound head is back to `this` (though this will typically happen in the first iteration)\n    while (this.boundCount > 0) {\n      this.boundCount = 0;\n      let current = this.boundHead.$nextBound;\n      let next: ILifecycleBound;\n      this.boundHead = this.boundTail = this;\n      do {\n        current.bound(flags);\n        next = current.$nextBound;\n        current.$nextBound = null;\n        current = next;\n      } while (current !== marker);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public beginUnbind(): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.beginUnbind', slice.call(arguments)); }\n    // open up / expand an unbind batch; the very first caller will close it again with endUnbind\n    ++this.unbindDepth;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public enqueueUnbound(requestor: ILifecycleUnbound): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.enqueueUnbound', slice.call(arguments)); }\n    // This method is idempotent; adding the same item more than once has the same effect as\n    // adding it once.\n    // build a standard singly linked list for unbound callbacks\n    if (requestor.$nextUnbound === null) {\n      requestor.$nextUnbound = marker;\n      this.unboundTail.$nextUnbound = requestor;\n      this.unboundTail = requestor;\n      ++this.unboundCount;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public endUnbind(flags: LifecycleFlags): ILifecycleTask {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.endUnbind', slice.call(arguments)); }\n    // close / shrink an unbind batch\n    if (--this.unbindDepth === 0) {\n      if (this.task !== null && !this.task.done) {\n        this.task.owner = this;\n        if (Tracer.enabled) { Tracer.leave(); }\n        return this.task;\n      }\n\n      this.processUnbindQueue(flags);\n\n      if (Tracer.enabled) { Tracer.leave(); }\n      return LifecycleTask.done;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public processUnbindQueue(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.processUnbindQueue', slice.call(arguments)); }\n    // unbound callbacks may lead to additional unbind operations, so keep looping until\n    // the unbound head is back to `this` (though this will typically happen in the first iteration)\n    while (this.unboundCount > 0) {\n      this.unboundCount = 0;\n      let current = this.unboundHead.$nextUnbound;\n      let next: ILifecycleUnbound;\n      this.unboundHead = this.unboundTail = this;\n      do {\n        current.unbound(flags);\n        next = current.$nextUnbound;\n        current.$nextUnbound = null;\n        current = next;\n      } while (current !== marker);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public beginAttach(): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.beginAttach', slice.call(arguments)); }\n    // open up / expand an attach batch; the very first caller will close it again with endAttach\n    ++this.attachDepth;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public enqueueMount(requestor: ILifecycleMount): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.enqueueMount', slice.call(arguments)); }\n    // This method is idempotent; adding the same item more than once has the same effect as\n    // adding it once.\n    // build a standard singly linked list for mount callbacks\n    if (requestor.$nextMount === null) {\n      requestor.$nextMount = marker;\n      this.mountTail.$nextMount = requestor;\n      this.mountTail = requestor;\n      ++this.mountCount;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public enqueueAttached(requestor: ILifecycleAttached): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.enqueueAttached', slice.call(arguments)); }\n    // This method is idempotent; adding the same item more than once has the same effect as\n    // adding it once.\n    // build a standard singly linked list for attached callbacks\n    if (requestor.$nextAttached === null) {\n      requestor.$nextAttached = marker;\n      this.attachedTail.$nextAttached = requestor;\n      this.attachedTail = requestor;\n      ++this.attachedCount;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public endAttach(flags: LifecycleFlags): ILifecycleTask {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.endAttach', slice.call(arguments)); }\n    // close / shrink an attach batch\n    if (--this.attachDepth === 0) {\n      if (this.task !== null && !this.task.done) {\n        this.task.owner = this;\n        if (Tracer.enabled) { Tracer.leave(); }\n        return this.task;\n      }\n\n      this.processAttachQueue(flags);\n\n      if (Tracer.enabled) { Tracer.leave(); }\n      return LifecycleTask.done;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public processAttachQueue(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.processAttachQueue', slice.call(arguments)); }\n    // flush and patch before starting the attach lifecycle to ensure batched collection changes are propagated to repeaters\n    // and the DOM is updated\n    this.processFlushQueue(flags | LifecycleFlags.fromSyncFlush);\n    // TODO: prevent duplicate updates coming from the patch queue (or perhaps it's just not needed in its entirety?)\n    //this.processPatchQueue(flags | LifecycleFlags.fromSyncFlush);\n\n    if (this.mountCount > 0) {\n      this.mountCount = 0;\n      let currentMount = this.mountHead.$nextMount;\n      this.mountHead = this.mountTail = this;\n      let nextMount: typeof currentMount;\n\n      do {\n        currentMount.$mount(flags);\n        nextMount = currentMount.$nextMount;\n        currentMount.$nextMount = null;\n        currentMount = nextMount;\n      } while (currentMount !== marker);\n    }\n    // Connect all connect-queued bindings AFTER mounting is done, so that the DOM is visible asap,\n    // but connect BEFORE running the attached callbacks to ensure any changes made during those callbacks\n    // are still accounted for.\n    // TODO: add a flag/option to further delay connect with a RAF callback (the tradeoff would be that we'd need\n    // to run an additional patch cycle before that connect, which can be expensive and unnecessary in most real\n    // world scenarios, but can significantly speed things up with nested, highly volatile data like in dbmonster)\n    this.processConnectQueue(LifecycleFlags.mustEvaluate);\n\n    if (this.attachedCount > 0) {\n      this.attachedCount = 0;\n      let currentAttached = this.attachedHead.$nextAttached;\n      this.attachedHead = this.attachedTail = this;\n      let nextAttached: typeof currentAttached;\n\n      do {\n        currentAttached.attached(flags);\n        nextAttached = currentAttached.$nextAttached;\n        currentAttached.$nextAttached = null;\n        currentAttached = nextAttached;\n      } while (currentAttached !== marker);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public beginDetach(): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.beginDetach', slice.call(arguments)); }\n    // open up / expand a detach batch; the very first caller will close it again with endDetach\n    ++this.detachDepth;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public enqueueUnmount(requestor: ILifecycleUnmount): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.enqueueUnmount', slice.call(arguments)); }\n    // This method is idempotent; adding the same item more than once has the same effect as\n    // adding it once.\n    // build a standard singly linked list for unmount callbacks\n    if (requestor.$nextUnmount === null) {\n      requestor.$nextUnmount = marker;\n      this.unmountTail.$nextUnmount = requestor;\n      this.unmountTail = requestor;\n      ++this.unmountCount;\n    }\n    // this is a temporary solution until a cleaner method surfaces.\n    // if an item being queued for unmounting is already in the mount queue,\n    // remove it from the mount queue (this can occur in some very exotic situations\n    // and should be dealt with in a less hacky way)\n    if ((requestor as ILifecycleMount & ILifecycleUnmount).$nextMount !== null) {\n      let current = this.mountHead as ILifecycleMount & ILifecycleUnmount;\n      let next = current.$nextMount as ILifecycleMount & ILifecycleUnmount;\n      while (next !== requestor) {\n        current = next;\n        next = current.$nextMount as ILifecycleMount & ILifecycleUnmount;\n      }\n      current.$nextMount = next.$nextMount;\n      next.$nextMount = null;\n      if (this.mountTail === next) {\n        this.mountTail = this;\n      }\n      --this.mountCount;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public enqueueDetached(requestor: ILifecycleDetached): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.enqueueDetached', slice.call(arguments)); }\n    // This method is idempotent; adding the same item more than once has the same effect as\n    // adding it once.\n    // build a standard singly linked list for detached callbacks\n    if (requestor.$nextDetached === null) {\n      requestor.$nextDetached = marker;\n      this.detachedTail.$nextDetached = requestor;\n      this.detachedTail = requestor;\n      ++this.detachedCount;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public enqueueUnbindAfterDetach(requestor: ILifecycleUnbindAfterDetach): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.enqueueUnbindAfterDetach', slice.call(arguments)); }\n    // This method is idempotent; adding the same item more than once has the same effect as\n    // adding it once.\n    // build a standard singly linked list for unbindAfterDetach callbacks\n    if (requestor.$nextUnbindAfterDetach === null) {\n      requestor.$nextUnbindAfterDetach = marker;\n      this.unbindAfterDetachTail.$nextUnbindAfterDetach = requestor;\n      this.unbindAfterDetachTail = requestor;\n      ++this.unbindAfterDetachCount;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public endDetach(flags: LifecycleFlags): ILifecycleTask {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.endDetach', slice.call(arguments)); }\n    // close / shrink a detach batch\n    if (--this.detachDepth === 0) {\n      if (this.task !== null && !this.task.done) {\n        this.task.owner = this;\n        return this.task;\n      }\n\n      this.processDetachQueue(flags);\n\n      if (Tracer.enabled) { Tracer.leave(); }\n      return LifecycleTask.done;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public processDetachQueue(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Lifecycle.processDetachQueue', slice.call(arguments)); }\n    // flush before unmounting to ensure batched collection changes propagate to the repeaters,\n    // which may lead to additional unmount operations\n    this.processFlushQueue(flags | LifecycleFlags.fromFlush | LifecycleFlags.doNotUpdateDOM);\n\n    if (this.unmountCount > 0) {\n      this.unmountCount = 0;\n      let currentUnmount = this.unmountHead.$nextUnmount;\n      this.unmountHead = this.unmountTail = this;\n      let nextUnmount: typeof currentUnmount;\n\n      do {\n        currentUnmount.$unmount(flags);\n        nextUnmount = currentUnmount.$nextUnmount;\n        currentUnmount.$nextUnmount = null;\n        currentUnmount = nextUnmount;\n      } while (currentUnmount !== marker);\n    }\n\n    if (this.detachedCount > 0) {\n      this.detachedCount = 0;\n      let currentDetached = this.detachedHead.$nextDetached;\n      this.detachedHead = this.detachedTail = this;\n      let nextDetached: typeof currentDetached;\n\n      do {\n        currentDetached.detached(flags);\n        nextDetached = currentDetached.$nextDetached;\n        currentDetached.$nextDetached = null;\n        currentDetached = nextDetached;\n      } while (currentDetached !== marker);\n    }\n\n    if (this.unbindAfterDetachCount > 0) {\n      this.beginUnbind();\n      this.unbindAfterDetachCount = 0;\n      let currentUnbind = this.unbindAfterDetachHead.$nextUnbindAfterDetach;\n      this.unbindAfterDetachHead = this.unbindAfterDetachTail = this;\n      let nextUnbind: typeof currentUnbind;\n\n      do {\n        currentUnbind.$unbind(flags);\n        nextUnbind = currentUnbind.$nextUnbindAfterDetach;\n        currentUnbind.$nextUnbindAfterDetach = null;\n        currentUnbind = nextUnbind;\n      } while (currentUnbind !== marker);\n      this.endUnbind(flags);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\nexport class CompositionCoordinator {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [ILifecycle];\n\n  public readonly $lifecycle: ILifecycle;\n\n  public onSwapComplete: () => void;\n\n  private currentView: IView;\n  private isAttached: boolean;\n  private isBound: boolean;\n  private queue: (IView | PromiseSwap)[] | null;\n  private scope: IScope;\n  private swapTask: ILifecycleTask;\n\n  constructor($lifecycle: ILifecycle) {\n    this.$lifecycle = $lifecycle;\n\n    this.onSwapComplete = PLATFORM.noop;\n\n    this.currentView = null;\n    this.isAttached = false;\n    this.isBound = false;\n    this.queue = null;\n    this.swapTask = LifecycleTask.done;\n  }\n\n  public static register(container: IContainer): IResolver<CompositionCoordinator> {\n    return Registration.transient(this, this).register(container, this);\n  }\n\n  public compose(value: IView | Promise<IView>, flags: LifecycleFlags): void {\n    if (this.swapTask.done) {\n      if (value instanceof Promise) {\n        this.enqueue(new PromiseSwap(this, value));\n        this.processNext();\n      } else {\n        this.swap(value, flags);\n      }\n    } else {\n      if (value instanceof Promise) {\n        this.enqueue(new PromiseSwap(this, value));\n      } else {\n        this.enqueue(value);\n      }\n\n      if (this.swapTask.canCancel()) {\n        this.swapTask.cancel();\n      }\n    }\n  }\n\n  public binding(flags: LifecycleFlags, scope: IScope): void {\n    this.scope = scope;\n    this.isBound = true;\n\n    if (this.currentView !== null) {\n      this.currentView.$bind(flags, scope);\n    }\n  }\n\n  public attaching(flags: LifecycleFlags): void {\n    this.isAttached = true;\n\n    if (this.currentView !== null) {\n      this.currentView.$attach(flags);\n    }\n  }\n\n  public detaching(flags: LifecycleFlags): void {\n    this.isAttached = false;\n\n    if (this.currentView !== null) {\n      this.currentView.$detach(flags);\n    }\n  }\n\n  public unbinding(flags: LifecycleFlags): void {\n    this.isBound = false;\n\n    if (this.currentView !== null) {\n      this.currentView.$unbind(flags);\n    }\n  }\n\n  public caching(flags: LifecycleFlags): void {\n    this.currentView = null;\n  }\n\n  private enqueue(view: IView | PromiseSwap): void {\n    if (this.queue === null) {\n      this.queue = [];\n    }\n\n    this.queue.push(view);\n  }\n\n  private swap(view: IView, flags: LifecycleFlags): void {\n    if (this.currentView === view) {\n      return;\n    }\n\n    const $lifecycle = this.$lifecycle;\n    const swapTask = new AggregateLifecycleTask();\n\n    let lifecycleTask: ILifecycleTask;\n    let currentView = this.currentView;\n    if (currentView === null) {\n      lifecycleTask = LifecycleTask.done;\n    } else {\n      $lifecycle.enqueueUnbindAfterDetach(currentView);\n      $lifecycle.beginDetach();\n      currentView.$detach(flags);\n      lifecycleTask = $lifecycle.endDetach(flags);\n    }\n    swapTask.addTask(lifecycleTask);\n\n    currentView = this.currentView = view;\n\n    if (currentView === null) {\n      lifecycleTask = LifecycleTask.done;\n    } else {\n      if (this.isBound) {\n        $lifecycle.beginBind();\n        currentView.$bind(flags, this.scope);\n        $lifecycle.endBind(flags);\n      }\n      if (this.isAttached) {\n        $lifecycle.beginAttach();\n        currentView.$attach(flags);\n        lifecycleTask = $lifecycle.endAttach(flags);\n      } else {\n        lifecycleTask = LifecycleTask.done;\n      }\n    }\n    swapTask.addTask(lifecycleTask);\n\n    if (swapTask.done) {\n      this.swapTask = LifecycleTask.done;\n      this.onSwapComplete();\n    } else {\n      this.swapTask = swapTask;\n      this.swapTask.wait().then(() => {\n        this.onSwapComplete();\n        this.processNext();\n      }).catch(error => { throw error; });\n    }\n  }\n\n  private processNext(): void {\n    if (this.queue !== null && this.queue.length > 0) {\n      const next = this.queue.pop();\n      this.queue.length = 0;\n\n      if (PromiseSwap.is(next)) {\n        this.swapTask = next.start();\n      } else {\n        this.swap(next, LifecycleFlags.fromLifecycleTask);\n      }\n    } else {\n      this.swapTask = LifecycleTask.done;\n    }\n  }\n}\n\nexport const LifecycleTask = {\n  done: {\n    done: true,\n    canCancel(): boolean { return false; },\n    cancel(): void { return; },\n    wait(): Promise<unknown> { return Promise.resolve(); }\n  }\n};\n\nexport interface ILifecycleTask<T = unknown> {\n  readonly done: boolean;\n  canCancel(): boolean;\n  cancel(): void;\n  wait(): Promise<T>;\n}\n\nexport class AggregateLifecycleTask implements ILifecycleTask<void> {\n  public done: boolean;\n\n  /** @internal */\n  public owner: Lifecycle;\n\n  private readonly tasks: ILifecycleTask[];\n  private resolve: () => void;\n  private waiter: Promise<void>;\n\n  constructor() {\n    this.done = true;\n\n    this.owner = null;\n\n    this.resolve = null;\n    this.tasks = [];\n    this.waiter = null;\n  }\n\n  public addTask(task: ILifecycleTask): void {\n    if (!task.done) {\n      this.done = false;\n      this.tasks.push(task);\n      task.wait().then(() => { this.tryComplete(); }).catch(error => { throw error; });\n    }\n  }\n\n  public removeTask(task: ILifecycleTask): void {\n    if (task.done) {\n      const idx = this.tasks.indexOf(task);\n      if (idx !== -1) {\n        this.tasks.splice(idx, 1);\n      }\n    }\n    if (this.tasks.length === 0 && this.owner !== null) {\n      this.owner.finishTask(this);\n      this.owner = null;\n    }\n  }\n\n  public canCancel(): boolean {\n    if (this.done) {\n      return false;\n    }\n\n    return this.tasks.every(x => x.canCancel());\n  }\n\n  public cancel(): void {\n    if (this.canCancel()) {\n      this.tasks.forEach(x => { x.cancel(); });\n      this.done = false;\n    }\n  }\n\n  public wait(): Promise<void> {\n    if (this.waiter === null) {\n      if (this.done) {\n        this.waiter = Promise.resolve();\n      } else {\n        // tslint:disable-next-line:promise-must-complete\n        this.waiter = new Promise((resolve) => this.resolve = resolve);\n      }\n    }\n\n    return this.waiter;\n  }\n\n  private tryComplete(): void {\n    if (this.done) {\n      return;\n    }\n\n    if (this.tasks.every(x => x.done)) {\n      this.complete(true);\n    }\n  }\n\n  private complete(notCancelled: boolean): void {\n    this.done = true;\n\n    if (notCancelled && this.owner !== null) {\n      this.owner.processDetachQueue(LifecycleFlags.fromLifecycleTask);\n      this.owner.processUnbindQueue(LifecycleFlags.fromLifecycleTask);\n      this.owner.processBindQueue(LifecycleFlags.fromLifecycleTask);\n      this.owner.processAttachQueue(LifecycleFlags.fromLifecycleTask);\n    }\n    this.owner.finishTask(this);\n\n    if (this.resolve !== null) {\n      this.resolve();\n    }\n  }\n}\n\n/** @internal */\nexport class PromiseSwap implements ILifecycleTask<IView> {\n  public done: boolean;\n\n  private readonly coordinator: CompositionCoordinator;\n  private isCancelled: boolean;\n  private promise: Promise<IView>;\n\n  constructor(coordinator: CompositionCoordinator, promise: Promise<IView>) {\n    this.coordinator = coordinator;\n    this.done = false;\n    this.isCancelled = false;\n    this.promise = promise;\n  }\n\n  public static is(object: object): object is PromiseSwap {\n    return 'start' in object;\n  }\n\n  public start(): ILifecycleTask<IView | unknown> {\n    if (this.isCancelled) {\n      return LifecycleTask.done;\n    }\n\n    this.promise = this.promise.then(x => {\n      this.onResolve(x);\n      return x;\n    });\n\n    return this;\n  }\n\n  public canCancel(): boolean {\n    return !this.done;\n  }\n\n  public cancel(): void {\n    if (this.canCancel()) {\n      this.isCancelled = true;\n    }\n  }\n\n  public wait(): Promise<IView> {\n    return this.promise;\n  }\n\n  private onResolve(value: IView): void {\n    if (this.isCancelled) {\n      return;\n    }\n\n    this.done = true;\n    this.coordinator.compose(value, LifecycleFlags.fromLifecycleTask);\n  }\n}\n\n// tslint:disable:jsdoc-format\n/**\n * A general-purpose ILifecycleTask implementation that can be placed\n * before an attached, detached, bound or unbound hook during attaching,\n * detaching, binding or unbinding, respectively.\n *\n * The provided promise will be awaited before the corresponding lifecycle\n * hook (and any hooks following it) is invoked.\n *\n * The provided callback will be invoked after the promise is resolved\n * and before the next lifecycle hook.\n *\n * Example:\n```ts\nexport class MyViewModel {\n  private $lifecycle: ILifecycle; // set before created() hook\n  private answer: number;\n\n  public binding(flags: LifecycleFlags): void {\n    // this.answer === undefined\n    this.$lifecycle.registerTask(new PromiseTask(\n      this.getAnswerAsync,\n      answer => {\n        this.answer = answer;\n      }\n    ));\n  }\n\n  public bound(flags: LifecycleFlags): void {\n    // this.answer === 42\n  }\n\n  private getAnswerAsync(): Promise<number> {\n    return Promise.resolve().then(() => 42);\n  }\n}\n```\n */\n// tslint:enable:jsdoc-format\nexport class PromiseTask<T = void> implements ILifecycleTask<T> {\n  public done: boolean;\n\n  private isCancelled: boolean;\n  private readonly promise: Promise<T>;\n  private readonly callback: (result?: T) => void;\n\n  constructor(promise: Promise<T>, callback: (result?: T) => void) {\n    this.done = false;\n    this.isCancelled = false;\n    this.callback = callback;\n    this.promise = promise.then(value => {\n      if (this.isCancelled === true) {\n        return;\n      }\n      this.done = true;\n      this.callback(value);\n      return value;\n    });\n  }\n\n  public canCancel(): boolean {\n    return !this.done;\n  }\n\n  public cancel(): void {\n    if (this.canCancel()) {\n      this.isCancelled = true;\n    }\n  }\n\n  public wait(): Promise<T> {\n    return this.promise;\n  }\n}\n","import { Class, IIndexable, Tracer } from '@aurelia/kernel';\nimport { IBindingTargetObserver, IPropertySubscriber, LifecycleFlags } from '../observation';\nimport { IObserverLocator } from '../observation/observer-locator';\nimport { IBinding } from './binding';\n\n// TODO: add connect-queue (or something similar) back in when everything else is working, to improve startup time\n\nconst slice = Array.prototype.slice;\n\nconst slotNames: string[] = [];\nconst versionSlotNames: string[] = [];\nlet lastSlot = -1;\nfunction ensureEnoughSlotNames(currentSlot: number): void {\n  if (currentSlot === lastSlot) {\n    lastSlot += 5;\n    const ii = slotNames.length = versionSlotNames.length = lastSlot + 1;\n    for (let i = currentSlot + 1; i < ii; ++i) {\n      slotNames[i] = `_observer${i}`;\n      versionSlotNames[i] = `_observerVersion${i}`;\n    }\n  }\n}\nensureEnoughSlotNames(-1);\n\nexport interface IPartialConnectableBinding extends IBinding, IPropertySubscriber {\n  observerLocator: IObserverLocator;\n}\n\nexport interface IConnectableBinding extends IPartialConnectableBinding {\n  $nextConnect?: IConnectableBinding;\n  $nextPatch?: IConnectableBinding;\n  observerSlots: number;\n  version: number;\n  observeProperty(obj: IIndexable, propertyName: string): void;\n  addObserver(observer: IBindingTargetObserver): void;\n  unobserve(all?: boolean): void;\n  connect(flags: LifecycleFlags): void;\n  patch(flags: LifecycleFlags): void;\n}\n\n/** @internal */\nexport function addObserver(this: IConnectableBinding, observer: IBindingTargetObserver): void {\n  // find the observer.\n  const observerSlots = this.observerSlots === undefined ? 0 : this.observerSlots;\n  let i = observerSlots;\n\n  while (i-- && this[slotNames[i]] !== observer);\n\n  // if we are not already observing, put the observer in an open slot and subscribe.\n  if (i === -1) {\n    i = 0;\n    while (this[slotNames[i]]) {\n      i++;\n    }\n    this[slotNames[i]] = observer;\n    observer.subscribe(this);\n    // increment the slot count.\n    if (i === observerSlots) {\n      this.observerSlots = i + 1;\n    }\n  }\n  // set the \"version\" when the observer was used.\n  if (this.version === undefined) {\n    this.version = 0;\n  }\n  this[versionSlotNames[i]] = this.version;\n  ensureEnoughSlotNames(i);\n}\n\n/** @internal */\nexport function observeProperty(this: IConnectableBinding, obj: IIndexable, propertyName: string): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.observeProperty`, slice.call(arguments)); }\n  const observer = this.observerLocator.getObserver(obj, propertyName) as IBindingTargetObserver;\n  /* Note: we need to cast here because we can indeed get an accessor instead of an observer,\n   *  in which case the call to observer.subscribe will throw. It's not very clean and we can solve this in 2 ways:\n   *  1. Fail earlier: only let the locator resolve observers from .getObserver, and throw if no branches are left (e.g. it would otherwise return an accessor)\n   *  2. Fail silently (without throwing): give all accessors a no-op subscribe method\n   *\n   * We'll probably want to implement some global configuration (like a \"strict\" toggle) so users can pick between enforced correctness vs. ease-of-use\n   */\n  this.addObserver(observer);\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function unobserve(this: IConnectableBinding, all?: boolean): void {\n  const slots = this.observerSlots;\n  let slotName: string;\n  let observer: IBindingTargetObserver;\n  if (all === true) {\n    for (let i = 0; i < slots; ++i) {\n      slotName = slotNames[i];\n      observer = this[slotName];\n      if (observer !== null && observer !== undefined) {\n        this[slotName] = null;\n        observer.unsubscribe(this);\n      }\n    }\n  } else {\n    const version = this.version;\n    for (let i = 0; i < slots; ++i) {\n      if (this[versionSlotNames[i]] !== version) {\n        slotName = slotNames[i];\n        observer = this[slotName];\n        if (observer !== null && observer !== undefined) {\n          this[slotName] = null;\n          observer.unsubscribe(this);\n        }\n      }\n    }\n  }\n}\n\ntype DecoratableConnectable<TProto, TClass> = Class<TProto & Partial<IConnectableBinding> & IPartialConnectableBinding, TClass>;\ntype DecoratedConnectable<TProto, TClass> = Class<TProto & IConnectableBinding, TClass>;\n\nfunction connectableDecorator<TProto, TClass>(target: DecoratableConnectable<TProto, TClass>): DecoratedConnectable<TProto, TClass> {\n  const proto = target.prototype;\n  if (!proto.hasOwnProperty('observeProperty')) proto.observeProperty = observeProperty;\n  if (!proto.hasOwnProperty('unobserve')) proto.unobserve = unobserve;\n  if (!proto.hasOwnProperty('addObserver')) proto.addObserver = addObserver;\n  return target as DecoratedConnectable<TProto, TClass>;\n}\n\nexport function connectable(): typeof connectableDecorator;\nexport function connectable<TProto, TClass>(target: DecoratableConnectable<TProto, TClass>): DecoratedConnectable<TProto, TClass>;\nexport function connectable<TProto, TClass>(target?: DecoratableConnectable<TProto, TClass>): DecoratedConnectable<TProto, TClass> | typeof connectableDecorator {\n  return target === undefined ? connectableDecorator : connectableDecorator(target);\n}\n","import { IServiceLocator, Reporter, Tracer } from '@aurelia/kernel';\nimport { IBindScope, ILifecycle, State } from '../lifecycle';\nimport { AccessorOrObserver, IBindingTargetObserver, IObservable, IScope, LifecycleFlags } from '../observation';\nimport { IObserverLocator } from '../observation/observer-locator';\nimport { ExpressionKind, ForOfStatement, hasBind, hasUnbind, IsBindingBehavior } from './ast';\nimport { BindingMode } from './binding-mode';\nimport { connectable, IConnectableBinding, IPartialConnectableBinding } from './connectable';\n\nconst slice = Array.prototype.slice;\n\nexport interface IBinding extends IBindScope {\n  readonly locator: IServiceLocator;\n  readonly $scope: IScope;\n}\n\n// BindingMode is not a const enum (and therefore not inlined), so assigning them to a variable to save a member accessor is a minor perf tweak\nconst { oneTime, toView, fromView } = BindingMode;\n\n// pre-combining flags for bitwise checks is a minor perf tweak\nconst toViewOrOneTime = toView | oneTime;\n\nexport interface Binding extends IConnectableBinding {}\n\n@connectable()\nexport class Binding implements IPartialConnectableBinding {\n  public $nextBind: IBindScope;\n  public $prevBind: IBindScope;\n  public $state: State;\n  public $lifecycle: ILifecycle;\n  public $nextConnect: IConnectableBinding;\n  public $nextPatch: IConnectableBinding;\n  public $scope: IScope;\n\n  public locator: IServiceLocator;\n  public mode: BindingMode;\n  public observerLocator: IObserverLocator;\n  public sourceExpression: IsBindingBehavior | ForOfStatement;\n  public target: IObservable;\n  public targetProperty: string;\n\n  public targetObserver: AccessorOrObserver;\n\n  public persistentFlags: LifecycleFlags;\n\n  constructor(sourceExpression: IsBindingBehavior | ForOfStatement, target: IObservable, targetProperty: string, mode: BindingMode, observerLocator: IObserverLocator, locator: IServiceLocator) {\n    this.$nextBind = null;\n    this.$prevBind = null;\n    this.$state = State.none;\n    this.$lifecycle = locator.get(ILifecycle);\n    this.$nextConnect = null;\n    this.$nextPatch = null;\n    this.$scope = null;\n\n    this.locator = locator;\n    this.mode = mode;\n    this.observerLocator = observerLocator;\n    this.sourceExpression = sourceExpression;\n    this.target = target;\n    this.targetProperty = targetProperty;\n  }\n\n  public updateTarget(value: unknown, flags: LifecycleFlags): void {\n    flags |= this.persistentFlags;\n    this.targetObserver.setValue(value, flags | LifecycleFlags.updateTargetInstance);\n  }\n\n  public updateSource(value: unknown, flags: LifecycleFlags): void {\n    flags |= this.persistentFlags;\n    this.sourceExpression.assign(flags | LifecycleFlags.updateSourceExpression, this.$scope, this.locator, value);\n  }\n\n  public handleChange(newValue: unknown, _previousValue: unknown, flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Binding.handleChange', slice.call(arguments)); }\n    if (!(this.$state & State.isBound)) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n\n    const sourceExpression = this.sourceExpression;\n    const $scope = this.$scope;\n    const locator = this.locator;\n    flags |= this.persistentFlags;\n\n    if (this.mode === BindingMode.fromView) {\n      flags &= ~LifecycleFlags.updateTargetInstance;\n      flags |= LifecycleFlags.updateSourceExpression;\n    }\n\n    if (flags & LifecycleFlags.updateTargetInstance) {\n      const targetObserver = this.targetObserver;\n      const mode = this.mode;\n\n      const previousValue = targetObserver.getValue();\n      // if the only observable is an AccessScope then we can assume the passed-in newValue is the correct and latest value\n      if (sourceExpression.$kind !== ExpressionKind.AccessScope || this.observerSlots > 1) {\n        newValue = sourceExpression.evaluate(flags, $scope, locator);\n      }\n      if (newValue !== previousValue) {\n        this.updateTarget(newValue, flags);\n      }\n      if ((mode & oneTime) === 0) {\n        this.version++;\n        sourceExpression.connect(flags, $scope, this);\n        this.unobserve(false);\n      }\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n\n    if (flags & LifecycleFlags.updateSourceExpression) {\n      if (newValue !== sourceExpression.evaluate(flags, $scope, locator)) {\n        this.updateSource(newValue, flags);\n      }\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n\n    throw Reporter.error(15, LifecycleFlags[flags]);\n  }\n\n  public $bind(flags: LifecycleFlags, scope: IScope): void {\n    if (Tracer.enabled) { Tracer.enter('Binding.$bind', slice.call(arguments)); }\n    if (this.$state & State.isBound) {\n      if (this.$scope === scope) {\n        if (Tracer.enabled) { Tracer.leave(); }\n        return;\n      }\n      this.$unbind(flags | LifecycleFlags.fromBind);\n    }\n    // add isBinding flag\n    this.$state |= State.isBinding;\n\n    // Store flags which we can only receive during $bind and need to pass on\n    // to the AST during evaluate/connect/assign\n    this.persistentFlags = flags & LifecycleFlags.persistentBindingFlags;\n\n    this.$scope = scope;\n\n    let sourceExpression = this.sourceExpression;\n    if (hasBind(sourceExpression)) {\n      sourceExpression.bind(flags, scope, this);\n    }\n\n    const mode = this.mode;\n    let targetObserver = this.targetObserver as IBindingTargetObserver;\n    if (!targetObserver) {\n      if (mode & fromView) {\n        targetObserver = this.targetObserver = this.observerLocator.getObserver(this.target, this.targetProperty) as IBindingTargetObserver;\n      } else {\n        targetObserver = this.targetObserver = this.observerLocator.getAccessor(this.target, this.targetProperty) as IBindingTargetObserver;\n      }\n    }\n    if (targetObserver.bind) {\n      targetObserver.bind(flags);\n    }\n\n    // during bind, binding behavior might have changed sourceExpression\n    sourceExpression = this.sourceExpression;\n    if (mode & toViewOrOneTime) {\n      this.updateTarget(sourceExpression.evaluate(flags, scope, this.locator), flags);\n    }\n    if (mode & toView) {\n      this.$lifecycle.enqueueConnect(this);\n    }\n    if (mode & fromView) {\n      targetObserver.subscribe(this);\n    }\n\n    // add isBound flag and remove isBinding flag\n    this.$state |= State.isBound;\n    this.$state &= ~State.isBinding;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public $unbind(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Binding.$unbind', slice.call(arguments)); }\n    if (!(this.$state & State.isBound)) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n    // add isUnbinding flag\n    this.$state |= State.isUnbinding;\n\n    // clear persistent flags\n    this.persistentFlags = LifecycleFlags.none;\n\n    const sourceExpression = this.sourceExpression;\n    if (hasUnbind(sourceExpression)) {\n      sourceExpression.unbind(flags, this.$scope, this);\n    }\n    this.$scope = null;\n\n    const targetObserver = this.targetObserver as IBindingTargetObserver;\n    if (targetObserver.unbind) {\n      targetObserver.unbind(flags);\n    }\n    if (targetObserver.unsubscribe) {\n      targetObserver.unsubscribe(this);\n    }\n    this.unobserve(true);\n\n    // remove isBound and isUnbinding flags\n    this.$state &= ~(State.isBound | State.isUnbinding);\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public connect(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Binding.connect', slice.call(arguments)); }\n    if (this.$state & State.isBound) {\n      flags |= this.persistentFlags;\n      this.sourceExpression.connect(flags | LifecycleFlags.mustEvaluate, this.$scope, this);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public patch(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Binding.patch', slice.call(arguments)); }\n    if (this.$state & State.isBound) {\n      flags |= this.persistentFlags;\n      this.updateTarget(this.sourceExpression.evaluate(flags | LifecycleFlags.mustEvaluate, this.$scope, this.locator), flags);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n","import { IServiceLocator, Tracer } from '@aurelia/kernel';\nimport { IBindScope, State } from '../lifecycle';\nimport { IAccessor, IBindingContext, IObservable, IScope, LifecycleFlags } from '../observation';\nimport { IObserverLocator } from '../observation/observer-locator';\nimport { hasBind, hasUnbind, IsBindingBehavior } from './ast';\nimport { IConnectableBinding } from './connectable';\n\nconst slice = Array.prototype.slice;\n\nexport interface Call extends IConnectableBinding {}\nexport class Call {\n  public $nextBind: IBindScope;\n  public $prevBind: IBindScope;\n  public $state: State;\n  public $scope: IScope;\n\n  public locator: IServiceLocator;\n  public sourceExpression: IsBindingBehavior;\n  public targetObserver: IAccessor;\n\n  constructor(sourceExpression: IsBindingBehavior, target: IObservable | IBindingContext, targetProperty: string, observerLocator: IObserverLocator, locator: IServiceLocator) {\n    this.$nextBind = null;\n    this.$prevBind = null;\n    this.$state = State.none;\n\n    this.locator = locator;\n    this.sourceExpression = sourceExpression;\n    this.targetObserver = observerLocator.getObserver(target, targetProperty);\n  }\n\n  public callSource(args: object): unknown {\n    if (Tracer.enabled) { Tracer.enter('Call.callSource', slice.call(arguments)); }\n    const overrideContext = this.$scope.overrideContext;\n    Object.assign(overrideContext, args);\n    const result = this.sourceExpression.evaluate(LifecycleFlags.mustEvaluate, this.$scope, this.locator);\n\n    for (const prop in args) {\n      // tslint:disable-next-line:no-dynamic-delete\n      delete overrideContext[prop];\n    }\n\n    if (Tracer.enabled) { Tracer.leave(); }\n    return result;\n  }\n\n  public $bind(flags: LifecycleFlags, scope: IScope): void {\n    if (Tracer.enabled) { Tracer.enter('Call.$bind', slice.call(arguments)); }\n    if (this.$state & State.isBound) {\n      if (this.$scope === scope) {\n        if (Tracer.enabled) { Tracer.leave(); }\n        return;\n      }\n\n      this.$unbind(flags | LifecycleFlags.fromBind);\n    }\n    // add isBinding flag\n    this.$state |= State.isBinding;\n\n    this.$scope = scope;\n\n    const sourceExpression = this.sourceExpression;\n    if (hasBind(sourceExpression)) {\n      sourceExpression.bind(flags, scope, this);\n    }\n\n    this.targetObserver.setValue($args => this.callSource($args), flags);\n\n    // add isBound flag and remove isBinding flag\n    this.$state |= State.isBound;\n    this.$state &= ~State.isBinding;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public $unbind(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Call.$unbind', slice.call(arguments)); }\n    if (!(this.$state & State.isBound)) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n    // add isUnbinding flag\n    this.$state |= State.isUnbinding;\n\n    const sourceExpression = this.sourceExpression;\n    if (hasUnbind(sourceExpression)) {\n      sourceExpression.unbind(flags, this.$scope, this);\n    }\n\n    this.$scope = null;\n    this.targetObserver.setValue(null, flags);\n\n    // remove isBound and isUnbinding flags\n    this.$state &= ~(State.isBound | State.isUnbinding);\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public observeProperty(obj: object, propertyName: string): void {\n    return;\n  }\n\n  public handleChange(newValue: unknown, previousValue: unknown, flags: LifecycleFlags): void {\n    return;\n  }\n}\n","import { DI, PLATFORM, Reporter } from '@aurelia/kernel';\nimport {\n  AccessMember,\n  AccessScope,\n  CallMember,\n  CallScope,\n  ExpressionKind,\n  ForOfStatement,\n  Interpolation,\n  IsBindingBehavior,\n  PrimitiveLiteral\n} from './ast';\n\ntype BindingExpression = Interpolation | ForOfStatement | IsBindingBehavior;\n\nexport interface IExpressionParser {\n  cache(expressions: Record<string, BindingExpression>): void;\n  parse(expression: string, bindingType: BindingType.ForCommand): ForOfStatement;\n  parse(expression: string, bindingType: BindingType.Interpolation): Interpolation;\n  parse(expression: string, bindingType: Exclude<BindingType, BindingType.ForCommand | BindingType.Interpolation>): IsBindingBehavior;\n  parse(expression: string, bindingType: BindingType): BindingExpression;\n}\n\nexport const IExpressionParser = DI.createInterface<IExpressionParser>('IExpressionParser').withDefault(x => x.singleton(ExpressionParser));\n\n/** @internal */\nexport class ExpressionParser implements IExpressionParser {\n  private readonly expressionLookup: Record<string, IsBindingBehavior>;\n  private readonly forOfLookup: Record<string, ForOfStatement>;\n  private readonly interpolationLookup: Record<string, Interpolation>;\n\n  constructor() {\n    this.expressionLookup = Object.create(null);\n    this.forOfLookup = Object.create(null);\n    this.interpolationLookup = Object.create(null);\n  }\n\n  public parse(expression: string, bindingType: BindingType.ForCommand): ForOfStatement;\n  public parse(expression: string, bindingType: BindingType.Interpolation): Interpolation;\n  public parse(expression: string, bindingType: Exclude<BindingType, BindingType.ForCommand | BindingType.Interpolation>): IsBindingBehavior;\n  public parse(expression: string, bindingType: BindingType): BindingExpression {\n    switch (bindingType) {\n      case BindingType.Interpolation: {\n        let found = this.interpolationLookup[expression];\n        if (found === undefined) {\n          found = this.interpolationLookup[expression] = this.parseCore(expression, bindingType);\n        }\n        return found;\n      }\n      case BindingType.ForCommand: {\n        let found = this.forOfLookup[expression];\n        if (found === undefined) {\n          found = this.forOfLookup[expression] = this.parseCore(expression, bindingType);\n        }\n        return found;\n      }\n      default: {\n        // Allow empty strings for normal bindings and those that are empty by default (such as a custom attribute without an equals sign)\n        // But don't cache it, because empty strings are always invalid for any other type of binding\n        if (expression.length === 0 && (bindingType & (BindingType.BindCommand | BindingType.OneTimeCommand | BindingType.ToViewCommand))) {\n          return PrimitiveLiteral.$empty;\n        }\n        let found = this.expressionLookup[expression];\n        if (found === undefined) {\n          found = this.expressionLookup[expression] = this.parseCore(expression, bindingType);\n        }\n        return found;\n      }\n    }\n  }\n\n  public cache(expressions: Record<string, BindingExpression>): void {\n    const { forOfLookup, expressionLookup, interpolationLookup } = this;\n    for (const expression in expressions) {\n      const expr = expressions[expression];\n      switch (expr.$kind) {\n        case ExpressionKind.Interpolation:\n          interpolationLookup[expression] = expr;\n          break;\n        case ExpressionKind.ForOfStatement:\n          forOfLookup[expression] = expr;\n          break;\n        default:\n          expressionLookup[expression] = expr;\n      }\n    }\n  }\n\n  private parseCore(expression: string, bindingType: BindingType.ForCommand): ForOfStatement;\n  private parseCore(expression: string, bindingType: BindingType.Interpolation): Interpolation;\n  private parseCore(expression: string, bindingType: Exclude<BindingType, BindingType.ForCommand | BindingType.Interpolation>): IsBindingBehavior;\n  private parseCore(expression: string, bindingType: BindingType): BindingExpression {\n    try {\n      const parts = expression.split('.');\n      const firstPart = parts[0];\n      let current: BindingExpression;\n\n      if (firstPart.endsWith('()')) {\n        current = new CallScope(firstPart.replace('()', ''), PLATFORM.emptyArray);\n      } else {\n        current = new AccessScope(parts[0]);\n      }\n\n      let index = 1;\n\n      while (index < parts.length) {\n        const currentPart = parts[index];\n\n        if (currentPart.endsWith('()')) {\n          current = new CallMember(current, currentPart.replace('()', ''), PLATFORM.emptyArray);\n        } else {\n          current = new AccessMember(current, parts[index]);\n        }\n\n        index++;\n      }\n\n      return current;\n    } catch (e) {\n      throw Reporter.error(3, e);\n    }\n  }\n}\n\nexport const enum BindingType {\n              None = 0,\n     Interpolation = 0b10000000_0000,\n        IsRef      = 0b01010000_0000,\n        IsIterator = 0b00100000_0000,\n        IsCustom   = 0b00010000_0000,\n        IsFunction = 0b00001000_0000,\n        IsEvent    = 0b00000100_0000,\n        IsProperty = 0b00000010_0000,\n        IsCommand  = 0b00000001_0000,\nIsPropertyCommand  = 0b00000011_0000,\n   IsEventCommand  = 0b00000101_0000,\nDelegationStrategyDelta =     0b0110,\n           Command =          0b1111,\n    OneTimeCommand = 0b00000011_0001,\n     ToViewCommand = 0b00000011_0010,\n   FromViewCommand = 0b00000011_0011,\n     TwoWayCommand = 0b00000011_0100,\n       BindCommand = 0b00000011_0101,\n    TriggerCommand = 0b00000101_0110,\n    CaptureCommand = 0b00000101_0111,\n   DelegateCommand = 0b00000101_1000,\n       CallCommand = 0b00001001_1001,\n    OptionsCommand = 0b00000001_1010,\n        ForCommand = 0b00100001_1011,\n     CustomCommand = 0b00010001_1100\n}\n","import { IServiceLocator } from '@aurelia/kernel';\nimport { IBindScope, State } from '../lifecycle';\nimport { IBindingTargetAccessor, IObservable, IScope, LifecycleFlags } from '../observation';\nimport { IObserverLocator } from '../observation/observer-locator';\nimport { IExpression, Interpolation } from './ast';\nimport { IBinding } from './binding';\nimport { BindingMode } from './binding-mode';\nimport { connectable, IConnectableBinding, IPartialConnectableBinding } from './connectable';\n\nconst { toView, oneTime } = BindingMode;\n\nexport class MultiInterpolationBinding implements IBinding {\n  public $nextBind: IBindScope;\n  public $prevBind: IBindScope;\n  public $state: State;\n  public $scope: IScope;\n\n  public interpolation: Interpolation;\n  public observerLocator: IObserverLocator;\n  public locator: IServiceLocator;\n  public mode: BindingMode;\n  public parts: InterpolationBinding[];\n  public target: IObservable;\n  public targetProperty: string;\n\n  constructor(observerLocator: IObserverLocator, interpolation: Interpolation, target: IObservable, targetProperty: string, mode: BindingMode, locator: IServiceLocator) {\n    this.$nextBind = null;\n    this.$prevBind = null;\n    this.$state = State.none;\n    this.$scope = null;\n\n    this.interpolation = interpolation;\n    this.locator = locator;\n    this.mode = mode;\n    this.observerLocator = observerLocator;\n    this.target = target;\n    this.targetProperty = targetProperty;\n\n    // Note: the child expressions of an Interpolation expression are full Aurelia expressions, meaning they may include\n    // value converters and binding behaviors.\n    // Each expression represents one ${interpolation}, and for each we create a child TextBinding unless there is only one,\n    // in which case the renderer will create the TextBinding directly\n    const expressions = interpolation.expressions;\n    const parts = this.parts = Array(expressions.length);\n    for (let i = 0, ii = expressions.length; i < ii; ++i) {\n      parts[i] = new InterpolationBinding(expressions[i], interpolation, target, targetProperty, mode, observerLocator, locator, i === 0);\n    }\n  }\n\n  public $bind(flags: LifecycleFlags, scope: IScope): void {\n    if (this.$state & State.isBound) {\n      if (this.$scope === scope) {\n        return;\n      }\n      this.$unbind(flags);\n    }\n    this.$state |= State.isBound;\n    this.$scope = scope;\n\n    const parts = this.parts;\n    for (let i = 0, ii = parts.length; i < ii; ++i) {\n      parts[i].$bind(flags, scope);\n    }\n  }\n\n  public $unbind(flags: LifecycleFlags): void {\n    if (!(this.$state & State.isBound)) {\n      return;\n    }\n    this.$state &= ~State.isBound;\n    this.$scope = null;\n    const parts = this.parts;\n    for (let i = 0, ii = parts.length; i < ii; ++i) {\n      parts[i].$unbind(flags);\n    }\n  }\n}\n\nexport interface InterpolationBinding extends IConnectableBinding {}\n\n@connectable()\nexport class InterpolationBinding implements IPartialConnectableBinding {\n  public $scope: IScope;\n  public $state: State;\n\n  public interpolation: Interpolation;\n  public isFirst: boolean;\n  public locator: IServiceLocator;\n  public mode: BindingMode;\n  public observerLocator: IObserverLocator;\n  public sourceExpression: IExpression;\n  public target: IObservable;\n  public targetProperty: string;\n\n  public targetObserver: IBindingTargetAccessor;\n\n  // tslint:disable-next-line:parameters-max-number\n  constructor(sourceExpression: IExpression, interpolation: Interpolation, target: IObservable, targetProperty: string, mode: BindingMode, observerLocator: IObserverLocator, locator: IServiceLocator, isFirst: boolean) {\n    this.$state = State.none;\n\n    this.interpolation = interpolation;\n    this.isFirst = isFirst;\n    this.mode = mode;\n    this.locator = locator;\n    this.observerLocator = observerLocator;\n    this.sourceExpression = sourceExpression;\n    this.target = target;\n    this.targetProperty = targetProperty;\n\n    this.targetObserver = observerLocator.getAccessor(target, targetProperty);\n  }\n\n  public updateTarget(value: unknown, flags: LifecycleFlags): void {\n    this.targetObserver.setValue(value, flags | LifecycleFlags.updateTargetInstance);\n  }\n\n  public handleChange(_newValue: unknown, _previousValue: unknown, flags: LifecycleFlags): void {\n    if (!(this.$state & State.isBound)) {\n      return;\n    }\n\n    const previousValue = this.targetObserver.getValue();\n    const newValue = this.interpolation.evaluate(flags, this.$scope, this.locator);\n    if (newValue !== previousValue) {\n      this.updateTarget(newValue, flags);\n    }\n\n    if ((this.mode & oneTime) === 0) {\n      this.version++;\n      this.sourceExpression.connect(flags, this.$scope, this);\n      this.unobserve(false);\n    }\n  }\n\n  public $bind(flags: LifecycleFlags, scope: IScope): void {\n    if (this.$state & State.isBound) {\n      if (this.$scope === scope) {\n        return;\n      }\n      this.$unbind(flags);\n    }\n\n    this.$state |= State.isBound;\n    this.$scope = scope;\n\n    const sourceExpression = this.sourceExpression;\n    if (sourceExpression.bind) {\n      sourceExpression.bind(flags, scope, this);\n    }\n\n    // since the interpolation already gets the whole value, we only need to let the first\n    // text binding do the update if there are multiple\n    if (this.isFirst) {\n      this.updateTarget(this.interpolation.evaluate(flags, scope, this.locator), flags);\n    }\n    if (this.mode & toView) {\n      sourceExpression.connect(flags, scope, this);\n    }\n  }\n\n  public $unbind(flags: LifecycleFlags): void {\n    if (!(this.$state & State.isBound)) {\n      return;\n    }\n    this.$state &= ~State.isBound;\n\n    const sourceExpression = this.sourceExpression;\n    if (sourceExpression.unbind) {\n      sourceExpression.unbind(flags, this.$scope, this);\n    }\n\n    this.$scope = null;\n    this.unobserve(true);\n  }\n}\n","import { IIndexable, IServiceLocator, Reporter, Tracer } from '@aurelia/kernel';\nimport { IBindScope, ILifecycle, State } from '../lifecycle';\nimport { IObservable, IScope, LifecycleFlags } from '../observation';\nimport { IObserverLocator } from '../observation/observer-locator';\nimport { IExpression } from './ast';\nimport { connectable, IConnectableBinding, IPartialConnectableBinding } from './connectable';\n\nconst slice = Array.prototype.slice;\n\nexport interface LetBinding extends IConnectableBinding {}\n\n@connectable()\nexport class LetBinding implements IPartialConnectableBinding {\n  public $nextBind: IBindScope;\n  public $prevBind: IBindScope;\n  public $state: State;\n  public $lifecycle: ILifecycle;\n  public $scope: IScope;\n\n  public locator: IServiceLocator;\n  public observerLocator: IObserverLocator;\n  public sourceExpression: IExpression;\n  public target: IObservable | null;\n  public targetProperty: string;\n\n  private readonly toViewModel: boolean;\n\n  constructor(sourceExpression: IExpression, targetProperty: string, observerLocator: IObserverLocator, locator: IServiceLocator, toViewModel: boolean = false) {\n    this.$nextBind = null;\n    this.$prevBind = null;\n    this.$state = State.none;\n    this.$lifecycle = locator.get(ILifecycle);\n    this.$scope = null;\n\n    this.locator = locator;\n    this.observerLocator = observerLocator;\n    this.sourceExpression = sourceExpression;\n    this.target = null;\n    this.targetProperty = targetProperty;\n\n    this.toViewModel = toViewModel;\n  }\n\n  public handleChange(_newValue: unknown, _previousValue: unknown, flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('LetBinding.handleChange', slice.call(arguments)); }\n    if (!(this.$state & State.isBound)) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n\n    if (flags & LifecycleFlags.updateTargetInstance) {\n      const { target, targetProperty } = this as {target: IIndexable; targetProperty: string};\n      const previousValue: unknown = target[targetProperty];\n      const newValue: unknown = this.sourceExpression.evaluate(flags, this.$scope, this.locator);\n      if (newValue !== previousValue) {\n        target[targetProperty] = newValue;\n      }\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n\n    throw Reporter.error(15, flags);\n  }\n\n  public $bind(flags: LifecycleFlags, scope: IScope): void {\n    if (Tracer.enabled) { Tracer.enter('LetBinding.$bind', slice.call(arguments)); }\n    if (this.$state & State.isBound) {\n      if (this.$scope === scope) {\n        if (Tracer.enabled) { Tracer.leave(); }\n        return;\n      }\n      this.$unbind(flags | LifecycleFlags.fromBind);\n    }\n    // add isBinding flag\n    this.$state |= State.isBinding;\n\n    this.$scope = scope;\n    this.target = (this.toViewModel ? scope.bindingContext : scope.overrideContext) as IIndexable;\n\n    const sourceExpression = this.sourceExpression;\n    if (sourceExpression.bind) {\n      sourceExpression.bind(flags, scope, this);\n    }\n    // sourceExpression might have been changed during bind\n    this.target[this.targetProperty] = this.sourceExpression.evaluate(LifecycleFlags.fromBind, scope, this.locator);\n    this.sourceExpression.connect(flags, scope, this);\n\n    // add isBound flag and remove isBinding flag\n    this.$state |= State.isBound;\n    this.$state &= ~State.isBinding;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public $unbind(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('LetBinding.$unbind', slice.call(arguments)); }\n    if (!(this.$state & State.isBound)) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n    // add isUnbinding flag\n    this.$state |= State.isUnbinding;\n\n    const sourceExpression = this.sourceExpression;\n    if (sourceExpression.unbind) {\n      sourceExpression.unbind(flags, this.$scope, this);\n    }\n    this.$scope = null;\n    this.unobserve(true);\n\n    // remove isBound and isUnbinding flags\n    this.$state &= ~(State.isBound | State.isUnbinding);\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n","import { IIndexable, IServiceLocator, Tracer } from '@aurelia/kernel';\nimport { IBindScope, State } from '../lifecycle';\nimport { IObservable, IScope, LifecycleFlags } from '../observation';\nimport { hasBind, hasUnbind, IsBindingBehavior } from './ast';\nimport { IBinding } from './binding';\nimport { IConnectableBinding } from './connectable';\n\nconst slice = Array.prototype.slice;\n\nexport interface Ref extends IConnectableBinding {}\nexport class Ref implements IBinding {\n  public $nextBind: IBindScope;\n  public $prevBind: IBindScope;\n  public $state: State;\n  public $scope: IScope;\n\n  public locator: IServiceLocator;\n  public sourceExpression: IsBindingBehavior;\n  public target: IObservable;\n\n  constructor(sourceExpression: IsBindingBehavior, target: IObservable, locator: IServiceLocator) {\n    this.$nextBind = null;\n    this.$prevBind = null;\n    this.$state = State.none;\n\n    this.locator = locator;\n    this.sourceExpression = sourceExpression;\n    this.target = target;\n  }\n\n  public $bind(flags: LifecycleFlags, scope: IScope): void {\n    if (Tracer.enabled) { Tracer.enter('Ref.$bind', slice.call(arguments)); }\n    if (this.$state & State.isBound) {\n      if (this.$scope === scope) {\n        if (Tracer.enabled) { Tracer.leave(); }\n        return;\n      }\n\n      this.$unbind(flags | LifecycleFlags.fromBind);\n    }\n    // add isBinding flag\n    this.$state |= State.isBinding;\n\n    this.$scope = scope;\n\n    const sourceExpression = this.sourceExpression;\n    if (hasBind(sourceExpression)) {\n      sourceExpression.bind(flags, scope, this);\n    }\n\n    this.sourceExpression.assign(flags, this.$scope, this.locator, this.target);\n\n    // add isBound flag and remove isBinding flag\n    this.$state |= State.isBound;\n    this.$state &= ~State.isBinding;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public $unbind(flags: LifecycleFlags): void {\n    if (Tracer.enabled) { Tracer.enter('Ref.$unbind', slice.call(arguments)); }\n    if (!(this.$state & State.isBound)) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n    // add isUnbinding flag\n    this.$state |= State.isUnbinding;\n\n    if (this.sourceExpression.evaluate(flags, this.$scope, this.locator) === this.target) {\n      this.sourceExpression.assign(flags, this.$scope, this.locator, null);\n    }\n\n    const sourceExpression = this.sourceExpression;\n    if (hasUnbind(sourceExpression)) {\n      sourceExpression.unbind(flags, this.$scope, this);\n    }\n\n    this.$scope = null;\n\n    // remove isBound and isUnbinding flags\n    this.$state &= ~(State.isBound | State.isUnbinding);\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public observeProperty(obj: IIndexable, propertyName: string): void {\n    return;\n  }\n\n  public handleChange(newValue: unknown, previousValue: unknown, flags: LifecycleFlags): void {\n    return;\n  }\n}\n","import { Tracer } from '@aurelia/kernel';\nimport { ILifecycle } from '../lifecycle';\nimport { IBindingTargetAccessor, LifecycleFlags, MutationKind } from '../observation';\nimport { subscriberCollection } from './subscriber-collection';\n\nconst slice = Array.prototype.slice;\n\ntype BindingTargetAccessor = IBindingTargetAccessor & {\n  lifecycle: ILifecycle;\n  currentFlags: LifecycleFlags;\n  oldValue?: unknown;\n  defaultValue: unknown;\n  $nextFlush?: BindingTargetAccessor;\n  flush(flags: LifecycleFlags): void;\n  setValueCore(value: unknown, flags: LifecycleFlags): void;\n};\n\nfunction setValue(this: BindingTargetAccessor, newValue: unknown, flags: LifecycleFlags): Promise<void> {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.setValue`, slice.call(arguments)); }\n  const currentValue = this.currentValue;\n  newValue = newValue === null || newValue === undefined ? this.defaultValue : newValue;\n  if (currentValue !== newValue) {\n    this.currentValue = newValue;\n    if ((flags & (LifecycleFlags.fromFlush | LifecycleFlags.fromBind)) &&\n      !(this.isDOMObserver && (flags & LifecycleFlags.doNotUpdateDOM))) {\n      this.setValueCore(newValue, flags);\n    } else {\n      this.currentFlags = flags;\n      if (Tracer.enabled) { Tracer.leave(); }\n      return this.lifecycle.enqueueFlush(this);\n    }\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n  return Promise.resolve();\n}\n\nfunction flush(this: BindingTargetAccessor, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.flush`, slice.call(arguments)); }\n  if (this.isDOMObserver && (flags & LifecycleFlags.doNotUpdateDOM)) {\n    // re-queue the change so it will still propagate on flush when it's attached again\n    this.lifecycle.enqueueFlush(this).catch(error => { throw error; });\n    if (Tracer.enabled) { Tracer.leave(); }\n    return;\n  }\n  const currentValue = this.currentValue;\n  // we're doing this check because a value could be set multiple times before a flush, and the final value could be the same as the original value\n  // in which case the target doesn't need to be updated\n  if (this.oldValue !== currentValue) {\n    this.setValueCore(currentValue, this.currentFlags | flags | LifecycleFlags.updateTargetInstance);\n    this.oldValue = this.currentValue;\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\nfunction dispose(this: BindingTargetAccessor): void {\n  this.currentValue = null;\n  this.oldValue = null;\n  this.defaultValue = null;\n\n  this.obj = null;\n  this.propertyKey = '';\n}\n\nexport function targetObserver(defaultValue: unknown = null): ClassDecorator {\n  // tslint:disable-next-line:ban-types // ClassDecorator expects it to be derived from Function\n  return function(target: Function): void {\n    subscriberCollection(MutationKind.instance)(target);\n    const proto = target.prototype as BindingTargetAccessor;\n\n    proto.$nextFlush = null;\n\n    proto.currentValue = defaultValue;\n    proto.oldValue = defaultValue;\n    proto.defaultValue = defaultValue;\n\n    proto.obj = null;\n    proto.propertyKey = '';\n\n    proto.setValue = proto.setValue || setValue;\n    proto.flush = proto.flush || flush;\n    proto.dispose = proto.dispose || dispose;\n  };\n}\n","import { Tracer } from '@aurelia/kernel';\nimport {\n  Collection,\n  CollectionKind,\n  CollectionObserver,\n  IBindingTargetObserver,\n  ICollectionObserver,\n  IndexMap,\n  IPatch,\n  IPropertySubscriber,\n  LifecycleFlags,\n  MutationKind\n} from '../observation';\nimport { batchedSubscriberCollection, subscriberCollection } from './subscriber-collection';\nimport { targetObserver } from './target-observer';\n\nconst slice = Array.prototype.slice;\n\nfunction flush(this: CollectionObserver): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.flush`, slice.call(arguments)); }\n  this.callBatchedSubscribers(this.indexMap);\n  if (!!this.lengthObserver) {\n    this.lengthObserver.patch(LifecycleFlags.fromFlush | LifecycleFlags.updateTargetInstance);\n  }\n  this.resetIndexMap();\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\nfunction dispose(this: CollectionObserver): void {\n  this.collection.$observer = undefined;\n  this.collection = null;\n  this.indexMap = null;\n}\n\nfunction resetIndexMapIndexed(this: ICollectionObserver<CollectionKind.indexed>): void {\n  const len = this.collection.length;\n  const indexMap: IndexMap = (this.indexMap = Array(len));\n  let i = 0;\n  while (i < len) {\n    indexMap[i] = i++;\n  }\n  indexMap.deletedItems = [];\n}\n\nfunction resetIndexMapKeyed(this: ICollectionObserver<CollectionKind.keyed>): void {\n  const len = this.collection.size;\n  const indexMap: IndexMap = (this.indexMap = Array(len));\n  let i = 0;\n  while (i < len) {\n    indexMap[i] = i++;\n  }\n  indexMap.deletedItems = [];\n}\n\nfunction getLengthObserver(this: CollectionObserver): CollectionLengthObserver {\n  return this.lengthObserver === undefined ? (this.lengthObserver = new CollectionLengthObserver(this as Collection&ICollectionObserver<CollectionKind>, this.lengthPropertyName)) : this.lengthObserver as CollectionLengthObserver;\n}\n\nexport function collectionObserver(kind: CollectionKind.array | CollectionKind.set | CollectionKind.map): ClassDecorator {\n  // tslint:disable-next-line:ban-types // ClassDecorator expects it to be derived from Function\n  return function(target: Function): void {\n    subscriberCollection(MutationKind.collection)(target);\n    batchedSubscriberCollection()(target);\n    const proto = target.prototype as CollectionObserver;\n\n    proto.$nextFlush = null;\n\n    proto.collection = null;\n    proto.indexMap = null;\n    proto.hasChanges = false;\n    proto.lengthPropertyName = kind & CollectionKind.indexed ? 'length' : 'size';\n    proto.collectionKind = kind;\n    proto.resetIndexMap = kind & CollectionKind.indexed ? resetIndexMapIndexed : resetIndexMapKeyed;\n    proto.flush = flush;\n    proto.dispose = dispose;\n    proto.getLengthObserver = getLengthObserver;\n\n    proto.subscribe = proto.subscribe || proto.addSubscriber;\n    proto.unsubscribe = proto.unsubscribe || proto.removeSubscriber;\n\n    proto.subscribeBatched = proto.subscribeBatched || proto.addBatchedSubscriber;\n    proto.unsubscribeBatched = proto.unsubscribeBatched || proto.removeBatchedSubscriber;\n  };\n}\n\nexport interface CollectionLengthObserver extends IBindingTargetObserver<Collection, string> {}\n\n@targetObserver()\nexport class CollectionLengthObserver implements CollectionLengthObserver, IPatch {\n  public currentValue: number;\n  public currentFlags: LifecycleFlags;\n\n  public obj: Collection;\n  public propertyKey: 'length' | 'size';\n\n  constructor(obj: Collection, propertyKey: 'length' | 'size') {\n    this.obj = obj;\n    this.propertyKey = propertyKey;\n\n    this.currentValue = obj[propertyKey];\n  }\n\n  public getValue(): number {\n    return this.obj[this.propertyKey];\n  }\n\n  public setValueCore(newValue: number): void {\n    this.obj[this.propertyKey] = newValue;\n  }\n\n  public patch(flags: LifecycleFlags): void {\n    this.callSubscribers(this.obj[this.propertyKey], this.currentValue, flags);\n    this.currentValue = this.obj[this.propertyKey];\n  }\n\n  public subscribe(subscriber: IPropertySubscriber): void {\n    this.addSubscriber(subscriber);\n  }\n\n  public unsubscribe(subscriber: IPropertySubscriber): void {\n    this.removeSubscriber(subscriber);\n  }\n}\n","import { ILifecycle } from '../lifecycle';\nimport { CollectionKind, ICollectionObserver, IndexMap, IObservedArray, LifecycleFlags } from '../observation';\nimport { collectionObserver } from './collection-observer';\n\n// https://tc39.github.io/ecma262/#sec-sortcompare\nfunction sortCompare(x: unknown, y: unknown): number {\n  if (x === y) {\n    return 0;\n  }\n  x = x === null ? 'null' : (x as {}).toString();\n  y = y === null ? 'null' : (y as {}).toString();\n  return (x as {}) < (y as {}) ? -1 : 1;\n}\n\nfunction preSortCompare(x: unknown, y: unknown): number {\n  if (x === undefined) {\n    if (y === undefined) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n  if (y === undefined) {\n    return -1;\n  }\n  return 0;\n}\n\nfunction insertionSort(arr: IObservedArray, indexMap: IndexMap, from: number, to: number, compareFn: (a: unknown, b: unknown) => number): void {\n  let velement, ielement, vtmp, itmp, order;\n  let i, j;\n  for (i = from + 1; i < to; i++) {\n    velement = arr[i];\n    ielement = indexMap[i];\n    for (j = i - 1; j >= from; j--) {\n      vtmp = arr[j];\n      itmp = indexMap[j];\n      order = compareFn(vtmp, velement);\n      if (order > 0) {\n        arr[j + 1] = vtmp;\n        indexMap[j + 1] = itmp;\n      } else {\n        break;\n      }\n    }\n    arr[j + 1] = velement;\n    indexMap[j + 1] = ielement;\n  }\n}\n\n// tslint:disable-next-line:cognitive-complexity\nfunction quickSort(arr: IObservedArray, indexMap: IndexMap, from: number, to: number, compareFn: (a: unknown, b: unknown) => number): void {\n  let thirdIndex = 0, i = 0;\n  let v0, v1, v2;\n  let i0, i1, i2;\n  let c01, c02, c12;\n  let vtmp, itmp;\n  let vpivot, ipivot, lowEnd, highStart;\n  let velement, ielement, order, vtopElement;\n\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    if (to - from <= 10) {\n      insertionSort(arr, indexMap, from, to, compareFn);\n      return;\n    }\n\n    // tslint:disable:no-statements-same-line\n    thirdIndex = from + ((to - from) >> 1);\n    v0 = arr[from];                i0 = indexMap[from];\n    v1 = arr[to - 1];              i1 = indexMap[to - 1];\n    v2 = arr[thirdIndex];          i2 = indexMap[thirdIndex];\n    c01 = compareFn(v0, v1);\n    if (c01 > 0) {\n      vtmp = v0;                   itmp = i0;\n      v0 = v1;                     i0 = i1;\n      v1 = vtmp;                   i1 = itmp;\n    }\n    c02 = compareFn(v0, v2);\n    if (c02 >= 0) {\n      vtmp = v0;                   itmp = i0;\n      v0 = v2;                     i0 = i2;\n      v2 = v1;                     i2 = i1;\n      v1 = vtmp;                   i1 = itmp;\n    } else {\n      c12 = compareFn(v1, v2);\n      if (c12 > 0) {\n        vtmp = v1;                 itmp = i1;\n        v1 = v2;                   i1 = i2;\n        v2 = vtmp;                 i2 = itmp;\n      }\n    }\n    arr[from] = v0;                indexMap[from] = i0;\n    arr[to - 1] = v2;              indexMap[to - 1] = i2;\n    vpivot = v1;                   ipivot = i1;\n    lowEnd = from + 1;\n    highStart = to - 1;\n    arr[thirdIndex] = arr[lowEnd]; indexMap[thirdIndex] = indexMap[lowEnd];\n    arr[lowEnd] = vpivot;          indexMap[lowEnd] = ipivot;\n\n    partition: for (i = lowEnd + 1; i < highStart; i++) {\n      velement = arr[i];           ielement = indexMap[i];\n      order = compareFn(velement, vpivot);\n      if (order < 0) {\n        arr[i] = arr[lowEnd];      indexMap[i] = indexMap[lowEnd];\n        arr[lowEnd] = velement;    indexMap[lowEnd] = ielement;\n        lowEnd++;\n      } else if (order > 0) {\n        do {\n          highStart--;\n          // tslint:disable-next-line:triple-equals\n          if (highStart == i) {\n            break partition;\n          }\n          vtopElement = arr[highStart]; order = compareFn(vtopElement, vpivot);\n        } while (order > 0);\n        arr[i] = arr[highStart];   indexMap[i] = indexMap[highStart];\n        arr[highStart] = velement; indexMap[highStart] = ielement;\n        if (order < 0) {\n          velement = arr[i];       ielement = indexMap[i];\n          arr[i] = arr[lowEnd];    indexMap[i] = indexMap[lowEnd];\n          arr[lowEnd] = velement;  indexMap[lowEnd] = ielement;\n          lowEnd++;\n        }\n      }\n    }\n    // tslint:enable:no-statements-same-line\n\n    if (to - highStart < lowEnd - from) {\n      quickSort(arr, indexMap, highStart, to, compareFn);\n      to = lowEnd;\n    } else {\n      quickSort(arr, indexMap, from, lowEnd, compareFn);\n      from = highStart;\n    }\n  }\n}\n\nconst proto = Array.prototype;\n\nconst $push = proto.push;\nconst $unshift = proto.unshift;\nconst $pop = proto.pop;\nconst $shift = proto.shift;\nconst $splice = proto.splice;\nconst $reverse = proto.reverse;\nconst $sort = proto.sort;\n\nconst native = { push: $push, unshift: $unshift, pop: $pop, shift: $shift, splice: $splice, reverse: $reverse, sort: $sort };\nconst methods = ['push', 'unshift', 'pop', 'shift', 'splice', 'reverse', 'sort'];\n\nconst observe = {\n  // https://tc39.github.io/ecma262/#sec-array.prototype.push\n  push: function(this: IObservedArray): ReturnType<typeof Array.prototype.push> {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $push.apply(this, arguments);\n    }\n    const len = this.length;\n    const argCount = arguments.length;\n    if (argCount === 0) {\n      return len;\n    }\n    this.length = o.indexMap.length = len + argCount;\n    let i = len;\n    while (i < this.length) {\n      this[i] = arguments[i - len];\n      o.indexMap[i] = - 2;\n      i++;\n    }\n    o.callSubscribers('push', arguments, LifecycleFlags.isCollectionMutation);\n    return this.length;\n  },\n  // https://tc39.github.io/ecma262/#sec-array.prototype.unshift\n  unshift: function(this: IObservedArray): ReturnType<typeof Array.prototype.unshift>  {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $unshift.apply(this, arguments);\n    }\n    const argCount = arguments.length;\n    const inserts = new Array(argCount);\n    let i = 0;\n    while (i < argCount) {\n      inserts[i++] = - 2;\n    }\n    $unshift.apply(o.indexMap, inserts);\n    const len = $unshift.apply(this, arguments);\n    o.callSubscribers('unshift', arguments, LifecycleFlags.isCollectionMutation);\n    return len;\n  },\n  // https://tc39.github.io/ecma262/#sec-array.prototype.pop\n  pop: function(this: IObservedArray): ReturnType<typeof Array.prototype.pop> {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $pop.call(this);\n    }\n    const indexMap = o.indexMap;\n    const element = $pop.call(this);\n    // only mark indices as deleted if they actually existed in the original array\n    const index = indexMap.length - 1;\n    if (indexMap[index] > -1) {\n      $pop.call(indexMap.deletedItems, element);\n    }\n    $pop.call(indexMap);\n    o.callSubscribers('pop', arguments, LifecycleFlags.isCollectionMutation);\n    return element;\n  },\n  // https://tc39.github.io/ecma262/#sec-array.prototype.shift\n  shift: function(this: IObservedArray): ReturnType<typeof Array.prototype.shift> {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $shift.call(this);\n    }\n    const indexMap = o.indexMap;\n    const element = $shift.call(this);\n    // only mark indices as deleted if they actually existed in the original array\n    if (indexMap[0] > -1) {\n      $shift.call(indexMap.deletedItems, element);\n    }\n    $shift.call(indexMap);\n    o.callSubscribers('shift', arguments, LifecycleFlags.isCollectionMutation);\n    return element;\n  },\n  // https://tc39.github.io/ecma262/#sec-array.prototype.splice\n  splice: function(this: IObservedArray, start: number, deleteCount?: number): ReturnType<typeof Array.prototype.splice> {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $splice.apply(this, arguments);\n    }\n    const indexMap = o.indexMap;\n    if (deleteCount > 0) {\n      let i = isNaN(start) ? 0 : start;\n      const to = i + deleteCount;\n      while (i < to) {\n        if (indexMap[i] > -1) {\n          $splice.call(indexMap.deletedItems, this[i]);\n        }\n        i++;\n      }\n    }\n    const argCount = arguments.length;\n    if (argCount > 2) {\n      const itemCount = argCount - 2;\n      const inserts = new Array(itemCount);\n      let i = 0;\n      while (i < itemCount) {\n        inserts[i++] = - 2;\n      }\n      $splice.call(indexMap, start, deleteCount, ...inserts);\n    } else if (argCount === 2) {\n      $splice.call(indexMap, start, deleteCount);\n    }\n    const deleted = $splice.apply(this, arguments);\n    o.callSubscribers('splice', arguments, LifecycleFlags.isCollectionMutation);\n    return deleted;\n  },\n  // https://tc39.github.io/ecma262/#sec-array.prototype.reverse\n  reverse: function(this: IObservedArray): ReturnType<typeof Array.prototype.reverse> {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $reverse.call(this);\n    }\n    const len = this.length;\n    const middle = (len / 2) | 0;\n    let lower = 0;\n    // tslint:disable:no-statements-same-line\n    while (lower !== middle) {\n      const upper = len - lower - 1;\n      const lowerValue = this[lower];  const lowerIndex = o.indexMap[lower];\n      const upperValue = this[upper];  const upperIndex = o.indexMap[upper];\n      this[lower] = upperValue;        o.indexMap[lower] = upperIndex;\n      this[upper] = lowerValue;        o.indexMap[upper] = lowerIndex;\n      lower++;\n    }\n    // tslint:enable:no-statements-same-line\n    o.callSubscribers('reverse', arguments, LifecycleFlags.isCollectionMutation);\n    return this;\n  },\n  // https://tc39.github.io/ecma262/#sec-array.prototype.sort\n  // https://github.com/v8/v8/blob/master/src/js/array.js\n  sort: function(this: IObservedArray, compareFn?: (a: unknown, b: unknown) => number): IObservedArray {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $sort.call(this, compareFn);\n    }\n    const len = this.length;\n    if (len < 2) {\n      return this;\n    }\n    quickSort(this, o.indexMap, 0, len, preSortCompare);\n    let i = 0;\n    while (i < len) {\n      if (this[i] === undefined) {\n        break;\n      }\n      i++;\n    }\n    if (compareFn === undefined || typeof compareFn !== 'function'/*spec says throw a TypeError, should we do that too?*/) {\n      compareFn = sortCompare;\n    }\n    quickSort(this, o.indexMap, 0, i, compareFn);\n    o.callSubscribers('sort', arguments, LifecycleFlags.isCollectionMutation);\n    return this;\n  }\n};\n\nconst descriptorProps = {\n  writable: true,\n  enumerable: false,\n  configurable: true\n};\n\nconst def = Object.defineProperty;\n\nfor (const method of methods) {\n  def(observe[method], 'observing', { value: true, writable: false, configurable: false, enumerable: false });\n}\n\nexport function enableArrayObservation(): void {\n  for (const method of methods) {\n    if (proto[method].observing !== true) {\n      def(proto, method, { ...descriptorProps, value: observe[method] });\n    }\n  }\n}\n\nenableArrayObservation();\n\nexport function disableArrayObservation(): void {\n  for (const method of methods) {\n    if (proto[method].observing === true) {\n      def(proto, method, { ...descriptorProps, value: native[method] });\n    }\n  }\n}\n\nexport interface ArrayObserver extends ICollectionObserver<CollectionKind.array> {}\n\n@collectionObserver(CollectionKind.array)\nexport class ArrayObserver implements ArrayObserver {\n  public resetIndexMap: () => void;\n\n  public collection: IObservedArray;\n\n  constructor(lifecycle: ILifecycle, array: IObservedArray) {\n    this.lifecycle = lifecycle;\n    array.$observer = this;\n    this.collection = array;\n    this.resetIndexMap();\n  }\n}\n\nexport function getArrayObserver(lifecycle: ILifecycle, array: IObservedArray): ArrayObserver {\n  return (array.$observer as ArrayObserver) || new ArrayObserver(lifecycle, array);\n}\n","import { ILifecycle } from '../lifecycle';\nimport { CollectionKind, ICollectionObserver, IObservedMap, LifecycleFlags } from '../observation';\nimport { collectionObserver } from './collection-observer';\n\nconst proto = Map.prototype;\n\nconst $set = proto.set;\nconst $clear = proto.clear;\nconst $delete = proto.delete;\n\nconst native = { set: $set, clear: $clear, delete: $delete };\nconst methods = ['set', 'clear', 'delete'];\n\n// note: we can't really do much with Map due to the internal data structure not being accessible so we're just using the native calls\n// fortunately, map/delete/clear are easy to reconstruct for the indexMap\n\nconst observe = {\n  // https://tc39.github.io/ecma262/#sec-map.prototype.map\n  set: function(this: IObservedMap, key: unknown, value: unknown): ReturnType<typeof $set> {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $set.call(this, key, value);\n    }\n    const oldSize = this.size;\n    $set.call(this, key, value);\n    const newSize = this.size;\n    if (newSize === oldSize) {\n      let i = 0;\n      for (const entry of this.entries()) {\n        if (entry[0] === key) {\n          if (entry[1] !== value) {\n            o.indexMap[i] = -2;\n          }\n          return this;\n        }\n        i++;\n      }\n      return this;\n    }\n    o.indexMap[oldSize] = -2;\n    o.callSubscribers('set', arguments, LifecycleFlags.isCollectionMutation);\n    return this;\n  },\n  // https://tc39.github.io/ecma262/#sec-map.prototype.clear\n  clear: function(this: IObservedMap): ReturnType<typeof $clear>  {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $clear.call(this);\n    }\n    const size = this.size;\n    if (size > 0) {\n      const indexMap = o.indexMap;\n      let i = 0;\n      for (const entry of this.keys()) {\n        if (indexMap[i] > -1) {\n          indexMap.deletedItems.push(entry);\n        }\n        i++;\n      }\n      $clear.call(this);\n      indexMap.length = 0;\n      o.callSubscribers('clear', arguments, LifecycleFlags.isCollectionMutation);\n    }\n    return undefined;\n  },\n  // https://tc39.github.io/ecma262/#sec-map.prototype.delete\n  delete: function(this: IObservedMap, value: unknown): ReturnType<typeof $delete> {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $delete.call(this, value);\n    }\n    const size = this.size;\n    if (size === 0) {\n      return false;\n    }\n    let i = 0;\n    const indexMap = o.indexMap;\n    for (const entry of this.keys()) {\n      if (entry === value) {\n        if (indexMap[i] > -1) {\n          indexMap.deletedItems.push(entry);\n        }\n        indexMap.splice(i, 1);\n        return $delete.call(this, value);\n      }\n      i++;\n    }\n    o.callSubscribers('delete', arguments, LifecycleFlags.isCollectionMutation);\n    return false;\n  }\n};\n\nconst descriptorProps = {\n  writable: true,\n  enumerable: false,\n  configurable: true\n};\n\nconst def = Object.defineProperty;\n\nfor (const method of methods) {\n  def(observe[method], 'observing', { value: true, writable: false, configurable: false, enumerable: false });\n}\n\nexport function enableMapObservation(): void {\n  for (const method of methods) {\n    if (proto[method].observing !== true) {\n      def(proto, method, { ...descriptorProps, value: observe[method] });\n    }\n  }\n}\n\nenableMapObservation();\n\nexport function disableMapObservation(): void {\n  for (const method of methods) {\n    if (proto[method].observing === true) {\n      def(proto, method, { ...descriptorProps, value: native[method] });\n    }\n  }\n}\n\nexport interface MapObserver extends ICollectionObserver<CollectionKind.map> {}\n\n@collectionObserver(CollectionKind.map)\nexport class MapObserver implements MapObserver {\n  public resetIndexMap: () => void;\n  public lifecycle: ILifecycle;\n\n  public collection: IObservedMap;\n\n  constructor(lifecycle: ILifecycle, map: IObservedMap) {\n    this.lifecycle = lifecycle;\n    map.$observer = this;\n    this.collection = map;\n    this.resetIndexMap();\n  }\n}\n\nexport function getMapObserver(lifecycle: ILifecycle, map: IObservedMap): MapObserver {\n  return (map.$observer as MapObserver) || new MapObserver(lifecycle, map);\n}\n","import { ILifecycle } from '../lifecycle';\nimport { CollectionKind, ICollectionObserver, IObservedSet, LifecycleFlags } from '../observation';\nimport { collectionObserver } from './collection-observer';\n\nconst proto = Set.prototype;\n\nconst $add = proto.add;\nconst $clear = proto.clear;\nconst $delete = proto.delete;\n\nconst native = { add: $add, clear: $clear, delete: $delete };\nconst methods = ['add', 'clear', 'delete'];\n\n// note: we can't really do much with Set due to the internal data structure not being accessible so we're just using the native calls\n// fortunately, add/delete/clear are easy to reconstruct for the indexMap\n\nconst observe = {\n  // https://tc39.github.io/ecma262/#sec-set.prototype.add\n  add: function(this: IObservedSet, value: unknown): ReturnType<typeof $add> {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $add.call(this, value);\n    }\n    const oldSize = this.size;\n    $add.call(this, value);\n    const newSize = this.size;\n    if (newSize === oldSize) {\n      return this;\n    }\n    o.indexMap[oldSize] = -2;\n    o.callSubscribers('add', arguments, LifecycleFlags.isCollectionMutation);\n    return this;\n  },\n  // https://tc39.github.io/ecma262/#sec-set.prototype.clear\n  clear: function(this: IObservedSet): ReturnType<typeof $clear>  {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $clear.call(this);\n    }\n    const size = this.size;\n    if (size > 0) {\n      const indexMap = o.indexMap;\n      let i = 0;\n      for (const entry of this.keys()) {\n        if (indexMap[i] > -1) {\n        indexMap.deletedItems.push(entry);\n        }\n        i++;\n      }\n      $clear.call(this);\n      indexMap.length = 0;\n      o.callSubscribers('clear', arguments, LifecycleFlags.isCollectionMutation);\n    }\n    return undefined;\n  },\n  // https://tc39.github.io/ecma262/#sec-set.prototype.delete\n  delete: function(this: IObservedSet, value: unknown): ReturnType<typeof $delete> {\n    const o = this.$observer;\n    if (o === undefined) {\n      return $delete.call(this, value);\n    }\n    const size = this.size;\n    if (size === 0) {\n      return false;\n    }\n    let i = 0;\n    const indexMap = o.indexMap;\n    for (const entry of this.keys()) {\n      if (entry === value) {\n        if (indexMap[i] > -1) {\n          indexMap.deletedItems.push(entry);\n        }\n        indexMap.splice(i, 1);\n        return $delete.call(this, value);\n      }\n      i++;\n    }\n    o.callSubscribers('delete', arguments, LifecycleFlags.isCollectionMutation);\n    return false;\n  }\n};\n\nconst descriptorProps = {\n  writable: true,\n  enumerable: false,\n  configurable: true\n};\n\nconst def = Object.defineProperty;\n\nfor (const method of methods) {\n  def(observe[method], 'observing', { value: true, writable: false, configurable: false, enumerable: false });\n}\n\nexport function enableSetObservation(): void {\n  for (const method of methods) {\n    if (proto[method].observing !== true) {\n      def(proto, method, { ...descriptorProps, value: observe[method] });\n    }\n  }\n}\n\nenableSetObservation();\n\nexport function disableSetObservation(): void {\n  for (const method of methods) {\n    if (proto[method].observing === true) {\n      def(proto, method, { ...descriptorProps, value: native[method] });\n    }\n  }\n}\n\nexport interface SetObserver extends ICollectionObserver<CollectionKind.set> {}\n\n@collectionObserver(CollectionKind.set)\nexport class SetObserver implements SetObserver {\n  public resetIndexMap: () => void;\n\n  public collection: IObservedSet;\n\n  constructor(lifecycle: ILifecycle, observedSet: IObservedSet) {\n    this.lifecycle = lifecycle;\n    observedSet.$observer = this;\n    this.collection = observedSet;\n    this.resetIndexMap();\n  }\n}\n\nexport function getSetObserver(lifecycle: ILifecycle, observedSet: IObservedSet): SetObserver {\n  return (observedSet.$observer as SetObserver) || new SetObserver(lifecycle, observedSet);\n}\n","import { Constructable, PLATFORM, Reporter, Tracer } from '@aurelia/kernel';\nimport { ILifecycle } from '../lifecycle';\nimport {\n  IBatchedSubscribable,\n  IBindingTargetObserver,\n  IObservable,\n  IPropertySubscriber,\n  ISubscribable,\n  LifecycleFlags,\n  MutationKind\n} from '../observation';\nimport { IDirtyChecker } from './dirty-checker';\nimport { IObserverLocator } from './observer-locator';\nimport { subscriberCollection } from './subscriber-collection';\n\nconst slice = Array.prototype.slice;\n\nexport interface ComputedOverrides {\n  // Indicates that a getter doesn't need to re-calculate its dependencies after the first observation.\n  static?: boolean;\n\n  // Indicates that the getter of a getter/setter pair can change its value based on side-effects outside the setter.\n  volatile?: boolean;\n}\n\nexport type ComputedLookup = { computed?: Record<string, ComputedOverrides> };\n\nexport function computed(config: ComputedOverrides): PropertyDecorator {\n  return function(target: Constructable & ComputedLookup, key: string): void {\n    (target.computed || (target.computed = {}))[key] = config;\n  };\n}\n\nconst computedOverrideDefaults: ComputedOverrides = { static: false, volatile: false };\n\n/* @internal */\nexport function createComputedObserver(\n  observerLocator: IObserverLocator,\n  dirtyChecker: IDirtyChecker,\n  lifecycle: ILifecycle,\n  instance: IObservable & { constructor: IObservable & ComputedLookup },\n  propertyName: string,\n  descriptor: PropertyDescriptor): IBindingTargetObserver {\n\n  if (descriptor.configurable === false) {\n    return dirtyChecker.createProperty(instance, propertyName);\n  }\n\n  if (descriptor.get) {\n    const overrides = instance.constructor.computed && instance.constructor.computed[propertyName] || computedOverrideDefaults;\n\n    if (descriptor.set) {\n      if (overrides.volatile) {\n        return new GetterObserver(overrides, instance, propertyName, descriptor, observerLocator, lifecycle);\n      }\n      return new CustomSetterObserver(instance, propertyName, descriptor);\n    }\n    return new GetterObserver(overrides, instance, propertyName, descriptor, observerLocator, lifecycle);\n  }\n  throw Reporter.error(18, propertyName);\n}\n\nexport interface CustomSetterObserver extends IBindingTargetObserver { }\n\n// Used when the getter is dependent solely on changes that happen within the setter.\n@subscriberCollection(MutationKind.instance)\nexport class CustomSetterObserver implements CustomSetterObserver {\n  public readonly obj: IObservable;\n  public readonly propertyKey: string;\n  public currentValue: unknown;\n  public oldValue: unknown;\n\n  private readonly descriptor: PropertyDescriptor;\n  private observing: boolean;\n\n  constructor(obj: IObservable, propertyKey: string, descriptor: PropertyDescriptor) {\n    this.obj = obj;\n    this.propertyKey = propertyKey;\n    this.currentValue = this.oldValue = undefined;\n    this.descriptor = descriptor;\n    this.observing = false;\n  }\n\n  public setValue(newValue: unknown): void {\n    if (Tracer.enabled) { Tracer.enter('CustomSetterObserver.setValue', slice.call(arguments)); }\n    this.descriptor.set.call(this.obj, newValue);\n    if (this.currentValue !== newValue) {\n      this.oldValue = this.currentValue;\n      this.currentValue = newValue;\n      this.callSubscribers(newValue, this.oldValue, LifecycleFlags.updateTargetInstance);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  public subscribe(subscriber: IPropertySubscriber): void {\n    if (!this.observing) {\n      this.convertProperty();\n    }\n    this.addSubscriber(subscriber);\n  }\n\n  public unsubscribe(subscriber: IPropertySubscriber): void {\n    this.removeSubscriber(subscriber);\n  }\n\n  public convertProperty(): void {\n    if (Tracer.enabled) { Tracer.enter('CustomSetterObserver.convertProperty', slice.call(arguments)); }\n    this.observing = true;\n    this.currentValue = this.obj[this.propertyKey];\n\n    const set = (newValue: unknown): void => { this.setValue(newValue); };\n    Reflect.defineProperty(this.obj, this.propertyKey, { set });\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\nexport interface GetterObserver extends IBindingTargetObserver { }\n\n// Used when there is no setter, and the getter is dependent on other properties of the object;\n// Used when there is a setter but the value of the getter can change based on properties set outside of the setter.\n/** @internal */\n@subscriberCollection(MutationKind.instance)\nexport class GetterObserver implements GetterObserver {\n  public readonly obj: IObservable;\n  public readonly propertyKey: string;\n  public currentValue: unknown;\n  public oldValue: unknown;\n\n  private readonly proxy: ProxyHandler<object>;\n  private readonly propertyDeps: ISubscribable<MutationKind.instance>[];\n  private readonly collectionDeps: IBatchedSubscribable<MutationKind.collection>[];\n  private readonly overrides: ComputedOverrides;\n  private readonly descriptor: PropertyDescriptor;\n  private subscriberCount: number;\n  private isCollecting: boolean;\n\n  constructor(overrides: ComputedOverrides, obj: IObservable, propertyKey: string, descriptor: PropertyDescriptor, observerLocator: IObserverLocator, lifecycle: ILifecycle) {\n    this.obj = obj;\n    this.propertyKey = propertyKey;\n    this.isCollecting = false;\n    this.currentValue = this.oldValue = undefined;\n\n    this.propertyDeps = [];\n    this.collectionDeps = [];\n    this.overrides = overrides;\n    this.subscriberCount = 0;\n    this.descriptor = descriptor;\n    this.proxy = new Proxy(obj, createGetterTraps(observerLocator, this));\n\n    const get = (): unknown => this.getValue();\n    Reflect.defineProperty(obj, propertyKey, { get });\n  }\n\n  public addPropertyDep(subscribable: ISubscribable<MutationKind.instance>): void {\n    if (this.propertyDeps.indexOf(subscribable) === -1) {\n      this.propertyDeps.push(subscribable);\n    }\n  }\n\n  public addCollectionDep(subscribable: IBatchedSubscribable<MutationKind.collection>): void {\n    if (this.collectionDeps.indexOf(subscribable) === -1) {\n      this.collectionDeps.push(subscribable);\n    }\n  }\n\n  public getValue(): unknown {\n    if (Tracer.enabled) { Tracer.enter('GetterObserver.getValue', slice.call(arguments)); }\n    if (this.subscriberCount === 0 || this.isCollecting) {\n      this.currentValue = Reflect.apply(this.descriptor.get, this.proxy, PLATFORM.emptyArray);\n    } else {\n      this.currentValue = Reflect.apply(this.descriptor.get, this.obj, PLATFORM.emptyArray);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return this.currentValue;\n  }\n\n  public subscribe(subscriber: IPropertySubscriber): void {\n    this.addSubscriber(subscriber);\n    if (++this.subscriberCount === 1) {\n      this.getValueAndCollectDependencies(true);\n    }\n  }\n\n  public unsubscribe(subscriber: IPropertySubscriber): void {\n    this.removeSubscriber(subscriber);\n    if (--this.subscriberCount === 0) {\n      this.unsubscribeAllDependencies();\n    }\n  }\n\n  public handleChange(): void {\n    const oldValue = this.currentValue;\n    const newValue = this.getValueAndCollectDependencies(false);\n    if (oldValue !== newValue) {\n      this.callSubscribers(newValue, oldValue, LifecycleFlags.updateTargetInstance);\n    }\n  }\n\n  public handleBatchedChange(): void {\n    const oldValue = this.currentValue;\n    const newValue = this.getValueAndCollectDependencies(false);\n    if (oldValue !== newValue) {\n      this.callSubscribers(newValue, oldValue, LifecycleFlags.fromFlush | LifecycleFlags.updateTargetInstance);\n    }\n  }\n\n  public getValueAndCollectDependencies(requireCollect: boolean): unknown {\n    if (Tracer.enabled) { Tracer.enter('GetterObserver.getValueAndCollectDependencies', slice.call(arguments)); }\n    const dynamicDependencies = !this.overrides.static || requireCollect;\n\n    if (dynamicDependencies) {\n      this.unsubscribeAllDependencies();\n      this.isCollecting = true;\n    }\n\n    this.currentValue = this.getValue();\n\n    if (dynamicDependencies) {\n      this.propertyDeps.forEach(x => { x.subscribe(this); });\n      this.collectionDeps.forEach(x => { x.subscribeBatched(this); });\n      this.isCollecting = false;\n    }\n\n    if (Tracer.enabled) { Tracer.leave(); }\n    return this.currentValue;\n  }\n\n  public doNotCollect(key: PropertyKey): boolean {\n    return !this.isCollecting || key === '$observers';\n  }\n\n  private unsubscribeAllDependencies(): void {\n    this.propertyDeps.forEach(x => { x.unsubscribe(this); });\n    this.propertyDeps.length = 0;\n    this.collectionDeps.forEach(x => { x.unsubscribeBatched(this); });\n    this.collectionDeps.length = 0;\n  }\n}\n\nconst toStringTag = Object.prototype.toString;\n\nfunction createGetterTraps(observerLocator: IObserverLocator, observer: GetterObserver): ProxyHandler<object> {\n  if (Tracer.enabled) { Tracer.enter('computed.createGetterTraps', slice.call(arguments)); }\n  const traps = {\n    get: function(target: object, key: PropertyKey, receiver?: unknown): unknown {\n      if (Tracer.enabled) { Tracer.enter('computed.get', slice.call(arguments)); }\n      if (observer.doNotCollect(key)) {\n        if (Tracer.enabled) { Tracer.leave(); }\n        return Reflect.get(target, key, receiver);\n      }\n\n      // The length and iterator properties need to be invoked on the original object (for Map and Set\n      // at least) or they will throw.\n      switch (toStringTag.call(target)) {\n        case '[object Array]':\n          observer.addCollectionDep(observerLocator.getArrayObserver(target as unknown[]));\n          if (key === 'length') {\n            if (Tracer.enabled) { Tracer.leave(); }\n            return Reflect.get(target, key, target);\n          }\n        case '[object Map]':\n          observer.addCollectionDep(observerLocator.getMapObserver(target as Map<unknown, unknown>));\n          if (key === 'size') {\n            if (Tracer.enabled) { Tracer.leave(); }\n            return Reflect.get(target, key, target);\n          }\n        case '[object Set]':\n          observer.addCollectionDep(observerLocator.getSetObserver(target as Set<unknown>));\n          if (key === 'size') {\n            if (Tracer.enabled) { Tracer.leave(); }\n            return Reflect.get(target, key, target);\n          }\n        default:\n          observer.addPropertyDep(observerLocator.getObserver(target, key as string) as IBindingTargetObserver);\n      }\n\n      if (Tracer.enabled) { Tracer.leave(); }\n      return proxyOrValue(target, key, observerLocator, observer);\n    }\n  };\n  if (Tracer.enabled) { Tracer.leave(); }\n  return traps;\n}\n\nfunction proxyOrValue(target: object, key: PropertyKey, observerLocator: IObserverLocator, observer: GetterObserver): ProxyHandler<object> {\n  const value = Reflect.get(target, key, target);\n  if (typeof value === 'function') {\n    return target[key].bind(target);\n  }\n  if (typeof value !== 'object' || value === null) {\n    return value;\n  }\n  return new Proxy(value, createGetterTraps(observerLocator, observer));\n}\n","import { DI, PLATFORM, Reporter } from '@aurelia/kernel';\nimport { IBindingTargetObserver, IObservable, IPropertySubscriber, LifecycleFlags } from '../observation';\nimport { propertyObserver } from './property-observer';\n\nexport interface IDirtyChecker {\n  createProperty(obj: IObservable, propertyName: string): IBindingTargetObserver;\n  addProperty(property: DirtyCheckProperty): void;\n  removeProperty(property: DirtyCheckProperty): void;\n}\n\nexport const IDirtyChecker = DI.createInterface<IDirtyChecker>('IDirtyChecker').withDefault(x => x.singleton(DirtyChecker));\n\nexport const DirtyCheckSettings = {\n  /**\n   * Default: `6`\n   *\n   * Adjust the global dirty check frequency.\n   * Measures in \"frames per check\", such that (given an FPS of 60):\n   * - A value of 1 will result in 60 dirty checks per second\n   * - A value of 6 will result in 10 dirty checks per second\n   */\n  framesPerCheck: 6,\n  /**\n   * Default: `false`\n   *\n   * Disable dirty-checking entirely. Properties that cannot be observed without dirty checking\n   * or an adapter, will simply not be observed.\n   */\n  disabled: false,\n  /**\n   * Default: `true`\n   *\n   * Log a warning message to the console if a property is being dirty-checked.\n   */\n  warn: true,\n  /**\n   * Default: `false`\n   *\n   * Throw an error if a property is being dirty-checked.\n   */\n  throw: false,\n  /**\n   * Resets all dirty checking settings to the framework's defaults.\n   */\n  resetToDefault(): void {\n    this.framesPerCheck = 6;\n    this.disabled = false;\n    this.warn = true;\n    this.throw = false;\n  }\n};\n\n/** @internal */\nexport class DirtyChecker {\n  private readonly tracked: DirtyCheckProperty[];\n\n  private elapsedFrames: number;\n\n  public constructor() {\n    this.elapsedFrames = 0;\n    this.tracked = [];\n  }\n\n  public createProperty(obj: IObservable, propertyName: string): DirtyCheckProperty {\n    if (DirtyCheckSettings.throw) {\n      throw Reporter.error(800); // TODO: create/organize error code\n    }\n    if (DirtyCheckSettings.warn) {\n      Reporter.write(801);\n    }\n    return new DirtyCheckProperty(this, obj, propertyName);\n  }\n\n  public addProperty(property: DirtyCheckProperty): void {\n    this.tracked.push(property);\n\n    if (this.tracked.length === 1) {\n      PLATFORM.ticker.add(this.check, this);\n    }\n  }\n\n  public removeProperty(property: DirtyCheckProperty): void {\n    this.tracked.splice(this.tracked.indexOf(property), 1);\n    if (this.tracked.length === 0) {\n      PLATFORM.ticker.remove(this.check, this);\n    }\n  }\n\n  public check(delta: number): void {\n    if (DirtyCheckSettings.disabled) {\n      return;\n    }\n    if (++this.elapsedFrames < DirtyCheckSettings.framesPerCheck) {\n      return;\n    }\n    this.elapsedFrames = 0;\n    const tracked = this.tracked;\n    const len = tracked.length;\n    let current: DirtyCheckProperty;\n    let i = 0;\n    for (; i < len; ++i) {\n      current = tracked[i];\n      if (current.isDirty()) {\n        current.flush(LifecycleFlags.fromTick);\n      }\n    }\n  }\n}\n\nexport interface DirtyCheckProperty extends IBindingTargetObserver { }\n\n@propertyObserver()\nexport class DirtyCheckProperty implements DirtyCheckProperty {\n  public obj: IObservable;\n  public oldValue: unknown;\n  public propertyKey: string;\n\n  private readonly dirtyChecker: IDirtyChecker;\n\n  constructor(dirtyChecker: IDirtyChecker, obj: IObservable, propertyKey: string) {\n    this.obj = obj;\n    this.propertyKey = propertyKey;\n\n    this.dirtyChecker = dirtyChecker;\n  }\n\n  public isDirty(): boolean {\n    return this.oldValue !== this.obj[this.propertyKey];\n  }\n\n  public flush(flags: LifecycleFlags): void {\n    const oldValue = this.oldValue;\n    const newValue = this.obj[this.propertyKey];\n\n    this.callSubscribers(newValue, oldValue, flags | LifecycleFlags.updateTargetInstance);\n\n    this.oldValue = newValue;\n  }\n\n  public subscribe(subscriber: IPropertySubscriber): void {\n    if (!this.hasSubscribers()) {\n      this.oldValue = this.obj[this.propertyKey];\n      this.dirtyChecker.addProperty(this);\n    }\n    this.addSubscriber(subscriber);\n  }\n\n  public unsubscribe(subscriber: IPropertySubscriber): void {\n    if (this.removeSubscriber(subscriber) && !this.hasSubscribers()) {\n      this.dirtyChecker.removeProperty(this);\n    }\n  }\n}\n","import { PLATFORM, Primitive } from '@aurelia/kernel';\nimport { IAccessor, ISubscribable, MutationKind } from '../observation';\n\nconst noop = PLATFORM.noop;\n\n// note: string.length is the only property of any primitive that is not a function,\n// so we can hardwire it to that and simply return undefined for anything else\n// note#2: a modified primitive constructor prototype would not work (and really, it shouldn't..)\nexport class PrimitiveObserver implements IAccessor, ISubscribable<MutationKind.instance> {\n  public getValue: () => undefined | number;\n  // removed the error reporter here because technically any primitive property that can get, can also set,\n  // but since that never serves any purpose (e.g. setting string.length doesn't throw but doesn't change the length either),\n  // we could best just leave this as a no-op and so don't need to store the propertyName\n  public setValue: () => void;\n  public subscribe: () => void;\n  public unsubscribe: () => void;\n  public dispose: () => void;\n\n  public doNotCache: boolean = true;\n  public obj: Primitive;\n\n  constructor(obj: Primitive, propertyKey: PropertyKey) {\n    // we don't need to store propertyName because only 'length' can return a useful value\n    if (propertyKey === 'length') {\n      // deliberately not checking for typeof string as users probably still want to know via an error that their string is undefined\n      this.obj = obj;\n      this.getValue = this.getStringLength;\n    } else {\n      this.getValue = this.returnUndefined;\n    }\n  }\n\n  private getStringLength(): number {\n    return (this.obj as string).length;\n  }\n  private returnUndefined(): undefined {\n    return undefined;\n  }\n}\nPrimitiveObserver.prototype.setValue = noop;\nPrimitiveObserver.prototype.subscribe = noop;\nPrimitiveObserver.prototype.unsubscribe = noop;\nPrimitiveObserver.prototype.dispose = noop;\n","import { IBindingTargetAccessor } from '../observation';\n\nexport interface PropertyAccessor extends IBindingTargetAccessor<Record<string, unknown>, string> {}\n\nexport class PropertyAccessor implements PropertyAccessor {\n  public obj: Record<string, unknown>;\n  public propertyKey: string;\n\n  constructor(obj: Record<string, unknown>, propertyKey: string) {\n    this.obj = obj;\n    this.propertyKey = propertyKey;\n  }\n\n  public getValue(): unknown {\n    return this.obj[this.propertyKey];\n  }\n\n  public setValue(value: unknown): void {\n    this.obj[this.propertyKey] = value;\n  }\n}\n","import { DI, IContainer, InterfaceSymbol, IResolver, Primitive, Registration, Reporter } from '@aurelia/kernel';\nimport { ILifecycle } from '../lifecycle';\nimport {\n  AccessorOrObserver,\n  CollectionKind,\n  CollectionObserver,\n  IBindingContext,\n  IBindingTargetAccessor,\n  IBindingTargetObserver,\n  ICollectionObserver,\n  IObservable,\n  IObservedArray,\n  IObservedMap,\n  IObservedSet\n} from '../observation';\nimport { getArrayObserver } from './array-observer';\nimport { createComputedObserver } from './computed-observer';\nimport { IDirtyChecker } from './dirty-checker';\nimport { getMapObserver } from './map-observer';\nimport { PrimitiveObserver } from './primitive-observer';\nimport { PropertyAccessor } from './property-accessor';\nimport { getSetObserver } from './set-observer';\nimport { SetterObserver } from './setter-observer';\n\nconst toStringTag = Object.prototype.toString;\n\nexport interface IObjectObservationAdapter {\n  getObserver(object: unknown, propertyName: string, descriptor: PropertyDescriptor): IBindingTargetObserver;\n}\n\nexport interface IObserverLocator {\n  getObserver(obj: IObservable|IBindingContext, propertyName: string): AccessorOrObserver;\n  getAccessor(obj: IObservable, propertyName: string): IBindingTargetAccessor;\n  addAdapter(adapter: IObjectObservationAdapter): void;\n  getArrayObserver(observedArray: unknown[]): ICollectionObserver<CollectionKind.array>;\n  getMapObserver(observedMap: Map<unknown, unknown>): ICollectionObserver<CollectionKind.map>;\n  getSetObserver(observedSet: Set<unknown>): ICollectionObserver<CollectionKind.set>;\n}\n\nexport const IObserverLocator = DI.createInterface<IObserverLocator>('IObserverLocator').noDefault();\n\nexport interface ITargetObserverLocator {\n  getObserver(lifecycle: ILifecycle, observerLocator: IObserverLocator, obj: unknown, propertyName: string): IBindingTargetAccessor | IBindingTargetObserver;\n  overridesAccessor(obj: unknown, propertyName: string): boolean;\n  handles(obj: unknown): boolean;\n}\nexport const ITargetObserverLocator = DI.createInterface<ITargetObserverLocator>('ITargetObserverLocator').noDefault();\n\nexport interface ITargetAccessorLocator {\n  getAccessor(lifecycle: ILifecycle, obj: unknown, propertyName: string): IBindingTargetAccessor;\n  handles(obj: unknown): boolean;\n}\nexport const ITargetAccessorLocator = DI.createInterface<ITargetAccessorLocator>('ITargetAccessorLocator').noDefault();\n\nfunction getPropertyDescriptor(subject: object, name: string): PropertyDescriptor {\n  let pd = Object.getOwnPropertyDescriptor(subject, name);\n  let proto = Object.getPrototypeOf(subject);\n\n  while (pd === undefined && proto !== null) {\n    pd = Object.getOwnPropertyDescriptor(proto, name);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return pd;\n}\n\n/** @internal */\nexport class ObserverLocator implements IObserverLocator {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [ILifecycle, IDirtyChecker, ITargetObserverLocator, ITargetAccessorLocator];\n\n  private readonly adapters: IObjectObservationAdapter[];\n  private readonly dirtyChecker: IDirtyChecker;\n  private readonly lifecycle: ILifecycle;\n  private readonly targetObserverLocator: ITargetObserverLocator;\n  private readonly targetAccessorLocator: ITargetAccessorLocator;\n\n  constructor(\n    lifecycle: ILifecycle,\n    dirtyChecker: IDirtyChecker,\n    targetObserverLocator: ITargetObserverLocator,\n    targetAccessorLocator: ITargetAccessorLocator\n  ) {\n    this.adapters = [];\n    this.dirtyChecker = dirtyChecker;\n    this.lifecycle = lifecycle;\n    this.targetObserverLocator = targetObserverLocator;\n    this.targetAccessorLocator = targetAccessorLocator;\n  }\n\n  public static register(container: IContainer): IResolver<IObserverLocator> {\n    return Registration.singleton(IObserverLocator, this).register(container);\n  }\n\n  public getObserver(obj: IObservable|IBindingContext, propertyName: string): AccessorOrObserver {\n    if (isBindingContext(obj)) {\n      return obj.getObservers().getOrCreate(obj, propertyName);\n    }\n    let observersLookup = obj.$observers;\n    let observer: AccessorOrObserver & { doNotCache?: boolean };\n\n    if (observersLookup && propertyName in observersLookup) {\n      return observersLookup[propertyName];\n    }\n\n    observer = this.createPropertyObserver(obj, propertyName);\n\n    if (!observer.doNotCache) {\n      if (observersLookup === undefined) {\n        observersLookup = this.getOrCreateObserversLookup(obj);\n      }\n\n      observersLookup[propertyName] = observer;\n    }\n\n    return observer;\n  }\n\n  public addAdapter(adapter: IObjectObservationAdapter): void {\n    this.adapters.push(adapter);\n  }\n\n  public getAccessor(obj: IObservable, propertyName: string): IBindingTargetAccessor {\n    if (this.targetAccessorLocator.handles(obj)) {\n      if (this.targetObserverLocator.overridesAccessor(obj, propertyName)) {\n        return this.getObserver(obj, propertyName);\n      }\n      return this.targetAccessorLocator.getAccessor(this.lifecycle, obj, propertyName);\n    }\n\n    return new PropertyAccessor(obj, propertyName);\n  }\n\n  public getArrayObserver(observedArray: IObservedArray): ICollectionObserver<CollectionKind.array> {\n    return getArrayObserver(this.lifecycle, observedArray);\n  }\n\n  public getMapObserver(observedMap: IObservedMap): ICollectionObserver<CollectionKind.map>  {\n    return getMapObserver(this.lifecycle, observedMap);\n  }\n\n  public getSetObserver(observedSet: IObservedSet): ICollectionObserver<CollectionKind.set>  {\n    return getSetObserver(this.lifecycle, observedSet);\n  }\n\n  private getOrCreateObserversLookup(obj: IObservable): Record<string, AccessorOrObserver | IBindingTargetObserver> {\n    return obj.$observers || this.createObserversLookup(obj);\n  }\n\n  private createObserversLookup(obj: IObservable): Record<string, IBindingTargetObserver> {\n    const value: Record<string, IBindingTargetObserver> = {};\n    if (!Reflect.defineProperty(obj, '$observers', {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: value\n    })) {\n      Reporter.write(0, obj);\n    }\n    return value;\n  }\n\n  private getAdapterObserver(obj: IObservable, propertyName: string, descriptor: PropertyDescriptor): IBindingTargetObserver | null {\n    for (let i = 0, ii = this.adapters.length; i < ii; i++) {\n      const adapter = this.adapters[i];\n      const observer = adapter.getObserver(obj, propertyName, descriptor);\n      if (observer) {\n        return observer;\n      }\n    }\n    return null;\n  }\n\n  private createPropertyObserver(obj: IObservable, propertyName: string): AccessorOrObserver {\n    if (!(obj instanceof Object)) {\n      return new PrimitiveObserver(obj as unknown as Primitive, propertyName) as IBindingTargetAccessor;\n    }\n\n    let isNode = false;\n    if (this.targetObserverLocator.handles(obj)) {\n      const observer = this.targetObserverLocator.getObserver(this.lifecycle, this, obj, propertyName);\n      if (observer !== null) {\n        return observer;\n      }\n      if (observer !== null) {\n        return observer;\n      }\n      isNode = true;\n    }\n\n    const tag = toStringTag.call(obj);\n    switch (tag) {\n      case '[object Array]':\n        if (propertyName === 'length') {\n          return this.getArrayObserver(obj as IObservedArray).getLengthObserver();\n        }\n        return this.dirtyChecker.createProperty(obj, propertyName);\n      case '[object Map]':\n        if (propertyName === 'size') {\n          return this.getMapObserver(obj as IObservedMap).getLengthObserver();\n        }\n        return this.dirtyChecker.createProperty(obj, propertyName);\n      case '[object Set]':\n        if (propertyName === 'size') {\n          return this.getSetObserver(obj as IObservedSet).getLengthObserver();\n        }\n        return this.dirtyChecker.createProperty(obj, propertyName);\n    }\n\n    const descriptor = getPropertyDescriptor(obj, propertyName) as PropertyDescriptor & {\n      get: PropertyDescriptor['get'] & { getObserver(obj: IObservable): IBindingTargetObserver };\n    };\n\n    if (descriptor && (descriptor.get || descriptor.set)) {\n      if (descriptor.get && descriptor.get.getObserver) {\n        return descriptor.get.getObserver(obj);\n      }\n\n      // attempt to use an adapter before resorting to dirty checking.\n      const adapterObserver = this.getAdapterObserver(obj, propertyName, descriptor);\n      if (adapterObserver) {\n        return adapterObserver;\n      }\n      if (isNode) {\n        // TODO: use MutationObserver\n        return this.dirtyChecker.createProperty(obj, propertyName);\n      }\n\n      return createComputedObserver(this, this.dirtyChecker, this.lifecycle, obj, propertyName, descriptor);\n    }\n    return new SetterObserver(obj, propertyName);\n  }\n}\n\nexport function getCollectionObserver(lifecycle: ILifecycle, collection: IObservedMap | IObservedSet | IObservedArray): CollectionObserver {\n  switch (toStringTag.call(collection)) {\n    case '[object Array]':\n      return getArrayObserver(lifecycle, collection as IObservedArray);\n    case '[object Map]':\n      return getMapObserver(lifecycle, collection as IObservedMap);\n    case '[object Set]':\n      return getSetObserver(lifecycle, collection as IObservedSet);\n  }\n  return null;\n}\n\nfunction isBindingContext(obj: unknown): obj is IBindingContext {\n  return (obj as IBindingContext).$synthetic === true;\n}\n","import { IIndexable, PLATFORM } from '@aurelia/kernel';\nimport { IPropertyObserver, LifecycleFlags } from '../observation';\nimport { propertyObserver } from './property-observer';\n\nconst noop = PLATFORM.noop;\n\nexport interface SelfObserver extends IPropertyObserver<IIndexable, string> {}\n\n@propertyObserver()\nexport class SelfObserver implements SelfObserver {\n  public obj: IIndexable;\n  public propertyKey: string;\n  public currentValue: unknown;\n\n  private readonly callback: (newValue: unknown, oldValue: unknown) => unknown;\n\n  constructor(\n    instance: object,\n    propertyName: string,\n    callbackName: string\n  ) {\n      this.obj = instance;\n      this.propertyKey = propertyName;\n      this.currentValue = instance[propertyName];\n      this.callback = callbackName in instance\n        ? instance[callbackName].bind(instance)\n        : noop;\n  }\n\n  public getValue(): unknown {\n    return this.currentValue;\n  }\n\n  public setValue(newValue: unknown, flags: LifecycleFlags): void {\n    const currentValue = this.currentValue;\n\n    if (currentValue !== newValue) {\n      this.currentValue = newValue;\n\n      if (!(flags & LifecycleFlags.fromBind)) {\n        const coercedValue = this.callback(newValue, currentValue);\n\n        if (coercedValue !== undefined) {\n          this.currentValue = newValue = coercedValue;\n        }\n\n        this.callSubscribers(newValue, currentValue, flags);\n      }\n    }\n  }\n}\n","import { IRegistry } from '@aurelia/kernel';\nimport { Binding } from '../../binding/binding';\nimport { BindingMode } from '../../binding/binding-mode';\nimport { IScope, LifecycleFlags } from '../../observation';\nimport { BindingBehaviorResource } from '../binding-behavior';\n\nconst { oneTime, toView, fromView, twoWay } = BindingMode;\n\nexport type WithMode = { mode: BindingMode; originalMode?: BindingMode };\n\nexport abstract class BindingModeBehavior {\n  private readonly mode: BindingMode;\n\n  constructor(mode: BindingMode) {\n    this.mode = mode;\n  }\n\n  public bind(flags: LifecycleFlags, scope: IScope, binding: Binding & WithMode): void {\n    binding.originalMode = binding.mode;\n    binding.mode = this.mode;\n  }\n\n  public unbind(flags: LifecycleFlags, scope: IScope, binding: Binding & WithMode): void {\n    binding.mode = binding.originalMode;\n    binding.originalMode = null;\n  }\n}\n\nexport class OneTimeBindingBehavior extends BindingModeBehavior {\n  public static register: IRegistry['register'];\n\n  constructor() {\n    super(oneTime);\n  }\n}\nBindingBehaviorResource.define('oneTime', OneTimeBindingBehavior);\n\nexport class ToViewBindingBehavior extends BindingModeBehavior {\n  public static register: IRegistry['register'];\n\n  constructor() {\n    super(toView);\n  }\n}\nBindingBehaviorResource.define('toView', ToViewBindingBehavior);\n\nexport class FromViewBindingBehavior extends BindingModeBehavior {\n  public static register: IRegistry['register'];\n\n  constructor() {\n    super(fromView);\n  }\n}\nBindingBehaviorResource.define('fromView', FromViewBindingBehavior);\n\nexport class TwoWayBindingBehavior extends BindingModeBehavior {\n  public static register: IRegistry['register'];\n\n  constructor() {\n    super(twoWay);\n  }\n}\nBindingBehaviorResource.define('twoWay', TwoWayBindingBehavior);\n","import { IRegistry, PLATFORM } from '@aurelia/kernel';\nimport { Binding, IBinding } from '../../binding/binding';\nimport { BindingMode } from '../../binding/binding-mode';\nimport { IScope, LifecycleFlags } from '../../observation';\nimport { BindingBehaviorResource } from '../binding-behavior';\n\nexport type DebounceableBinding = IBinding & {\n  debouncedMethod: ((newValue: unknown, oldValue: unknown, flags: LifecycleFlags) => void) & { originalName: string };\n  debounceState: {\n    callContextToDebounce: LifecycleFlags;\n    delay: number;\n    timeoutId: number;\n    oldValue: unknown;\n  };\n};\n\nconst unset = {};\n\n/** @internal */\nexport function debounceCallSource(this: DebounceableBinding, newValue: unknown, oldValue: unknown, flags: LifecycleFlags): void {\n  const state = this.debounceState;\n  PLATFORM.global.clearTimeout(state.timeoutId);\n  state.timeoutId = PLATFORM.global.setTimeout(() => { this.debouncedMethod(newValue, oldValue, flags); }, state.delay);\n}\n\n/** @internal */\nexport function debounceCall(this: DebounceableBinding, newValue: unknown, oldValue: unknown, flags: LifecycleFlags): void {\n  const state = this.debounceState;\n  PLATFORM.global.clearTimeout(state.timeoutId);\n  if (!(flags & state.callContextToDebounce)) {\n    state.oldValue = unset;\n    this.debouncedMethod(newValue, oldValue, flags);\n    return;\n  }\n  if (state.oldValue === unset) {\n    state.oldValue = oldValue;\n  }\n  const timeoutId = PLATFORM.global.setTimeout(\n    () => {\n      const ov = state.oldValue;\n      state.oldValue = unset;\n      this.debouncedMethod(newValue, ov, flags);\n    },\n    state.delay\n  );\n  state.timeoutId = timeoutId;\n}\n\nconst fromView = BindingMode.fromView;\n\nexport class DebounceBindingBehavior {\n  public static register: IRegistry['register'];\n\n  public bind(flags: LifecycleFlags, scope: IScope, binding: DebounceableBinding, delay: number = 200): void {\n    let methodToDebounce;\n    let callContextToDebounce;\n    let debouncer;\n\n    if (binding instanceof Binding) {\n      methodToDebounce = 'handleChange';\n      debouncer = debounceCall;\n      callContextToDebounce = binding.mode & fromView ? LifecycleFlags.updateSourceExpression : LifecycleFlags.updateTargetInstance;\n    } else {\n      methodToDebounce = 'callSource';\n      debouncer = debounceCallSource;\n      callContextToDebounce = LifecycleFlags.updateTargetInstance;\n    }\n\n    // stash the original method and it's name.\n    // note: a generic name like \"originalMethod\" is not used to avoid collisions\n    // with other binding behavior types.\n    binding.debouncedMethod = binding[methodToDebounce];\n    binding.debouncedMethod.originalName = methodToDebounce;\n\n    // replace the original method with the debouncing version.\n    binding[methodToDebounce] = debouncer;\n\n    // create the debounce state.\n    binding.debounceState = {\n      callContextToDebounce,\n      delay,\n      timeoutId: 0,\n      oldValue: unset\n    };\n  }\n\n  public unbind(flags: LifecycleFlags, scope: IScope, binding: DebounceableBinding): void {\n    // restore the state of the binding.\n    const methodToRestore = binding.debouncedMethod.originalName;\n    binding[methodToRestore] = binding.debouncedMethod;\n    binding.debouncedMethod = null;\n    PLATFORM.global.clearTimeout(binding.debounceState.timeoutId);\n    binding.debounceState = null;\n  }\n}\nBindingBehaviorResource.define('debounce', DebounceBindingBehavior);\n","import { InterfaceSymbol, IRegistry, Reporter } from '@aurelia/kernel';\nimport { Binding } from '../../binding/binding';\nimport { IScope, LifecycleFlags } from '../../observation';\nimport { ISignaler } from '../../observation/signaler';\nimport { BindingBehaviorResource } from '../binding-behavior';\n\nexport type SignalableBinding = Binding & {\n  signal: string | string[];\n};\n\nexport class SignalBindingBehavior {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [ISignaler];\n\n  public static register: IRegistry['register'];\n\n  private readonly signaler: ISignaler;\n\n  constructor(signaler: ISignaler) {\n    this.signaler = signaler;\n  }\n\n  public bind(flags: LifecycleFlags, scope: IScope, binding: SignalableBinding, ...args: string[]): void {\n    if (!binding.updateTarget) {\n      throw Reporter.error(11);\n    }\n\n    if (arguments.length === 4) {\n      const name = args[0];\n      this.signaler.addSignalListener(name, binding);\n      binding.signal = name;\n    } else if (arguments.length > 4) {\n      const names = Array.prototype.slice.call(arguments, 3);\n      let i = names.length;\n\n      while (i--) {\n        const name = names[i];\n        this.signaler.addSignalListener(name, binding);\n      }\n\n      binding.signal = names;\n    } else {\n      throw Reporter.error(12);\n    }\n  }\n\n  public unbind(flags: LifecycleFlags, scope: IScope, binding: SignalableBinding): void {\n    const name = binding.signal;\n    binding.signal = null;\n\n    if (Array.isArray(name)) {\n      const names = name;\n      let i = names.length;\n\n      while (i--) {\n        this.signaler.removeSignalListener(names[i], binding);\n      }\n    } else {\n      this.signaler.removeSignalListener(name, binding);\n    }\n  }\n}\nBindingBehaviorResource.define('signal', SignalBindingBehavior);\n","import { IRegistry, PLATFORM } from '@aurelia/kernel';\nimport { Binding, IBinding } from '../../binding/binding';\nimport { BindingMode } from '../../binding/binding-mode';\nimport { IScope, LifecycleFlags } from '../../observation';\nimport { BindingBehaviorResource } from '../binding-behavior';\n\nexport type ThrottleableBinding = IBinding & {\n  throttledMethod: ((value: unknown) => unknown) & { originalName: string };\n  throttleState: {\n    delay: number;\n    timeoutId: number;\n    last: number;\n    newValue?: unknown;\n  };\n};\n\n/** @internal */\nexport function throttle(this: ThrottleableBinding, newValue: unknown): void {\n  const state = this.throttleState;\n  const elapsed = +new Date() - state.last;\n\n  if (elapsed >= state.delay) {\n    PLATFORM.global.clearTimeout(state.timeoutId);\n    state.timeoutId = -1;\n    state.last = +new Date();\n    this.throttledMethod(newValue);\n    return;\n  }\n\n  state.newValue = newValue;\n\n  if (state.timeoutId === -1) {\n    const timeoutId = PLATFORM.global.setTimeout(\n      () => {\n        state.timeoutId = -1;\n        state.last = +new Date();\n        this.throttledMethod(state.newValue);\n      },\n      state.delay - elapsed\n    );\n    state.timeoutId = timeoutId;\n  }\n}\n\nexport class ThrottleBindingBehavior {\n  public static register: IRegistry['register'];\n\n  public bind(flags: LifecycleFlags, scope: IScope, binding: ThrottleableBinding, delay: number = 200): void {\n    let methodToThrottle: string;\n\n    if (binding instanceof Binding) {\n      if (binding.mode === BindingMode.twoWay) {\n        methodToThrottle = 'updateSource';\n      } else {\n        methodToThrottle = 'updateTarget';\n      }\n    } else {\n      methodToThrottle = 'callSource';\n    }\n\n    // stash the original method and it's name.\n    // note: a generic name like \"originalMethod\" is not used to avoid collisions\n    // with other binding behavior types.\n    binding.throttledMethod = binding[methodToThrottle];\n    binding.throttledMethod.originalName = methodToThrottle;\n\n    // replace the original method with the throttling version.\n    binding[methodToThrottle] = throttle;\n\n    // create the throttle state.\n    binding.throttleState = {\n      delay: delay,\n      last: 0,\n      timeoutId: -1\n    };\n  }\n\n  public unbind(flags: LifecycleFlags, scope: IScope, binding: ThrottleableBinding): void {\n    // restore the state of the binding.\n    const methodToRestore = binding.throttledMethod.originalName;\n    binding[methodToRestore] = binding.throttledMethod;\n    binding.throttledMethod = null;\n    PLATFORM.global.clearTimeout(binding.throttleState.timeoutId);\n    binding.throttleState = null;\n  }\n}\nBindingBehaviorResource.define('throttle', ThrottleBindingBehavior);\n","import {\n  Constructable,\n  DI,\n  Immutable,\n  IRegistry,\n  IResourceDefinition,\n  Omit,\n  PLATFORM,\n  ResourceDescription,\n  ResourcePartDescription\n} from '@aurelia/kernel';\nimport { ForOfStatement, Interpolation, IsBindingBehavior } from './binding/ast';\nimport { BindingMode } from './binding/binding-mode';\nimport { CustomElementHost, ICustomElement } from './resources/custom-element';\n\n/** @internal */\nexport const customElementName = 'custom-element';\n/** @internal */\nexport function customElementKey(name: string): string {\n  return `${customElementName}:${name}`;\n}\n/** @internal */\nexport function customElementBehavior(node: unknown): ICustomElement | null {\n  return (node as CustomElementHost).$customElement === undefined ? null : (node as CustomElementHost).$customElement;\n}\n\n/** @internal */\nexport const customAttributeName = 'custom-attribute';\n/** @internal */\nexport function customAttributeKey(name: string): string {\n  return `${customAttributeName}:${name}`;\n}\n\nexport type IElementHydrationOptions = { parts?: Record<string, TemplateDefinition> };\n\nexport type BindableSource = Omit<IBindableDescription, 'property'>;\n\nexport interface IBindableDescription {\n  mode?: BindingMode;\n  callback?: string;\n  attribute?: string;\n  property?: string;\n}\n\n/**\n * TargetedInstructionType enum values become the property names for the associated renderers when they are injected\n * into the `Renderer`.\n *\n * Additional instruction types can be added as long as they are 2 characters long and do not clash with existing ones.\n *\n * By convention, the instruction types for a particular runtime start with the same first letter, and the second letter\n * starts counting from letter `a`. The standard runtime instruction types all start with the letter `r`.\n */\nexport const enum TargetedInstructionType {\n  hydrateElement = 'ra',\n  hydrateAttribute = 'rb',\n  hydrateTemplateController = 'rc',\n  hydrateLetElement = 'rd',\n  setProperty = 're',\n  interpolation = 'rf',\n  propertyBinding = 'rg',\n  callBinding = 'rh',\n  letBinding = 'ri',\n  refBinding = 'rj',\n  iteratorBinding = 'rk',\n}\n\nexport interface IBuildInstruction {\n  required: boolean;\n  compiler?: string;\n}\n\nexport interface ITemplateDefinition extends IResourceDefinition {\n  cache?: '*' | number;\n  template?: unknown;\n  instructions?: ITargetedInstruction[][];\n  dependencies?: IRegistry[];\n  build?: IBuildInstruction;\n  surrogates?: ITargetedInstruction[];\n  bindables?: Record<string, IBindableDescription>;\n  containerless?: boolean;\n  shadowOptions?: { mode: 'open' | 'closed' };\n  hasSlots?: boolean;\n}\n\nexport type TemplateDefinition = ResourceDescription<ITemplateDefinition>;\n\nexport type TemplatePartDefinitions = Record<string, ResourcePartDescription<ITemplateDefinition>>;\nexport type BindableDefinitions = Record<string, Immutable<IBindableDescription>>;\n\nexport interface IAttributeDefinition extends IResourceDefinition {\n  defaultBindingMode?: BindingMode;\n  aliases?: string[];\n  isTemplateController?: boolean;\n  hasDynamicOptions?: boolean;\n  bindables?: Record<string, IBindableDescription>;\n}\n\nexport type AttributeDefinition = Immutable<Required<IAttributeDefinition>> | null;\n\nexport type InstructionTypeName = string;\n\nexport const ITargetedInstruction = DI.createInterface<ITargetedInstruction>('createInterface').noDefault();\nexport interface ITargetedInstruction {\n  type: InstructionTypeName;\n}\n\nexport type NodeInstruction =\n  IHydrateElementInstruction |\n  IHydrateTemplateController |\n  IHydrateLetElementInstruction;\n\nexport type AttributeInstruction =\n  IInterpolationInstruction |\n  IPropertyBindingInstruction |\n  IIteratorBindingInstruction |\n  ICallBindingInstruction |\n  IRefBindingInstruction |\n  ISetPropertyInstruction |\n  ILetBindingInstruction |\n  IHydrateAttributeInstruction;\n\nexport type TargetedInstruction = NodeInstruction | AttributeInstruction;\n\n// TODO: further improve specificity and integrate with the definitions;\nexport type InstructionRow = [TargetedInstruction, ...AttributeInstruction[]];\n\nexport function isTargetedInstruction(value: unknown): value is TargetedInstruction {\n  const type = (value as { type?: string }).type;\n  return typeof type === 'string' && type.length === 2;\n}\n\nexport interface IInterpolationInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.interpolation;\n  from: string | Interpolation;\n  to: string;\n}\n\nexport interface IPropertyBindingInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.propertyBinding;\n  mode: BindingMode;\n  from: string | IsBindingBehavior;\n  to: string;\n  oneTime?: boolean;\n}\n\nexport interface IIteratorBindingInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.iteratorBinding;\n  from: string | ForOfStatement;\n  to: string;\n}\n\nexport interface ICallBindingInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.callBinding;\n  from: string | IsBindingBehavior;\n  to: string;\n}\n\nexport interface IRefBindingInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.refBinding;\n  from: string | IsBindingBehavior;\n}\n\nexport interface ISetPropertyInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.setProperty;\n  value: unknown;\n  to: string;\n}\n\nexport interface IHydrateElementInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.hydrateElement;\n  res: string;\n  instructions: ITargetedInstruction[];\n  parts?: Record<string, ITemplateDefinition>;\n}\n\nexport interface IHydrateAttributeInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.hydrateAttribute;\n  res: string;\n  instructions: ITargetedInstruction[];\n}\n\nexport interface IHydrateTemplateController extends ITargetedInstruction {\n  type: TargetedInstructionType.hydrateTemplateController;\n  res: string;\n  instructions: ITargetedInstruction[];\n  def: ITemplateDefinition;\n  link?: boolean;\n}\n\nexport interface IHydrateLetElementInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.hydrateLetElement;\n  instructions: ILetBindingInstruction[];\n  toViewModel: boolean;\n}\n\nexport interface ILetBindingInstruction extends ITargetedInstruction {\n  type: TargetedInstructionType.letBinding;\n  from: string | IsBindingBehavior | Interpolation;\n  to: string;\n}\n\n/** @internal */\nexport const buildRequired: IBuildInstruction = Object.freeze({\n  required: true,\n  compiler: 'default'\n});\n\nconst buildNotRequired: IBuildInstruction = Object.freeze({\n  required: false,\n  compiler: 'default'\n});\n\n// Note: this is a little perf thing; having one predefined class with the properties always\n// assigned in the same order ensures the browser can keep reusing the same generated hidden\n// class\nclass DefaultTemplateDefinition implements Required<ITemplateDefinition> {\n  public name: ITemplateDefinition['name'];\n  public cache: ITemplateDefinition['cache'];\n  public template: ITemplateDefinition['template'];\n  public instructions: ITemplateDefinition['instructions'];\n  public dependencies: ITemplateDefinition['dependencies'];\n  public build: ITemplateDefinition['build'];\n  public surrogates: ITemplateDefinition['surrogates'];\n  public bindables: ITemplateDefinition['bindables'];\n  public containerless: ITemplateDefinition['containerless'];\n  public shadowOptions: ITemplateDefinition['shadowOptions'];\n  public hasSlots: ITemplateDefinition['hasSlots'];\n\n  constructor() {\n    this.name = 'unnamed';\n    this.template = null;\n    this.cache = 0;\n    this.build = buildNotRequired;\n    this.bindables = PLATFORM.emptyObject;\n    this.instructions = PLATFORM.emptyArray as this['instructions'];\n    this.dependencies = PLATFORM.emptyArray as this['dependencies'];\n    this.surrogates = PLATFORM.emptyArray as this['surrogates'];\n    this.containerless = false;\n    this.shadowOptions = null;\n    this.hasSlots = false;\n  }\n}\n\nconst templateDefinitionAssignables = [\n  'name',\n  'template',\n  'cache',\n  'build',\n  'containerless',\n  'shadowOptions',\n  'hasSlots'\n];\n\nconst templateDefinitionArrays = [\n  'instructions',\n  'dependencies',\n  'surrogates'\n];\n\nexport type CustomElementConstructor = Constructable & {\n  containerless?: TemplateDefinition['containerless'];\n  shadowOptions?: TemplateDefinition['shadowOptions'];\n  bindables?: TemplateDefinition['bindables'];\n};\n\nexport function buildTemplateDefinition(\n  ctor: CustomElementConstructor,\n  name: string): TemplateDefinition;\nexport function buildTemplateDefinition(\n  ctor: null,\n  def: Immutable<ITemplateDefinition>): TemplateDefinition;\nexport function buildTemplateDefinition(\n  ctor: CustomElementConstructor | null,\n  nameOrDef: string | Immutable<ITemplateDefinition>): TemplateDefinition;\n// tslint:disable-next-line:parameters-max-number\nexport function buildTemplateDefinition(\n  ctor: CustomElementConstructor | null,\n  name: string | null,\n  template: unknown,\n  cache?: number | '*' | null,\n  build?: IBuildInstruction | boolean | null,\n  bindables?: Record<string, IBindableDescription> | null,\n  instructions?: ReadonlyArray<ReadonlyArray<ITargetedInstruction>> | null,\n  dependencies?: ReadonlyArray<unknown> | null,\n  surrogates?: ReadonlyArray<ITargetedInstruction> | null,\n  containerless?: boolean | null,\n  shadowOptions?: { mode: 'open' | 'closed' } | null,\n  hasSlots?: boolean | null): TemplateDefinition;\n// tslint:disable-next-line:parameters-max-number // TODO: Reduce complexity (currently at 64)\nexport function buildTemplateDefinition(\n  ctor: CustomElementConstructor | null,\n  nameOrDef: string | Immutable<ITemplateDefinition> | null,\n  template?: unknown | null,\n  cache?: number | '*' | null,\n  build?: IBuildInstruction | boolean | null,\n  bindables?: Record<string, IBindableDescription> | null,\n  instructions?: ReadonlyArray<ReadonlyArray<ITargetedInstruction>> | null,\n  dependencies?: ReadonlyArray<IRegistry> | null,\n  surrogates?: ReadonlyArray<ITargetedInstruction> | null,\n  containerless?: boolean | null,\n  shadowOptions?: { mode: 'open' | 'closed' } | null,\n  hasSlots?: boolean | null): TemplateDefinition {\n\n  const def = new DefaultTemplateDefinition();\n\n  // all cases fall through intentionally\n  const argLen = arguments.length;\n  switch (argLen) {\n    case 12: if (hasSlots !== null) def.hasSlots = hasSlots;\n    case 11: if (shadowOptions !== null) def.shadowOptions = shadowOptions;\n    case 10: if (containerless !== null) def.containerless = containerless;\n    case 9: if (surrogates !== null) def.surrogates = PLATFORM.toArray(surrogates);\n    case 8: if (dependencies !== null) def.dependencies = PLATFORM.toArray(dependencies);\n    case 7: if (instructions !== null) def.instructions = PLATFORM.toArray(instructions) as ITargetedInstruction[][];\n    case 6: if (bindables !== null) def.bindables = { ...bindables };\n    case 5: if (build !== null) def.build = build === true ? buildRequired : build === false ? buildNotRequired : { ...build };\n    case 4: if (cache !== null) def.cache = cache;\n    case 3: if (template !== null) def.template = template;\n    case 2:\n      if (ctor !== null) {\n        if (ctor['bindables']) {\n          def.bindables = { ...ctor.bindables };\n        }\n        if (ctor['containerless']) {\n          def.containerless = ctor.containerless;\n        }\n        if (ctor['shadowOptions']) {\n          def.shadowOptions = ctor.shadowOptions as unknown as { mode: 'open' | 'closed' };\n        }\n      }\n      if (typeof nameOrDef === 'string') {\n        if (nameOrDef.length > 0) {\n          def.name = nameOrDef;\n        }\n      } else if (nameOrDef !== null) {\n        templateDefinitionAssignables.forEach(prop => {\n          if (nameOrDef[prop]) {\n            def[prop] = nameOrDef[prop];\n          }\n        });\n        templateDefinitionArrays.forEach(prop => {\n          if (nameOrDef[prop]) {\n            def[prop] = PLATFORM.toArray(nameOrDef[prop]);\n          }\n        });\n        if (nameOrDef['bindables']) {\n          if (def.bindables === PLATFORM.emptyObject) {\n            def.bindables = { ...nameOrDef.bindables };\n          } else {\n            Object.assign(def.bindables, nameOrDef.bindables);\n          }\n        }\n      }\n  }\n\n  // special handling for invocations that quack like a @customElement decorator\n  if (argLen === 2 && ctor !== null && (typeof nameOrDef === 'string' || !('build' in nameOrDef))) {\n    def.build = buildRequired;\n  }\n\n  return def;\n}\n","import { Profiler, Tracer, Writable } from '@aurelia/kernel';\nimport { Hooks, IView, State } from '../lifecycle';\nimport { LifecycleFlags } from '../observation';\nimport { ICustomAttribute } from '../resources/custom-attribute';\nimport { ICustomElement } from '../resources/custom-element';\n\nconst slice = Array.prototype.slice;\n\nconst { enter, leave } = Profiler.createTimer('AttachLifecycle');\n\n/** @internal */\n// tslint:disable-next-line:no-ignored-initial-value\nexport function $attachAttribute(this: Writable<ICustomAttribute>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$attachAttribute`, slice.call(arguments)); }\n  if (Profiler.enabled) { enter(); }\n  if (this.$state & State.isAttached) {\n    if (Profiler.enabled) { leave(); }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return;\n  }\n  const lifecycle = this.$lifecycle;\n  lifecycle.beginAttach();\n  // add isAttaching flag\n  this.$state |= State.isAttaching;\n  flags |= LifecycleFlags.fromAttach;\n\n  const hooks = this.$hooks;\n\n  if (hooks & Hooks.hasAttaching) {\n    this.attaching(flags);\n  }\n\n  // add isAttached flag, remove isAttaching flag\n  this.$state |= State.isAttached;\n  this.$state &= ~State.isAttaching;\n\n  if (hooks & Hooks.hasAttached) {\n    lifecycle.enqueueAttached(this as Required<typeof this>);\n  }\n  lifecycle.endAttach(flags);\n  if (Profiler.enabled) { leave(); }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\n// tslint:disable-next-line:no-ignored-initial-value\nexport function $attachElement(this: Writable<ICustomElement>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$attachElement`, slice.call(arguments)); }\n  if (Profiler.enabled) { enter(); }\n  if (this.$state & State.isAttached) {\n    if (Profiler.enabled) { leave(); }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return;\n  }\n  const lifecycle = this.$lifecycle;\n  lifecycle.beginAttach();\n  // add isAttaching flag\n  this.$state |= State.isAttaching;\n  flags |= LifecycleFlags.fromAttach;\n\n  const hooks = this.$hooks;\n\n  if (hooks & Hooks.hasAttaching) {\n    this.attaching(flags);\n  }\n\n  let current = this.$attachableHead;\n  while (current !== null) {\n    current.$attach(flags);\n    current = current.$nextAttach;\n  }\n\n  lifecycle.enqueueMount(this);\n\n  // add isAttached flag, remove isAttaching flag\n  this.$state |= State.isAttached;\n  this.$state &= ~State.isAttaching;\n\n  if (hooks & Hooks.hasAttached) {\n    lifecycle.enqueueAttached(this as Required<typeof this>);\n  }\n  lifecycle.endAttach(flags);\n  if (Profiler.enabled) { leave(); }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $attachView(this: Writable<IView>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$attachView`, slice.call(arguments)); }\n  if (this.$state & State.isAttached) {\n    if (Tracer.enabled) { Tracer.leave(); }\n    return;\n  }\n  // add isAttaching flag\n  this.$state |= State.isAttaching;\n  flags |= LifecycleFlags.fromAttach;\n\n  let current = this.$attachableHead;\n  while (current !== null) {\n    current.$attach(flags);\n    current = current.$nextAttach;\n  }\n\n  this.$lifecycle.enqueueMount(this);\n\n  // add isAttached flag, remove isAttaching flag\n  this.$state |= State.isAttached;\n  this.$state &= ~State.isAttaching;\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\n// tslint:disable-next-line:no-ignored-initial-value\nexport function $detachAttribute(this: Writable<ICustomAttribute>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$detachAttribute`, slice.call(arguments)); }\n  if (this.$state & State.isAttached) {\n    const lifecycle = this.$lifecycle;\n    lifecycle.beginDetach();\n    // add isDetaching flag\n    this.$state |= State.isDetaching;\n    flags |= LifecycleFlags.fromDetach;\n\n    const hooks = this.$hooks;\n    if (hooks & Hooks.hasDetaching) {\n      this.detaching(flags);\n    }\n\n    // remove isAttached and isDetaching flags\n    this.$state &= ~(State.isAttached | State.isDetaching);\n\n    if (hooks & Hooks.hasDetached) {\n      lifecycle.enqueueDetached(this as Required<typeof this>);\n    }\n    lifecycle.endDetach(flags);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\n// tslint:disable-next-line:no-ignored-initial-value\nexport function $detachElement(this: Writable<ICustomElement>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$detachElement`, slice.call(arguments)); }\n  if (this.$state & State.isAttached) {\n    const lifecycle = this.$lifecycle;\n    lifecycle.beginDetach();\n    // add isDetaching flag\n    this.$state |= State.isDetaching;\n    flags |= LifecycleFlags.fromDetach;\n\n    // Only unmount if either:\n    // - No parent view/element is queued for unmount yet, or\n    // - Aurelia is stopping (in which case all nodes need to return to their fragments for a clean mount on next start)\n    if (((flags & LifecycleFlags.parentUnmountQueued) ^ LifecycleFlags.parentUnmountQueued) | (flags & LifecycleFlags.fromStopTask)) {\n      lifecycle.enqueueUnmount(this);\n      flags |= LifecycleFlags.parentUnmountQueued;\n    }\n\n    const hooks = this.$hooks;\n    if (hooks & Hooks.hasDetaching) {\n      this.detaching(flags);\n    }\n\n    let current = this.$attachableTail;\n    while (current !== null) {\n      current.$detach(flags);\n      current = current.$prevAttach;\n    }\n\n    // remove isAttached and isDetaching flags\n    this.$state &= ~(State.isAttached | State.isDetaching);\n\n    if (hooks & Hooks.hasDetached) {\n      lifecycle.enqueueDetached(this as Required<typeof this>);\n    }\n    lifecycle.endDetach(flags);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $detachView(this: Writable<IView>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$detachView`, slice.call(arguments)); }\n  if (this.$state & State.isAttached) {\n    // add isDetaching flag\n    this.$state |= State.isDetaching;\n    flags |= LifecycleFlags.fromDetach;\n\n    // Only unmount if either:\n    // - No parent view/element is queued for unmount yet, or\n    // - Aurelia is stopping (in which case all nodes need to return to their fragments for a clean mount on next start)\n    if (((flags & LifecycleFlags.parentUnmountQueued) ^ LifecycleFlags.parentUnmountQueued) | (flags & LifecycleFlags.fromStopTask)) {\n      this.$lifecycle.enqueueUnmount(this);\n      flags |= LifecycleFlags.parentUnmountQueued;\n    }\n\n    let current = this.$attachableTail;\n    while (current !== null) {\n      current.$detach(flags);\n      current = current.$prevAttach;\n    }\n\n    // remove isAttached and isDetaching flags\n    this.$state &= ~(State.isAttached | State.isDetaching);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $cacheAttribute(this: Writable<ICustomAttribute>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$cacheAttribute`, slice.call(arguments)); }\n  flags |= LifecycleFlags.fromCache;\n  if (this.$hooks & Hooks.hasCaching) {\n    this.caching(flags);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $cacheElement(this: Writable<ICustomElement>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$cacheElement`, slice.call(arguments)); }\n  flags |= LifecycleFlags.fromCache;\n  if (this.$hooks & Hooks.hasCaching) {\n    this.caching(flags);\n  }\n\n  let current = this.$attachableTail;\n  while (current !== null) {\n    current.$cache(flags);\n    current = current.$prevAttach;\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $cacheView(this: Writable<IView>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$cacheView`, slice.call(arguments)); }\n  flags |= LifecycleFlags.fromCache;\n  let current = this.$attachableTail;\n  while (current !== null) {\n    current.$cache(flags);\n    current = current.$prevAttach;\n  }\n}\n\n/** @internal */\nexport function $mountElement(this: Writable<ICustomElement>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$mountElement`, slice.call(arguments)); }\n  if (!(this.$state & State.isMounted)) {\n    this.$state |= State.isMounted;\n    this.$projector.project(this.$nodes);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $unmountElement(this: Writable<ICustomElement>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$unmountElement`, slice.call(arguments)); }\n  if (this.$state & State.isMounted) {\n    this.$state &= ~State.isMounted;\n    this.$projector.take(this.$nodes);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $mountView(this: Writable<IView>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$mountView`, slice.call(arguments)); }\n  if (!(this.$state & State.isMounted)) {\n    this.$state |= State.isMounted;\n    this.$nodes.insertBefore(this.location);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $unmountView(this: Writable<IView>, flags: LifecycleFlags): boolean {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$unmountView`, slice.call(arguments)); }\n  if (this.$state & State.isMounted) {\n    this.$state &= ~State.isMounted;\n    this.$nodes.remove();\n\n    if (this.isFree) {\n      this.isFree = false;\n      if (this.cache.tryReturnToCache(this)) {\n        this.$state |= State.isCached;\n        if (Tracer.enabled) { Tracer.leave(); }\n        return true;\n      }\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return false;\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n  return false;\n}\n","import { Profiler, Tracer, Writable } from '@aurelia/kernel';\nimport { Hooks, IView, State } from '../lifecycle';\nimport { IScope, LifecycleFlags } from '../observation';\nimport { ICustomAttribute } from '../resources/custom-attribute';\nimport { ICustomElement } from '../resources/custom-element';\n\nconst slice = Array.prototype.slice;\n\nconst { enter, leave } = Profiler.createTimer('BindLifecycle');\n\n/** @internal */\nexport function $bindAttribute(this: Writable<ICustomAttribute>, flags: LifecycleFlags, scope: IScope): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$bindAttribute`, slice.call(arguments)); }\n  if (Profiler.enabled) { enter(); }\n  flags |= LifecycleFlags.fromBind;\n\n  if (this.$state & State.isBound) {\n    if (this.$scope === scope) {\n      if (Profiler.enabled) { leave(); }\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n\n    this.$unbind(flags);\n  }\n  const lifecycle = this.$lifecycle;\n  lifecycle.beginBind();\n  // add isBinding flag\n  this.$state |= State.isBinding;\n\n  const hooks = this.$hooks;\n\n  if (hooks & Hooks.hasBound) {\n    lifecycle.enqueueBound(this);\n  }\n\n  this.$scope = scope;\n\n  if (hooks & Hooks.hasBinding) {\n    this.binding(flags);\n  }\n\n  // add isBound flag and remove isBinding flag\n  this.$state |= State.isBound;\n  this.$state &= ~State.isBinding;\n\n  lifecycle.endBind(flags);\n  if (Profiler.enabled) { leave(); }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $bindElement(this: Writable<ICustomElement>, flags: LifecycleFlags, parentScope: IScope | null): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$bindElement`, slice.call(arguments)); }\n  if (Profiler.enabled) { enter(); }\n  if (this.$state & State.isBound) {\n    if (Profiler.enabled) { leave(); }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return;\n  }\n  const scope = this.$scope;\n  (scope as Writable<IScope>).parentScope = parentScope;\n\n  const lifecycle = this.$lifecycle;\n  lifecycle.beginBind();\n  // add isBinding flag\n  this.$state |= State.isBinding;\n\n  const hooks = this.$hooks;\n  flags |= LifecycleFlags.fromBind;\n\n  if (hooks & Hooks.hasBound) {\n    lifecycle.enqueueBound(this);\n  }\n\n  if (hooks & Hooks.hasBinding) {\n    this.binding(flags);\n  }\n\n  let current = this.$bindableHead;\n  while (current !== null) {\n    current.$bind(flags, scope);\n    current = current.$nextBind;\n  }\n\n  // add isBound flag and remove isBinding flag\n  this.$state |= State.isBound;\n  this.$state &= ~State.isBinding;\n\n  lifecycle.endBind(flags);\n  if (Profiler.enabled) { leave(); }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $bindView(this: Writable<IView>, flags: LifecycleFlags, scope: IScope): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$bindView`, slice.call(arguments)); }\n  flags |= LifecycleFlags.fromBind;\n\n  if (this.$state & State.isBound) {\n    if (this.$scope === scope) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n\n    this.$unbind(flags);\n  }\n  // add isBinding flag\n  this.$state |= State.isBinding;\n\n  this.$scope = scope;\n  let current = this.$bindableHead;\n  while (current !== null) {\n    current.$bind(flags, scope);\n    current = current.$nextBind;\n  }\n\n  // add isBound flag and remove isBinding flag\n  this.$state |= State.isBound;\n  this.$state &= ~State.isBinding;\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $unbindAttribute(this: Writable<ICustomAttribute>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$unbindAttribute`, slice.call(arguments)); }\n  if (this.$state & State.isBound) {\n    const lifecycle = this.$lifecycle;\n    lifecycle.beginUnbind();\n    // add isUnbinding flag\n    this.$state |= State.isUnbinding;\n\n    const hooks = this.$hooks;\n    flags |= LifecycleFlags.fromUnbind;\n\n    if (hooks & Hooks.hasUnbound) {\n      lifecycle.enqueueUnbound(this);\n    }\n\n    if (hooks & Hooks.hasUnbinding) {\n      this.unbinding(flags);\n    }\n\n    // remove isBound and isUnbinding flags\n    this.$state &= ~(State.isBound | State.isUnbinding);\n\n    lifecycle.endUnbind(flags);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $unbindElement(this: Writable<ICustomElement>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$unbindElement`, slice.call(arguments)); }\n  if (this.$state & State.isBound) {\n    const lifecycle = this.$lifecycle;\n    lifecycle.beginUnbind();\n    // add isUnbinding flag\n    this.$state |= State.isUnbinding;\n\n    const hooks = this.$hooks;\n    flags |= LifecycleFlags.fromUnbind;\n\n    if (hooks & Hooks.hasUnbound) {\n      lifecycle.enqueueUnbound(this);\n    }\n\n    if (hooks & Hooks.hasUnbinding) {\n      this.unbinding(flags);\n    }\n\n    let current = this.$bindableTail;\n    while (current !== null) {\n      current.$unbind(flags);\n      current = current.$prevBind;\n    }\n\n    (this.$scope as Writable<IScope>).parentScope = null;\n\n    // remove isBound and isUnbinding flags\n    this.$state &= ~(State.isBound | State.isUnbinding);\n\n    lifecycle.endUnbind(flags);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $unbindView(this: Writable<IView>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$unbindView`, slice.call(arguments)); }\n  if (this.$state & State.isBound) {\n    // add isUnbinding flag\n    this.$state |= State.isUnbinding;\n\n    flags |= LifecycleFlags.fromUnbind;\n\n    let current = this.$bindableTail;\n    while (current !== null) {\n      current.$unbind(flags);\n      current = current.$prevBind;\n    }\n\n    // remove isBound and isUnbinding flags\n    this.$state &= ~(State.isBound | State.isUnbinding);\n    this.$scope = null;\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n","import { PLATFORM, Profiler, Tracer, Writable } from '@aurelia/kernel';\nimport { IElementHydrationOptions, TemplateDefinition } from '../definitions';\nimport { IDOM, INode } from '../dom';\nimport { Hooks, IRenderContext } from '../lifecycle';\nimport { Scope } from '../observation/binding-context';\nimport { IRenderingEngine, ITemplate } from '../rendering-engine';\nimport { ICustomAttribute, ICustomAttributeType } from '../resources/custom-attribute';\nimport { ICustomElement, ICustomElementType, IProjectorLocator } from '../resources/custom-element';\n\nconst slice = Array.prototype.slice;\n\nconst { enter, leave } = Profiler.createTimer('RenderLifecycle');\n\nexport interface IElementTemplateProvider {\n  getElementTemplate(renderingEngine: IRenderingEngine, customElementType: ICustomElementType | null, parentContext: IRenderContext | null): ITemplate;\n}\n\nexport interface ILifecycleRender {\n  /**\n   * Only applies to `@customElement`. This hook is not invoked for `@customAttribute`s\n   *\n   * Called during `$hydrate`, after `this.$scope` and `this.$projector` are set.\n   *\n   * If this hook is implemented, it will be used instead of `renderingEngine.getElementTemplate`.\n   * This allows you to completely override the default rendering behavior.\n   *\n   * It is the responsibility of the implementer to:\n   * - Populate `this.$bindables` with any Bindings, child Views, custom elements and custom attributes\n   * - Populate `this.$attachables` with any child Views, custom elements and custom attributes\n   * - Populate `this.$nodes` with the nodes that need to be appended to the host\n   * - Populate `this.$context` with the RenderContext / Container scoped to this instance\n   *\n   * @param host The DOM node that declares this custom element\n   * @param parts Replaceable parts, if any\n   *\n   * @returns Either an implementation of `IElementTemplateProvider`, or void\n   *\n   * @description\n   * This is the first \"hydrate\" lifecycle hook. It happens only once per instance (contrary to bind/attach\n   * which can happen many times per instance), though it can happen many times per type (once for each instance)\n   */\n  render?(host: INode, parts: Record<string, TemplateDefinition>, parentContext: IRenderContext | null): IElementTemplateProvider | void;\n}\n\n/** @internal */\nexport function $hydrateAttribute(\n  this: Writable<ICustomAttribute>,\n  renderingEngine: IRenderingEngine\n): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$hydrateAttribute`, slice.call(arguments)); }\n  if (Profiler.enabled) { enter(); }\n  const Type = this.constructor as ICustomAttributeType;\n\n  renderingEngine.applyRuntimeBehavior(Type, this);\n\n  if (this.$hooks & Hooks.hasCreated) {\n    this.created();\n  }\n  if (Profiler.enabled) { leave(); }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n/** @internal */\nexport function $hydrateElement(\n  this: Writable<ICustomElement>,\n  dom: IDOM,\n  projectorLocator: IProjectorLocator,\n  renderingEngine: IRenderingEngine,\n  host: INode,\n  parentContext: IRenderContext | null,\n  options: IElementHydrationOptions = PLATFORM.emptyObject\n): void {\n  if (Tracer.enabled) { Tracer.enter(`${this['constructor'].name}.$hydrateElement`, slice.call(arguments)); }\n  if (Profiler.enabled) { enter(); }\n  const Type = this.constructor as ICustomElementType;\n  const description = Type.description;\n\n  this.$scope = Scope.create(this, null);\n  this.$host = host;\n  this.$projector = projectorLocator.getElementProjector(dom, this, host, description);\n\n  renderingEngine.applyRuntimeBehavior(Type, this);\n\n  if (this.$hooks & Hooks.hasRender) {\n    const result = this.render(host, options.parts, parentContext);\n\n    if (result && 'getElementTemplate' in result) {\n      const template = result.getElementTemplate(renderingEngine, Type, parentContext);\n      template.render(this, host, options.parts);\n    }\n  } else {\n    const template = renderingEngine.getElementTemplate(dom, description, parentContext, Type);\n    template.render(this, host, options.parts);\n  }\n\n  if (this.$hooks & Hooks.hasCreated) {\n    this.created();\n  }\n  if (Profiler.enabled) { leave(); }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n","import {\n  Class,\n  Constructable,\n  IContainer,\n  Immutable,\n  IResourceKind,\n  IResourceType,\n  Omit,\n  PLATFORM,\n  Registration,\n  ResourceDescription,\n  Writable\n} from '@aurelia/kernel';\nimport { BindingMode } from '../binding/binding-mode';\nimport {\n  customAttributeKey,\n  customAttributeName,\n  IAttributeDefinition\n} from '../definitions';\nimport { INode } from '../dom';\nimport {\n  Hooks,\n  IAttach,\n  IBindScope,\n  ILifecycleHooks,\n  ILifecycleUnbindAfterDetach,\n  IRenderable\n} from '../lifecycle';\nimport { IChangeTracker } from '../observation';\nimport { IRenderingEngine } from '../rendering-engine';\nimport {\n  $attachAttribute,\n  $cacheAttribute,\n  $detachAttribute\n} from '../templating/lifecycle-attach';\nimport {\n  $bindAttribute,\n  $unbindAttribute\n} from '../templating/lifecycle-bind';\nimport { $hydrateAttribute } from '../templating/lifecycle-render';\n\ntype CustomAttributeStaticProperties = Pick<Immutable<Required<IAttributeDefinition>>, 'bindables'>;\n\nexport type CustomAttributeConstructor = Constructable & CustomAttributeStaticProperties;\n\nexport interface ICustomAttributeType<T extends INode = INode> extends\n  IResourceType<IAttributeDefinition, ICustomAttribute<T>>,\n  CustomAttributeStaticProperties { }\n\nexport interface ICustomAttribute<T extends INode = INode> extends\n  Partial<IChangeTracker>,\n  ILifecycleHooks,\n  IBindScope,\n  ILifecycleUnbindAfterDetach,\n  IAttach,\n  IRenderable<T> {\n\n  $hydrate(renderingEngine: IRenderingEngine): void;\n}\n\nexport interface ICustomAttributeResource<T extends INode = INode> extends\n  IResourceKind<IAttributeDefinition, ICustomAttribute<T>, Class<ICustomAttribute<T>> & CustomAttributeStaticProperties> {\n}\n\n/** @internal */\nexport function registerAttribute(this: ICustomAttributeType, container: IContainer): void {\n  const description = this.description;\n  const resourceKey = this.kind.keyFrom(description.name);\n  const aliases = description.aliases;\n\n  container.register(Registration.transient(resourceKey, this));\n\n  for (let i = 0, ii = aliases.length; i < ii; ++i) {\n    const aliasKey = this.kind.keyFrom(aliases[i]);\n    container.register(Registration.alias(resourceKey, aliasKey));\n  }\n}\n\n/**\n * Decorator: Indicates that the decorated class is a custom attribute.\n */\nexport function customAttribute(name: string): CustomAttributeDecorator;\nexport function customAttribute(definition: IAttributeDefinition): CustomAttributeDecorator;\nexport function customAttribute(nameOrDefinition: string | IAttributeDefinition): CustomAttributeDecorator;\nexport function customAttribute(nameOrDefinition: string | IAttributeDefinition): CustomAttributeDecorator {\n  return target => CustomAttributeResource.define(nameOrDefinition, target);\n}\n\n/**\n * Decorator: Applied to custom attributes. Indicates that whatever element the\n * attribute is placed on should be converted into a template and that this\n * attribute controls the instantiation of the template.\n */\nexport function templateController(name: string): CustomAttributeDecorator;\nexport function templateController(definition: IAttributeDefinition): CustomAttributeDecorator;\nexport function templateController(nameOrDefinition: string | Omit<IAttributeDefinition, 'isTemplateController'>): CustomAttributeDecorator;\nexport function templateController(nameOrDefinition: string | Omit<IAttributeDefinition, 'isTemplateController'>): CustomAttributeDecorator {\n  return target => CustomAttributeResource.define(\n    typeof nameOrDefinition === 'string'\n    ? { isTemplateController: true , name: nameOrDefinition }\n    : { isTemplateController: true, ...nameOrDefinition },\n    target);\n}\n\ntype HasDynamicOptions = Pick<IAttributeDefinition, 'hasDynamicOptions'>;\n\nfunction dynamicOptionsDecorator<T extends Constructable>(target: T & HasDynamicOptions): T & Required<HasDynamicOptions> {\n  target.hasDynamicOptions = true;\n  return target as T & Required<HasDynamicOptions>;\n}\n\n/**\n * Decorator: Indicates that the custom attributes has dynamic options.\n */\nexport function dynamicOptions(): typeof dynamicOptionsDecorator;\n/**\n * Decorator: Indicates that the custom attributes has dynamic options.\n */\nexport function dynamicOptions<T extends Constructable>(target: T & HasDynamicOptions): T & Required<HasDynamicOptions>;\nexport function dynamicOptions<T extends Constructable>(target?: T & HasDynamicOptions): T & Required<HasDynamicOptions> | typeof dynamicOptionsDecorator {\n  return target === undefined ? dynamicOptionsDecorator : dynamicOptionsDecorator<T>(target);\n}\n\nfunction isType<T>(this: ICustomAttributeResource, Type: T & Partial<ICustomAttributeType>): Type is T & ICustomAttributeType {\n  return Type.kind === this;\n}\n\nfunction define<T extends Constructable>(this: ICustomAttributeResource, name: string, ctor: T): T & ICustomAttributeType;\nfunction define<T extends Constructable>(this: ICustomAttributeResource, definition: IAttributeDefinition, ctor: T): T & ICustomAttributeType;\nfunction define<T extends Constructable>(this: ICustomAttributeResource, nameOrDefinition: string | IAttributeDefinition, ctor: T): T & ICustomAttributeType {\n  const Type = ctor as T & Writable<ICustomAttributeType>;\n  const description = createCustomAttributeDescription(typeof nameOrDefinition === 'string' ? { name: nameOrDefinition } : nameOrDefinition, Type as T & ICustomAttributeType);\n  const proto: Writable<ICustomAttribute> = Type.prototype;\n\n  Type.kind = CustomAttributeResource;\n  Type.description = description;\n  Type.register = registerAttribute;\n\n  proto.$hydrate = $hydrateAttribute;\n  proto.$bind = $bindAttribute;\n  proto.$attach = $attachAttribute;\n  proto.$detach = $detachAttribute;\n  proto.$unbind = $unbindAttribute;\n  proto.$cache = $cacheAttribute;\n\n  proto.$prevBind = null;\n  proto.$nextBind = null;\n  proto.$prevAttach = null;\n  proto.$nextAttach = null;\n\n  proto.$nextUnbindAfterDetach = null;\n\n  proto.$scope = null;\n  proto.$hooks = 0;\n  proto.$state = 0;\n\n  if ('flush' in proto) {\n    proto.$nextFlush = null;\n  }\n\n  if ('binding' in proto) proto.$hooks |= Hooks.hasBinding;\n  if ('bound' in proto) {\n    proto.$hooks |= Hooks.hasBound;\n    proto.$nextBound = null;\n  }\n\n  if ('unbinding' in proto) proto.$hooks |= Hooks.hasUnbinding;\n  if ('unbound' in proto) {\n    proto.$hooks |= Hooks.hasUnbound;\n    proto.$nextUnbound = null;\n  }\n\n  if ('created' in proto) proto.$hooks |= Hooks.hasCreated;\n  if ('attaching' in proto) proto.$hooks |= Hooks.hasAttaching;\n  if ('attached' in proto) {\n    proto.$hooks |= Hooks.hasAttached;\n    proto.$nextAttached = null;\n  }\n  if ('detaching' in proto) proto.$hooks |= Hooks.hasDetaching;\n  if ('caching' in proto) proto.$hooks |= Hooks.hasCaching;\n  if ('detached' in proto) {\n    proto.$hooks |= Hooks.hasDetached;\n    proto.$nextDetached = null;\n  }\n\n  return Type as ICustomAttributeType & T;\n}\n\nexport const CustomAttributeResource: ICustomAttributeResource = {\n  name: customAttributeName,\n  keyFrom: customAttributeKey,\n  isType,\n  define\n};\n\n/** @internal */\nexport function createCustomAttributeDescription(def: IAttributeDefinition, Type: ICustomAttributeType): ResourceDescription<IAttributeDefinition> {\n  const aliases = def. aliases;\n  const defaultBindingMode = def.defaultBindingMode;\n  return {\n    name: def.name,\n    aliases: aliases === undefined || aliases === null ? PLATFORM.emptyArray : aliases,\n    defaultBindingMode: defaultBindingMode === undefined || defaultBindingMode === null ? BindingMode.toView : defaultBindingMode,\n    hasDynamicOptions: def.hasDynamicOptions === undefined ? false : def.hasDynamicOptions,\n    isTemplateController: def.isTemplateController === undefined ? false : def.isTemplateController,\n    bindables: {...Type.bindables, ...def.bindables}\n  };\n}\n\nexport type CustomAttributeDecorator = <T extends Constructable>(target: T) => T & ICustomAttributeType;\n","import { DI, IContainer, IResolver, PLATFORM } from '@aurelia/kernel';\n\nexport interface INode extends Object {}\n\nexport const INode = DI.createInterface<INode>('INode').noDefault();\n\nexport const IRenderLocation = DI.createInterface<IRenderLocation>('IRenderLocation').noDefault();\nexport interface IRenderLocation<T extends INode = INode> extends INode {\n  $start?: IRenderLocation<T>;\n  $nodes?: INodeSequence<T> | Readonly<{}>;\n}\n\n/**\n * Represents a DocumentFragment\n */\nexport interface INodeSequence<T extends INode = INode> extends INode {\n  /**\n   * The nodes of this sequence.\n   */\n  readonly childNodes: ArrayLike<T>;\n\n  readonly firstChild: T;\n\n  readonly lastChild: T;\n\n  /**\n   * Find all instruction targets in this sequence.\n   */\n  findTargets(): ArrayLike<T>;\n\n  /**\n   * Insert this sequence as a sibling before refNode\n   */\n  insertBefore(refNode: T | IRenderLocation<T>): void;\n\n  /**\n   * Append this sequence as a child to parent\n   */\n  appendTo(parent: T): void;\n\n  /**\n   * Remove this sequence from its parent.\n   */\n  remove(): void;\n}\n\nexport const IDOM = DI.createInterface<IDOM>('IDOM').noDefault();\n\nexport interface IDOM<T extends INode = INode> {\n  addEventListener(eventName: string, subscriber: unknown, publisher?: unknown, options?: unknown): void;\n  appendChild(parent: T, child: T): void;\n  cloneNode<TClone extends T>(node: TClone, deep?: boolean): TClone;\n  convertToRenderLocation(node: T): IRenderLocation<T>;\n  createDocumentFragment(markupOrNode?: string | T): T;\n  createElement(name: string): T;\n  createNodeObserver?(node: T, cb: (...args: unknown[]) => void, init: unknown): unknown;\n  createTemplate(markup?: string): T;\n  createTextNode(text: string): T;\n  insertBefore(nodeToInsert: T, referenceNode: T): void;\n  isMarker(node: unknown): node is T;\n  isNodeInstance(potentialNode: unknown): potentialNode is T;\n  isRenderLocation(node: unknown): node is IRenderLocation<T>;\n  makeTarget(node: T): void;\n  registerElementResolver(container: IContainer, resolver: IResolver): void;\n  remove(node: T): void;\n  removeEventListener(eventName: string, subscriber: unknown, publisher?: unknown, options?: unknown): void;\n  setAttribute(node: T, name: string, value: unknown): void;\n}\n\n// This is an implementation of INodeSequence that represents \"no DOM\" to render.\n// It's used in various places to avoid null and to encode\n// the explicit idea of \"no view\".\nconst emptySequence: INodeSequence = {\n  childNodes: PLATFORM.emptyArray,\n  firstChild: null,\n  lastChild: null,\n  findTargets(): ArrayLike<INode> { return PLATFORM.emptyArray; },\n  insertBefore(refNode: INode): void { /*do nothing*/ },\n  appendTo(parent: INode): void { /*do nothing*/ },\n  remove(): void { /*do nothing*/ }\n};\n\nexport const NodeSequence = {\n  empty: emptySequence\n};\n\nexport interface INodeSequenceFactory<T extends INode = INode> {\n  createNodeSequence(): INodeSequence<T>;\n}\n","import { Constructable, PLATFORM } from '@aurelia/kernel';\nimport { BindingMode } from '../binding/binding-mode';\nimport { BindableSource, IBindableDescription } from '../definitions';\n\n/**\n * Decorator: Specifies custom behavior for a bindable property.\n * @param config The overrides\n */\nexport function bindable(config?: BindableSource): BindableDecorator;\n/**\n * Decorator: Specifies a bindable property on a class.\n * @param prop The property name\n */\nexport function bindable(prop: string): ClassDecorator;\n/**\n * Decorator: Specifies a bindable property on a class.\n * @param target The class\n * @param prop The property name\n */\nexport function bindable<T extends InstanceType<Constructable & Partial<WithBindables>>>(target: T, prop: string): void;\nexport function bindable<T extends InstanceType<Constructable & Partial<WithBindables>>>(configOrTarget?: BindableSource | T, prop?: string): void | BindableDecorator | ClassDecorator {\n  let config: IBindableDescription;\n\n  const decorator = function decorate($target: T, $prop: string): void {\n    const Type = $target.constructor as Constructable & Partial<WithBindables>;\n    let bindables = Type.bindables;\n    if (bindables === undefined) {\n      bindables = Type.bindables = {};\n    }\n    if (!config.attribute) {\n      config.attribute = PLATFORM.kebabCase($prop);\n    }\n    if (!config.callback) {\n      config.callback = `${$prop}Changed`;\n    }\n    if (config.mode === undefined) {\n      config.mode = BindingMode.toView;\n    }\n    if (arguments.length > 1) {\n      // Non invocation:\n      // - @bindable\n      // Invocation with or w/o opts:\n      // - @bindable()\n      // - @bindable({...opts})\n      config.property = $prop;\n    }\n    bindables[config.property] = config;\n  };\n  if (arguments.length > 1) {\n    // Non invocation:\n    // - @bindable\n    config = {};\n    decorator(configOrTarget as T, prop);\n    return;\n  } else if (typeof configOrTarget === 'string') {\n    // ClassDecorator\n    // - @bindable('bar')\n    // Direct call:\n    // - @bindable('bar')(Foo)\n    config = {};\n    return decorator as BindableDecorator;\n  }\n\n  // Invocation with or w/o opts:\n  // - @bindable()\n  // - @bindable({...opts})\n  config = (configOrTarget || {}) as IBindableDescription;\n  return decorator as BindableDecorator;\n}\n\nexport type WithBindables = { bindables: Record<string, IBindableDescription> };\nexport type BindableDecorator = <T extends InstanceType<Constructable & Partial<WithBindables>>>\n  (target: T, prop: string) => void;\n","import { Constructable, InterfaceSymbol, IRegistry } from '@aurelia/kernel';\nimport { AttributeDefinition, IAttributeDefinition } from '../../definitions';\nimport { INode, IRenderLocation } from '../../dom';\nimport { CompositionCoordinator, IView, IViewFactory } from '../../lifecycle';\nimport { LifecycleFlags } from '../../observation';\nimport { bindable } from '../../templating/bindable';\nimport { CustomAttributeResource, ICustomAttribute, ICustomAttributeResource } from '../custom-attribute';\n\nexport interface If<T extends INode = INode> extends ICustomAttribute<T> {}\nexport class If<T extends INode = INode> implements If<T> {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>|Constructable> = [IViewFactory, IRenderLocation, CompositionCoordinator];\n\n  public static readonly register: IRegistry['register'];\n  public static readonly bindables: IAttributeDefinition['bindables'];\n  public static readonly kind: ICustomAttributeResource;\n  public static readonly description: AttributeDefinition;\n\n  @bindable public value: boolean;\n\n  public elseFactory: IViewFactory<T> | null;\n  public elseView: IView<T> | null;\n  public ifFactory: IViewFactory<T>;\n  public ifView: IView<T> | null;\n  public location: IRenderLocation<T>;\n  public coordinator: CompositionCoordinator;\n\n  constructor(\n    ifFactory: IViewFactory<T>,\n    location: IRenderLocation<T>,\n    coordinator: CompositionCoordinator\n  ) {\n    this.value = false;\n\n    this.coordinator = coordinator;\n    this.elseFactory = null;\n    this.elseView = null;\n    this.ifFactory = ifFactory;\n    this.ifView = null;\n    this.location = location;\n  }\n\n  public binding(flags: LifecycleFlags): void {\n    const view = this.updateView(flags);\n    this.coordinator.compose(view, flags);\n    this.coordinator.binding(flags, this.$scope);\n  }\n\n  public attaching(flags: LifecycleFlags): void {\n    this.coordinator.attaching(flags);\n  }\n\n  public detaching(flags: LifecycleFlags): void {\n    this.coordinator.detaching(flags);\n  }\n\n  public unbinding(flags: LifecycleFlags): void {\n    this.coordinator.unbinding(flags);\n  }\n\n  public caching(flags: LifecycleFlags): void {\n    if (this.ifView !== null && this.ifView.release(flags)) {\n      this.ifView = null;\n    }\n\n    if (this.elseView !== null && this.elseView.release(flags)) {\n      this.elseView = null;\n    }\n\n    this.coordinator.caching(flags);\n  }\n\n  public valueChanged(newValue: boolean, oldValue: boolean, flags: LifecycleFlags): void {\n    if (flags & LifecycleFlags.fromFlush) {\n      const view = this.updateView(flags);\n      this.coordinator.compose(view, flags);\n    } else {\n      this.$lifecycle.enqueueFlush(this).catch(error => { throw error; });\n    }\n  }\n\n  public flush(flags: LifecycleFlags): void {\n    const view = this.updateView(flags);\n    this.coordinator.compose(view, flags);\n  }\n\n  /** @internal */\n  public updateView(flags: LifecycleFlags): IView<T> | null {\n    let view: IView<T> | null;\n\n    if (this.value) {\n      view = this.ifView = this.ensureView(this.ifView, this.ifFactory, flags);\n    } else if (this.elseFactory !== null) {\n      view = this.elseView  = this.ensureView(this.elseView, this.elseFactory, flags);\n    } else {\n      view = null;\n    }\n\n    return view;\n  }\n\n  /** @internal */\n  public ensureView(view: IView<T> | null, factory: IViewFactory<T>, flags: LifecycleFlags): IView<T> {\n    if (view === null) {\n      view = factory.create();\n    }\n\n    view.hold(this.location);\n\n    return view;\n  }\n}\nCustomAttributeResource.define({ name: 'if', isTemplateController: true }, If);\n\nexport interface Else<T extends INode = INode> extends ICustomAttribute<T> {}\nexport class Else<T extends INode = INode> implements Else<T> {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IViewFactory];\n\n  public static readonly register: IRegistry['register'];\n  public static readonly bindables: IAttributeDefinition['bindables'];\n  public static readonly kind: ICustomAttributeResource;\n  public static readonly description: AttributeDefinition;\n\n  private readonly factory: IViewFactory<T>;\n\n  constructor(factory: IViewFactory<T>) {\n    this.factory = factory;\n  }\n\n  public link(ifBehavior: If<T>): void {\n    ifBehavior.elseFactory = this.factory;\n  }\n}\nCustomAttributeResource.define({ name: 'else', isTemplateController: true }, Else);\n","import { IIndexable, InterfaceSymbol, IRegistry } from '@aurelia/kernel';\nimport { ForOfStatement } from '../../binding/ast';\nimport { Binding } from '../../binding/binding';\nimport { AttributeDefinition, IAttributeDefinition } from '../../definitions';\nimport { INode, IRenderLocation } from '../../dom';\nimport { IBindScope, IRenderable, IView, IViewFactory, State } from '../../lifecycle';\nimport { CollectionObserver, IBatchedCollectionSubscriber, IObservedArray, IScope, LifecycleFlags, ObservedCollection } from '../../observation';\nimport { BindingContext, Scope } from '../../observation/binding-context';\nimport { getCollectionObserver } from '../../observation/observer-locator';\nimport { SetterObserver } from '../../observation/setter-observer';\nimport { bindable } from '../../templating/bindable';\nimport { CustomAttributeResource, ICustomAttribute, ICustomAttributeResource } from '../custom-attribute';\n\nexport interface Repeat<C extends ObservedCollection, T extends INode = INode> extends ICustomAttribute<T>, IBatchedCollectionSubscriber {}\nexport class Repeat<C extends ObservedCollection = IObservedArray, T extends INode = INode> implements Repeat<C, T> {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IRenderLocation, IRenderable, IViewFactory];\n\n  public static readonly register: IRegistry['register'];\n  public static readonly bindables: IAttributeDefinition['bindables'];\n  public static readonly kind: ICustomAttributeResource;\n  public static readonly description: AttributeDefinition;\n\n  @bindable public items: C;\n\n  public $scope: IScope;\n  public $observers: { items: SetterObserver };\n\n  public forOf: ForOfStatement;\n  public hasPendingInstanceMutation: boolean;\n  public local: string;\n  public location: IRenderLocation<T>;\n  public observer: CollectionObserver | null;\n  public renderable: IRenderable<T>;\n  public factory: IViewFactory<T>;\n  public views: IView<T>[];\n\n  constructor(\n    location: IRenderLocation<T>,\n    renderable: IRenderable<T>,\n    factory: IViewFactory<T>\n  ) {\n    this.factory = factory;\n    this.hasPendingInstanceMutation = false;\n    this.location = location;\n    this.observer = null;\n    this.renderable = renderable;\n    this.views = [];\n  }\n\n  public binding(flags: LifecycleFlags): void {\n    this.checkCollectionObserver();\n  }\n\n  public bound(flags: LifecycleFlags): void {\n    let current = this.renderable.$bindableHead;\n    while (current !== null) {\n      if ((current as Binding).target === this && (current as Binding).targetProperty === 'items') {\n        this.forOf = (current as Binding).sourceExpression as ForOfStatement;\n        break;\n      }\n      current = current.$nextBind;\n    }\n    this.local = this.forOf.declaration.evaluate(flags, this.$scope, null) as string;\n\n    this.processViews(null, flags);\n  }\n\n  public attaching(flags: LifecycleFlags): void {\n    const { views, location } = this;\n    for (let i = 0, ii = views.length; i < ii; ++i) {\n      const view = views[i];\n      view.hold(location);\n      view.$attach(flags);\n    }\n  }\n\n  public detaching(flags: LifecycleFlags): void {\n    const { views } = this;\n    for (let i = 0, ii = views.length; i < ii; ++i) {\n      const view = views[i];\n      view.$detach(flags);\n      view.release(flags);\n    }\n  }\n\n  public unbound(flags: LifecycleFlags): void {\n    this.checkCollectionObserver();\n\n    const { views } = this;\n    for (let i = 0, ii = views.length; i < ii; ++i) {\n      const view = views[i];\n      view.$unbind(flags);\n    }\n  }\n\n  // called by SetterObserver (sync)\n  public itemsChanged(newValue: C, oldValue: C, flags: LifecycleFlags): void {\n    this.checkCollectionObserver();\n    this.processViews(null, flags | LifecycleFlags.updateTargetInstance);\n  }\n\n  // called by a CollectionObserver (async)\n  public handleBatchedChange(indexMap: number[] | null): void {\n    this.processViews(indexMap, LifecycleFlags.fromFlush | LifecycleFlags.updateTargetInstance);\n  }\n\n  // if the indexMap === null, it is an instance mutation, otherwise it's an items mutation\n  // TODO: Reduce complexity (currently at 46)\n  private processViews(indexMap: number[] | null, flags: LifecycleFlags): void {\n    const { views, $lifecycle } = this;\n    if (this.$state & State.isBound) {\n      const { local, $scope, factory, forOf, items } = this;\n      const oldLength = views.length;\n      const newLength = forOf.count(items);\n      if (oldLength < newLength) {\n        views.length = newLength;\n        for (let i = oldLength; i < newLength; ++i) {\n          views[i] = factory.create();\n        }\n      } else if (newLength < oldLength) {\n        $lifecycle.beginDetach();\n        for (let i = newLength, view = views[i]; i < oldLength; view = views[++i]) {\n          view.release(flags);\n          view.$detach(flags);\n        }\n        $lifecycle.endDetach(flags);\n        $lifecycle.beginUnbind();\n        for (let i = newLength, view = views[i]; i < oldLength; view = views[++i]) {\n          view.$unbind(flags);\n        }\n        $lifecycle.endUnbind(flags);\n        views.length = newLength;\n        if (newLength === 0) {\n          return;\n        }\n      } else if (newLength === 0) {\n        return;\n      }\n\n      $lifecycle.beginBind();\n      if (indexMap === null) {\n        forOf.iterate(items, (arr, i, item: (string | number | boolean | ObservedCollection | IIndexable)) => {\n          const view = views[i];\n          if (!!view.$scope && view.$scope.bindingContext[local] === item) {\n            view.$bind(flags, Scope.fromParent($scope, view.$scope.bindingContext));\n          } else {\n            view.$bind(flags, Scope.fromParent($scope, BindingContext.create(local, item)));\n          }\n        });\n      } else {\n        forOf.iterate(items, (arr, i, item: (string | number | boolean | ObservedCollection | IIndexable)) => {\n          const view = views[i];\n          if (!!view.$scope && (indexMap[i] === i || view.$scope.bindingContext[local] === item)) {\n            view.$bind(flags, Scope.fromParent($scope, view.$scope.bindingContext));\n          } else {\n            view.$bind(flags, Scope.fromParent($scope, BindingContext.create(local, item)));\n          }\n        });\n      }\n      $lifecycle.endBind(flags);\n    }\n\n    if (this.$state & State.isAttached) {\n      const { location } = this;\n      $lifecycle.beginAttach();\n      if (indexMap === null) {\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n          const view = views[i];\n          view.hold(location);\n          view.$attach(flags);\n        }\n      } else {\n        for (let i = 0, ii = views.length; i < ii; ++i) {\n          if (indexMap[i] !== i) {\n            const view = views[i];\n            view.hold(location);\n            view.$attach(flags);\n          }\n        }\n      }\n      $lifecycle.endAttach(flags);\n    }\n  }\n\n  private checkCollectionObserver(): void {\n    const oldObserver = this.observer;\n    if (this.$state & (State.isBound | State.isBinding)) {\n      const newObserver = this.observer = getCollectionObserver(this.$lifecycle, this.items);\n      if (oldObserver !== newObserver && oldObserver) {\n        oldObserver.unsubscribeBatched(this);\n      }\n      if (newObserver) {\n        newObserver.subscribeBatched(this);\n      }\n    } else if (oldObserver) {\n      oldObserver.unsubscribeBatched(this);\n    }\n  }\n}\nCustomAttributeResource.define({ name: 'repeat', isTemplateController: true }, Repeat);\n","import { InterfaceSymbol, IRegistry } from '@aurelia/kernel';\nimport { AttributeDefinition, IAttributeDefinition } from '../../definitions';\nimport { INode, IRenderLocation } from '../../dom';\nimport { IView, IViewFactory } from '../../lifecycle';\nimport { LifecycleFlags } from '../../observation';\nimport { CustomAttributeResource, ICustomAttribute, ICustomAttributeResource } from '../custom-attribute';\n\nexport interface Replaceable<T extends INode = INode> extends ICustomAttribute<T> {}\nexport class Replaceable<T extends INode = INode> implements Replaceable<T> {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IViewFactory, IRenderLocation];\n\n  public static readonly register: IRegistry['register'];\n  public static readonly bindables: IAttributeDefinition['bindables'];\n  public static readonly kind: ICustomAttributeResource;\n  public static readonly description: AttributeDefinition;\n\n  private readonly currentView: IView<T>;\n  private readonly factory: IViewFactory<T>;\n\n  constructor(\n    factory: IViewFactory<T>,\n    location: IRenderLocation<T>\n  ) {\n    this.factory = factory;\n\n    this.currentView = this.factory.create();\n    this.currentView.hold(location);\n  }\n\n  public binding(flags: LifecycleFlags): void {\n    this.currentView.$bind(flags | LifecycleFlags.allowParentScopeTraversal, this.$scope);\n  }\n\n  public attaching(flags: LifecycleFlags): void {\n    this.currentView.$attach(flags);\n  }\n\n  public detaching(flags: LifecycleFlags): void {\n    this.currentView.$detach(flags);\n  }\n\n  public unbinding(flags: LifecycleFlags): void {\n    this.currentView.$unbind(flags);\n  }\n}\nCustomAttributeResource.define({ name: 'replaceable', isTemplateController: true }, Replaceable);\n","import { InterfaceSymbol, IRegistry } from '@aurelia/kernel';\nimport { AttributeDefinition, IAttributeDefinition } from '../../definitions';\nimport { INode, IRenderLocation } from '../../dom';\nimport { IBindScope, IView, IViewFactory, State } from '../../lifecycle';\nimport { IBindingContext, LifecycleFlags } from '../../observation';\nimport { Scope } from '../../observation/binding-context';\nimport { bindable } from '../../templating/bindable';\nimport { CustomAttributeResource, ICustomAttribute, ICustomAttributeResource } from '../custom-attribute';\n\nexport interface With<T extends INode = INode> extends ICustomAttribute<T> {}\nexport class With<T extends INode = INode> implements With<T>  {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IViewFactory, IRenderLocation];\n\n  public static readonly register: IRegistry['register'];\n  public static readonly bindables: IAttributeDefinition['bindables'];\n  public static readonly kind: ICustomAttributeResource;\n  public static readonly description: AttributeDefinition;\n\n  // TODO: this type is incorrect (it can be any user-provided object), need to fix and double check Scope.\n  @bindable public value: IBindScope | IBindingContext;\n\n  private readonly currentView: IView<T>;\n  private readonly factory: IViewFactory<T>;\n\n  constructor(\n    factory: IViewFactory<T>,\n    location: IRenderLocation<T>\n  ) {\n    this.value = null;\n\n    this.factory = factory;\n    this.currentView = this.factory.create();\n    this.currentView.hold(location);\n  }\n\n  public valueChanged(this: With): void {\n    if (this.$state & State.isBound) {\n      this.bindChild(LifecycleFlags.fromBindableHandler);\n    }\n  }\n\n  public binding(flags: LifecycleFlags): void {\n    this.bindChild(flags);\n  }\n\n  public attaching(flags: LifecycleFlags): void {\n    this.currentView.$attach(flags);\n  }\n\n  public detaching(flags: LifecycleFlags): void {\n    this.currentView.$detach(flags);\n  }\n\n  public unbinding(flags: LifecycleFlags): void {\n    this.currentView.$unbind(flags);\n  }\n\n  private bindChild(flags: LifecycleFlags): void {\n    const scope = Scope.fromParent(this.$scope, this.value);\n    this.currentView.$bind(flags, scope);\n  }\n}\nCustomAttributeResource.define({ name: 'with', isTemplateController: true }, With);\n","import {\n  Class,\n  Constructable,\n  DI,\n  IContainer,\n  IResourceKind,\n  IResourceType,\n  Registration,\n  Reporter,\n  Writable\n} from '@aurelia/kernel';\nimport {\n  buildTemplateDefinition,\n  customElementBehavior,\n  customElementKey,\n  customElementName,\n  IElementHydrationOptions,\n  ITemplateDefinition,\n  TemplateDefinition\n} from '../definitions';\nimport { IDOM, INode, INodeSequence, IRenderLocation } from '../dom';\nimport {\n  Hooks,\n  IAttach,\n  IBind,\n  ILifecycleHooks,\n  ILifecycleUnbindAfterDetach,\n  IMountable,\n  IRenderable,\n  IRenderContext\n} from '../lifecycle';\nimport { IChangeTracker } from '../observation';\nimport { IRenderingEngine } from '../rendering-engine';\nimport {\n  $attachElement,\n  $cacheElement,\n  $detachElement,\n  $mountElement,\n  $unmountElement\n} from '../templating/lifecycle-attach';\nimport {\n  $bindElement,\n  $unbindElement\n} from '../templating/lifecycle-bind';\nimport {\n  $hydrateElement,\n  ILifecycleRender\n} from '../templating/lifecycle-render';\n\nexport interface ICustomElementType<T extends INode = INode> extends IResourceType<ITemplateDefinition, ICustomElement<T>>, ICustomElementStaticProperties {\n  description: TemplateDefinition;\n}\n\nexport type CustomElementHost<T extends INode = INode> = IRenderLocation<T> & T & {\n  $customElement?: ICustomElement<T>;\n};\n\nexport interface IElementProjector<T extends INode = INode> {\n  readonly host: CustomElementHost<T>;\n  readonly children: ArrayLike<CustomElementHost<T>>;\n\n  provideEncapsulationSource(): T;\n  project(nodes: INodeSequence<T>): void;\n  take(nodes: INodeSequence<T>): void;\n\n  subscribeToChildrenChange(callback: () => void): void;\n}\n\nexport const IProjectorLocator = DI.createInterface<IProjectorLocator>('IProjectorLocator').noDefault();\n\nexport interface IProjectorLocator<T extends INode = INode> {\n  getElementProjector(dom: IDOM<T>, $component: ICustomElement<T>, host: CustomElementHost<T>, def: TemplateDefinition): IElementProjector<T>;\n}\n\nexport interface ICustomElementStaticProperties {\n  containerless?: TemplateDefinition['containerless'];\n  shadowOptions?: TemplateDefinition['shadowOptions'];\n  bindables?: TemplateDefinition['bindables'];\n}\n\nexport interface ICustomElement<T extends INode = INode> extends\n  Partial<IChangeTracker>,\n  ILifecycleHooks,\n  ILifecycleRender,\n  IBind,\n  ILifecycleUnbindAfterDetach,\n  IAttach,\n  IMountable,\n  IRenderable<T> {\n\n  readonly $projector: IElementProjector;\n  readonly $host: CustomElementHost;\n\n  $hydrate(\n    dom: IDOM,\n    projectorLocator: IProjectorLocator,\n    renderingEngine: IRenderingEngine,\n    host: INode,\n    parentContext: IRenderContext | null,\n    options?: IElementHydrationOptions\n  ): void;\n}\n\nexport interface ICustomElementResource<T extends INode = INode> extends\n  IResourceKind<ITemplateDefinition, ICustomElement<T>, Class<ICustomElement<T>> & ICustomElementStaticProperties> {\n  behaviorFor(node: T): ICustomElement<T> | null;\n}\n\n/** @internal */\nexport function registerElement(this: ICustomElementType, container: IContainer): void {\n  const resourceKey = this.kind.keyFrom(this.description.name);\n  container.register(Registration.transient(resourceKey, this));\n}\n\n/**\n * Decorator: Indicates that the decorated class is a custom element.\n */\nexport function customElement(name: string): ICustomElementDecorator;\nexport function customElement(definition: ITemplateDefinition): ICustomElementDecorator;\nexport function customElement(nameOrDefinition: string | ITemplateDefinition): ICustomElementDecorator;\nexport function customElement(nameOrDefinition: string | ITemplateDefinition): ICustomElementDecorator {\n  return (target => CustomElementResource.define(nameOrDefinition, target)) as ICustomElementDecorator;\n}\n\nfunction isType<T>(this: ICustomElementResource, Type: T & Partial<ICustomElementType>): Type is T & ICustomElementType {\n  return Type.kind === this;\n}\n\nfunction define<T extends Constructable>(this: ICustomElementResource, name: string, ctor: T | null): T & ICustomElementType;\nfunction define<T extends Constructable>(this: ICustomElementResource, definition: ITemplateDefinition, ctor: T | null): T & ICustomElementType;\nfunction define<T extends Constructable>(this: ICustomElementResource, nameOrDefinition: string | ITemplateDefinition, ctor: T | null = null): T & ICustomElementType {\n  if (!nameOrDefinition) {\n    throw Reporter.error(70);\n  }\n  const Type = (ctor === null ? class HTMLOnlyElement { /* HTML Only */ } : ctor) as T & Writable<ICustomElementType>;\n  const description = buildTemplateDefinition(Type as unknown as ICustomElementType, nameOrDefinition);\n  const proto: Writable<ICustomElement> = Type.prototype;\n\n  Type.kind = CustomElementResource;\n  Type.description = description;\n  Type.register = registerElement;\n\n  proto.$hydrate = $hydrateElement;\n  proto.$bind = $bindElement;\n  proto.$attach = $attachElement;\n  proto.$detach = $detachElement;\n  proto.$unbind = $unbindElement;\n  proto.$cache = $cacheElement;\n\n  proto.$prevBind = null;\n  proto.$nextBind = null;\n  proto.$prevAttach = null;\n  proto.$nextAttach = null;\n\n  proto.$nextUnbindAfterDetach = null;\n\n  proto.$scope = null;\n  proto.$hooks = 0;\n\n  proto.$bindableHead = null;\n  proto.$bindableTail = null;\n  proto.$attachableHead = null;\n  proto.$attachableTail = null;\n\n  proto.$mount = $mountElement;\n  proto.$unmount = $unmountElement;\n\n  proto.$nextMount = null;\n  proto.$nextUnmount = null;\n\n  proto.$projector = null;\n\n  if ('flush' in proto) {\n    proto.$nextFlush = null;\n  }\n\n  if ('binding' in proto) proto.$hooks |= Hooks.hasBinding;\n  if ('bound' in proto) {\n    proto.$hooks |= Hooks.hasBound;\n    proto.$nextBound = null;\n  }\n\n  if ('unbinding' in proto) proto.$hooks |= Hooks.hasUnbinding;\n  if ('unbound' in proto) {\n    proto.$hooks |= Hooks.hasUnbound;\n    proto.$nextUnbound = null;\n  }\n\n  if ('render' in proto) proto.$hooks |= Hooks.hasRender;\n  if ('created' in proto) proto.$hooks |= Hooks.hasCreated;\n  if ('attaching' in proto) proto.$hooks |= Hooks.hasAttaching;\n  if ('attached' in proto) {\n    proto.$hooks |= Hooks.hasAttached;\n    proto.$nextAttached = null;\n  }\n  if ('detaching' in proto) proto.$hooks |= Hooks.hasDetaching;\n  if ('caching' in proto) proto.$hooks |= Hooks.hasCaching;\n  if ('detached' in proto) {\n    proto.$hooks |= Hooks.hasDetached;\n    proto.$nextDetached = null;\n  }\n\n  return Type as ICustomElementType & T;\n}\n\nexport const CustomElementResource: ICustomElementResource = {\n  name: customElementName,\n  keyFrom: customElementKey,\n  isType,\n  behaviorFor: customElementBehavior as ICustomElementResource['behaviorFor'],\n  define\n};\n\n// tslint:enable:align\n\n// TODO\n// ## DefaultSlotProjector\n// An implementation of IElementProjector that can handle a subset of default\n// slot projection scenarios without needing real Shadow DOM.\n// ### Conditions\n// We can do a one-time, static composition of the content and view,\n// to emulate shadow DOM, if the following constraints are met:\n// * There must be exactly one slot and it must be a default slot.\n// * The default slot must not have any fallback content.\n// * The default slot must not have a custom element as its immediate parent or\n//   a slot attribute (re-projection).\n// ### Projection\n// The projector copies all content nodes to the slot's location.\n// The copy process should inject a comment node before and after the slotted\n// content, so that the bounds of the content can be clearly determined,\n// even if the slotted content has template controllers or string interpolation.\n// ### Encapsulation Source\n// Uses the same strategy as HostProjector.\n// ### Children\n// The projector adds a mutation observer to the parent node of the\n// slot comment. When direct children of that node change, the projector\n// will gather up all nodes between the start and end slot comments.\n\nexport interface ICustomElementDecorator {\n  // Using a type breaks syntax highlighting: https://github.com/Microsoft/TypeScript-TmLanguage/issues/481\n  // tslint:disable-next-line:callable-types\n  <T extends Constructable>(target: T): T & ICustomElementType;\n}\n\ntype HasShadowOptions = Pick<ITemplateDefinition, 'shadowOptions'>;\n\nconst defaultShadowOptions = {\n  mode: 'open' as 'open' | 'closed'\n};\n\n/**\n * Decorator: Indicates that the custom element should render its view in ShadowDOM.\n */\nexport function useShadowDOM<T extends Constructable>(options?: HasShadowOptions['shadowOptions']): (target: T & HasShadowOptions) => T & Required<HasShadowOptions>;\n/**\n * Decorator: Indicates that the custom element should render its view in ShadowDOM.\n */\nexport function useShadowDOM<T extends Constructable>(target: T & HasShadowOptions): T & Required<HasShadowOptions>;\nexport function useShadowDOM<T extends Constructable>(targetOrOptions?: (T & HasShadowOptions) | HasShadowOptions['shadowOptions']): (T & Required<HasShadowOptions>) | ((target: T & HasShadowOptions) => (T & Required<HasShadowOptions>)) {\n  const options = typeof targetOrOptions === 'function' || !targetOrOptions\n    ? defaultShadowOptions\n    : targetOrOptions as HasShadowOptions['shadowOptions'];\n\n  function useShadowDOMDecorator(target: T & HasShadowOptions): T & Required<HasShadowOptions> {\n    target.shadowOptions = options;\n    return target as T & Required<HasShadowOptions>;\n  }\n\n  return typeof targetOrOptions === 'function' ? useShadowDOMDecorator(targetOrOptions) : useShadowDOMDecorator;\n}\n\ntype HasContainerless = Pick<ITemplateDefinition, 'containerless'>;\n\nfunction containerlessDecorator<T extends Constructable>(target: T & HasContainerless): T & Required<HasContainerless> {\n  target.containerless = true;\n  return target as T & Required<HasContainerless>;\n}\n\n/**\n * Decorator: Indicates that the custom element should be rendered without its element container.\n */\nexport function containerless(): typeof containerlessDecorator;\n/**\n * Decorator: Indicates that the custom element should be rendered without its element container.\n */\nexport function containerless<T extends Constructable>(target: T & HasContainerless): T & Required<HasContainerless>;\nexport function containerless<T extends Constructable>(target?: T & HasContainerless): T & Required<HasContainerless> | typeof containerlessDecorator {\n  return target === undefined ? containerlessDecorator : containerlessDecorator<T>(target);\n}\n","import { DI, InterfaceSymbol, IRegistry } from '@aurelia/kernel';\nimport { ValueConverterResource } from '../value-converter';\n\nconst SCRIPT_REGEX = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi;\n\nexport interface ISanitizer {\n /**\n  * Sanitizes the provided input.\n  * @param input The input to be sanitized.\n  */\n  sanitize(input: string): string;\n}\n\nexport const ISanitizer = DI.createInterface<ISanitizer>('ISanitizer').withDefault(x => x.singleton(class {\n    public sanitize(input: string): string {\n      return input.replace(SCRIPT_REGEX, '');\n    }\n  })\n);\n\n/**\n * Simple html sanitization converter to preserve whitelisted elements and attributes on a bound property containing html.\n */\nexport class SanitizeValueConverter {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [ISanitizer];\n\n  public static register: IRegistry['register'];\n\n  private readonly sanitizer: ISanitizer;\n\n  constructor(sanitizer: ISanitizer) {\n    this.sanitizer = sanitizer;\n  }\n\n /**\n  * Process the provided markup that flows to the view.\n  * @param untrustedMarkup The untrusted markup to be sanitized.\n  */\n  public toView(untrustedMarkup: string): string|null {\n    if (untrustedMarkup === null || untrustedMarkup === undefined) {\n      return null;\n    }\n\n    return this.sanitizer.sanitize(untrustedMarkup);\n  }\n}\nValueConverterResource.define('sanitize', SanitizeValueConverter);\n","import { Reporter, Tracer } from '@aurelia/kernel';\nimport { INode, INodeSequence, IRenderLocation } from '../dom';\nimport {\n  IAttach,\n  IBindScope,\n  ILifecycle,\n  ILifecycleUnbind,\n  IMountable,\n  IRenderContext,\n  IView,\n  IViewCache,\n  IViewFactory,\n  State\n} from '../lifecycle';\nimport { IScope, LifecycleFlags } from '../observation';\nimport { ITemplate } from '../rendering-engine';\nimport { $attachView, $cacheView, $detachView, $mountView, $unmountView } from './lifecycle-attach';\nimport { $bindView, $unbindView } from './lifecycle-bind';\n\nconst slice = Array.prototype.slice;\n\n/** @internal */\nexport interface View<T extends INode = INode> extends IView<T> {}\n\n/** @internal */\nexport class View<T extends INode = INode> implements IView<T> {\n  public $bindableHead: IBindScope;\n  public $bindableTail: IBindScope;\n\n  public $nextBind: IBindScope;\n  public $prevBind: IBindScope;\n\n  public $attachableHead: IAttach;\n  public $attachableTail: IAttach;\n\n  public $nextAttach: IAttach;\n  public $prevAttach: IAttach;\n\n  public $nextMount: IMountable;\n  public $nextUnmount: IMountable;\n\n  public $nextUnbindAfterDetach: ILifecycleUnbind;\n\n  public $state: State;\n  public $scope: IScope;\n  public $nodes: INodeSequence<T>;\n  public $context: IRenderContext<T>;\n  public cache: IViewCache<T>;\n  public location: IRenderLocation<T>;\n  public isFree: boolean;\n\n  public readonly $lifecycle: ILifecycle;\n\n  constructor($lifecycle: ILifecycle, cache: IViewCache<T>) {\n    this.$bindableHead = null;\n    this.$bindableTail = null;\n\n    this.$nextBind = null;\n    this.$prevBind = null;\n\n    this.$attachableHead = null;\n    this.$attachableTail = null;\n\n    this.$nextAttach = null;\n    this.$prevAttach = null;\n\n    this.$nextMount = null;\n    this.$nextUnmount = null;\n\n    this.$nextUnbindAfterDetach = null;\n\n    this.$state = State.none;\n    this.$scope = null;\n    this.isFree = false;\n\n    this.$lifecycle = $lifecycle;\n    this.cache = cache;\n  }\n\n  /**\n   * Reserves this `View` for mounting at a particular `IRenderLocation`.\n   * Also marks this `View` such that it cannot be returned to the cache until\n   * it is released again.\n   *\n   * @param location The RenderLocation before which the view will be appended to the DOM.\n   */\n  public hold(location: IRenderLocation<T>): void {\n    if (Tracer.enabled) { Tracer.enter('View.hold', slice.call(arguments)); }\n    this.isFree = false;\n    this.location = location;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  /**\n   * Marks this `View` such that it can be returned to the cache when it is unmounted.\n   *\n   * If this `View` is not currently attached, it will be unmounted immediately.\n   *\n   * @param flags The `LifecycleFlags` to pass to the unmount operation (only effective\n   * if the view is already in detached state).\n   *\n   * @returns Whether this `View` can/will be returned to cache\n   */\n  public release(flags: LifecycleFlags): boolean {\n    if (Tracer.enabled) { Tracer.enter('View.release', slice.call(arguments)); }\n    this.isFree = true;\n    if (this.$state & State.isAttached) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return this.cache.canReturnToCache(this);\n    }\n\n    if (Tracer.enabled) { Tracer.leave(); }\n    return !!this.$unmount(flags);\n  }\n\n  public lockScope(scope: IScope): void {\n    if (Tracer.enabled) { Tracer.enter('View.lockScope', slice.call(arguments)); }\n    this.$scope = scope;\n    this.$bind = lockedBind;\n    this.$unbind = lockedUnbind;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n}\n\n/** @internal */\nexport class ViewFactory<T extends INode = INode> implements IViewFactory<T> {\n  public static maxCacheSize: number = 0xFFFF;\n\n  public isCaching: boolean;\n  public name: string;\n\n  private cache: View<T>[];\n  private cacheSize: number;\n  private readonly lifecycle: ILifecycle;\n  private readonly template: ITemplate<T>;\n\n  constructor(name: string, template: ITemplate<T>, lifecycle: ILifecycle) {\n    this.isCaching = false;\n\n    this.cacheSize = -1;\n    this.cache = null;\n    this.lifecycle = lifecycle;\n    this.name = name;\n    this.template = template;\n  }\n\n  public setCacheSize(size: number | '*', doNotOverrideIfAlreadySet: boolean): void {\n    if (size) {\n      if (size === '*') {\n        size = ViewFactory.maxCacheSize;\n      } else if (typeof size === 'string') {\n        size = parseInt(size, 10);\n      }\n\n      if (this.cacheSize === -1 || !doNotOverrideIfAlreadySet) {\n        this.cacheSize = size;\n      }\n    }\n\n    if (this.cacheSize > 0) {\n      this.cache = [];\n    } else {\n      this.cache = null;\n    }\n\n    this.isCaching = this.cacheSize > 0;\n  }\n\n  public canReturnToCache(view: IView<T>): boolean {\n    return this.cache !== null && this.cache.length < this.cacheSize;\n  }\n\n  public tryReturnToCache(view: View<T>): boolean {\n    if (this.canReturnToCache(view)) {\n      view.$cache(LifecycleFlags.none);\n      this.cache.push(view);\n      return true;\n    }\n\n    return false;\n  }\n\n  public create(): IView<T> {\n    const cache = this.cache;\n    let view: View<T>;\n\n    if (cache !== null && cache.length > 0) {\n      view = cache.pop();\n      view.$state &= ~State.isCached;\n      return view;\n    }\n\n    view = new View<T>(this.lifecycle, this);\n    this.template.render(view);\n    if (!view.$nodes) {\n      throw Reporter.error(90);\n    }\n    return view;\n  }\n}\n\nfunction lockedBind<T extends INode = INode>(this: View<T>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`View.lockedBind`, slice.call(arguments)); }\n  if (this.$state & State.isBound) {\n    if (Tracer.enabled) { Tracer.leave(); }\n    return;\n  }\n\n  flags |= LifecycleFlags.fromBind;\n  const lockedScope = this.$scope;\n  let current = this.$bindableHead;\n  while (current !== null) {\n    current.$bind(flags, lockedScope);\n    current = current.$nextBind;\n  }\n\n  this.$state |= State.isBound;\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\nfunction lockedUnbind<T extends INode = INode>(this: IView<T>, flags: LifecycleFlags): void {\n  if (Tracer.enabled) { Tracer.enter(`View.lockedUnbind`, slice.call(arguments)); }\n  if (this.$state & State.isBound) {\n    // add isUnbinding flag\n    this.$state |= State.isUnbinding;\n\n    flags |= LifecycleFlags.fromUnbind;\n\n    let current = this.$bindableTail;\n    while (current !== null) {\n      current.$unbind(flags);\n      current = current.$prevBind;\n    }\n\n    // remove isBound and isUnbinding flags\n    this.$state &= ~(State.isBound | State.isUnbinding);\n  }\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n((proto: IView): void => {\n  proto.$bind = $bindView;\n  proto.$unbind = $unbindView;\n  proto.$attach = $attachView;\n  proto.$detach = $detachView;\n  proto.$cache = $cacheView;\n  proto.$mount = $mountView;\n  proto.$unmount = $unmountView;\n})(View.prototype);\n","import {\n  all,\n  DI,\n  IContainer,\n  IDisposable,\n  IIndexable,\n  Immutable,\n  ImmutableArray,\n  InterfaceSymbol,\n  IRegistry,\n  IResolver,\n  IResourceDescriptions,\n  PLATFORM,\n  Reporter,\n  RuntimeCompilationResources,\n  Writable\n} from '@aurelia/kernel';\nimport {\n  BindableDefinitions,\n  buildTemplateDefinition,\n  customElementBehavior,\n  InstructionTypeName,\n  ITargetedInstruction,\n  ITemplateDefinition,\n  TemplateDefinition,\n  TemplatePartDefinitions\n} from './definitions';\nimport { IDOM, INode, INodeSequenceFactory, IRenderLocation, NodeSequence } from './dom';\nimport {\n  ILifecycle,\n  IRenderable,\n  IRenderContext,\n  IViewFactory\n} from './lifecycle';\nimport {\n  IAccessor,\n  IPropertySubscriber,\n  ISubscribable,\n  ISubscriberCollection,\n  LifecycleFlags,\n  MutationKind\n} from './observation';\nimport { SelfObserver } from './observation/self-observer';\nimport { subscriberCollection } from './observation/subscriber-collection';\nimport { ICustomAttribute, ICustomAttributeType } from './resources/custom-attribute';\nimport { ICustomElement, ICustomElementType } from './resources/custom-element';\nimport { ViewFactory } from './templating/view';\n\nexport interface ITemplateCompiler {\n  readonly name: string;\n  compile(dom: IDOM, definition: ITemplateDefinition, resources: IResourceDescriptions, viewCompileFlags?: ViewCompileFlags): TemplateDefinition;\n}\n\nexport const ITemplateCompiler = DI.createInterface<ITemplateCompiler>('ITemplateCompiler').noDefault();\n\nexport enum ViewCompileFlags {\n  none        = 0b0_001,\n  surrogate   = 0b0_010,\n  shadowDOM   = 0b0_100,\n}\n\nexport interface ITemplateFactory<T extends INode = INode> {\n  create(parentRenderContext: IRenderContext<T>, definition: TemplateDefinition): ITemplate<T>;\n}\n\nexport const ITemplateFactory = DI.createInterface<ITemplateFactory>('ITemplateFactory').noDefault();\n\n// The basic template abstraction that allows consumers to create\n// instances of an INodeSequence on-demand. Templates are contextual in that they are, in the very least,\n// part of a particular application, with application-level resources, but they also may have their\n// own scoped resources or be part of another view (via a template controller) which provides a\n// context for the template.\nexport interface ITemplate<T extends INode = INode> {\n  readonly renderContext: IRenderContext<T>;\n  readonly dom: IDOM<T>;\n  render(renderable: IRenderable<T>, host?: T, parts?: Immutable<Record<string, ITemplateDefinition>>): void;\n}\n\n// This is the main implementation of ITemplate.\n// It is used to create instances of IView based on a compiled TemplateDefinition.\n// TemplateDefinitions are hand-coded today, but will ultimately be the output of the\n// TemplateCompiler either through a JIT or AOT process.\n// Essentially, CompiledTemplate wraps up the small bit of code that is needed to take a TemplateDefinition\n// and create instances of it on demand.\nexport class CompiledTemplate<T extends INode = INode> implements ITemplate {\n  public readonly factory: INodeSequenceFactory<T>;\n  public readonly renderContext: IRenderContext<T>;\n  public readonly dom: IDOM<T>;\n\n  private readonly definition: TemplateDefinition;\n\n  constructor(dom: IDOM<T>, definition: TemplateDefinition, factory: INodeSequenceFactory<T>, renderContext: IRenderContext<T>) {\n    this.dom = dom;\n    this.definition = definition;\n    this.factory = factory;\n    this.renderContext = renderContext;\n  }\n\n  public render(renderable: IRenderable<T>, host?: T, parts?: TemplatePartDefinitions): void {\n    const nodes = (renderable as Writable<IRenderable>).$nodes = this.factory.createNodeSequence();\n    (renderable as Writable<IRenderable>).$context = this.renderContext;\n    this.renderContext.render(renderable, nodes.findTargets(), this.definition, host, parts);\n  }\n}\n\n// This is an implementation of ITemplate that always returns a node sequence representing \"no DOM\" to render.\n/** @internal */\nexport const noViewTemplate: ITemplate = {\n  renderContext: null,\n  dom: null,\n  render(renderable: IRenderable): void {\n    (renderable as Writable<IRenderable>).$nodes = NodeSequence.empty;\n    (renderable as Writable<IRenderable>).$context = null;\n  }\n};\n\nconst defaultCompilerName = 'default';\n\nexport interface IInstructionTypeClassifier<TType extends string = string> {\n  instructionType: TType;\n}\n\nexport interface IInstructionRenderer<TType extends InstructionTypeName = InstructionTypeName> extends Partial<IInstructionTypeClassifier<TType>> {\n  render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: unknown, instruction: ITargetedInstruction, ...rest: unknown[]): void;\n}\n\nexport const IInstructionRenderer = DI.createInterface<IInstructionRenderer>('IInstructionRenderer').noDefault();\n\nexport interface IRenderer {\n  instructionRenderers: Record<string, IInstructionRenderer>;\n  render(\n    dom: IDOM,\n    context: IRenderContext,\n    renderable: IRenderable,\n    targets: ArrayLike<INode>,\n    templateDefinition: TemplateDefinition,\n    host?: INode,\n    parts?: TemplatePartDefinitions\n  ): void;\n}\n\nexport const IRenderer = DI.createInterface<IRenderer>('IRenderer').noDefault();\n\nexport interface IRenderingEngine {\n  getElementTemplate<T extends INode = INode>(\n    dom: IDOM<T>,\n    definition: TemplateDefinition,\n    parentContext: IRenderContext<T> | null,\n    componentType: ICustomElementType<T> | null\n  ): ITemplate<T>;\n\n  getViewFactory<T extends INode = INode>(\n    dom: IDOM<T>,\n    source: Immutable<ITemplateDefinition>,\n    parentContext: IRenderContext<T> | null\n  ): IViewFactory<T>;\n\n  applyRuntimeBehavior<T extends INode = INode>(Type: ICustomAttributeType<T>, instance: ICustomAttribute<T>): void;\n  applyRuntimeBehavior<T extends INode = INode>(Type: ICustomElementType<T>, instance: ICustomElement<T>): void;\n}\n\nexport const IRenderingEngine = DI.createInterface<IRenderingEngine>('IRenderingEngine').withDefault(x => x.singleton(RenderingEngine));\n\n/** @internal */\nexport class RenderingEngine implements IRenderingEngine {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IContainer, ITemplateFactory, ILifecycle, all(ITemplateCompiler)];\n\n  private readonly behaviorLookup: Map<ICustomElementType | ICustomAttributeType, RuntimeBehavior>;\n  private readonly compilers: Record<string, ITemplateCompiler>;\n  private readonly container: IContainer;\n  private readonly templateFactory: ITemplateFactory;\n  private readonly viewFactoryLookup: Map<Immutable<ITemplateDefinition>, IViewFactory>;\n  private readonly lifecycle: ILifecycle;\n  private readonly templateLookup: Map<TemplateDefinition, ITemplate>;\n\n  constructor(container: IContainer, templateFactory: ITemplateFactory, lifecycle: ILifecycle, templateCompilers: ITemplateCompiler[]) {\n    this.behaviorLookup = new Map();\n    this.container = container;\n    this.templateFactory = templateFactory;\n    this.viewFactoryLookup = new Map();\n    this.lifecycle = lifecycle;\n    this.templateLookup = new Map();\n\n    this.compilers = templateCompilers.reduce(\n      (acc, item) => {\n        acc[item.name] = item;\n        return acc;\n      },\n      Object.create(null)\n    );\n  }\n\n  public getElementTemplate<T extends INode = INode>(\n    dom: IDOM<T>,\n    definition: TemplateDefinition,\n    parentContext: IRenderContext<T> | null,\n    componentType: ICustomElementType<T> | null\n  ): ITemplate<T> {\n    if (!definition) {\n      return null;\n    }\n\n    let found = this.templateLookup.get(definition);\n\n    if (!found) {\n      found = this.templateFromSource(dom, definition, parentContext, componentType);\n\n      this.templateLookup.set(definition, found);\n    }\n\n    return found as ITemplate<T>;\n  }\n\n  public getViewFactory<T extends INode = INode>(\n    dom: IDOM<T>,\n    definition: Immutable<ITemplateDefinition>,\n    parentContext: IRenderContext<T> | null\n  ): IViewFactory<T> {\n    if (!definition) {\n      return null;\n    }\n\n    let factory = this.viewFactoryLookup.get(definition);\n\n    if (!factory) {\n      const validSource = buildTemplateDefinition(null, definition);\n      const template = this.templateFromSource(dom, validSource, parentContext, null);\n      factory = new ViewFactory(validSource.name, template, this.lifecycle);\n      factory.setCacheSize(validSource.cache, true);\n      this.viewFactoryLookup.set(definition, factory);\n    }\n\n    return factory as IViewFactory<T>;\n  }\n\n  public applyRuntimeBehavior(Type: ICustomAttributeType | ICustomElementType, instance: ICustomAttribute | ICustomElement): void {\n    let found = this.behaviorLookup.get(Type);\n\n    if (!found) {\n      found = RuntimeBehavior.create(Type);\n      this.behaviorLookup.set(Type, found);\n    }\n\n    found.applyTo(instance, this.lifecycle);\n  }\n\n  private templateFromSource(\n    dom: IDOM,\n    definition: TemplateDefinition,\n    parentContext: IRenderContext | null,\n    componentType: ICustomElementType | null\n  ): ITemplate {\n    if (parentContext === null) {\n      parentContext = this.container as ExposedContext;\n    }\n\n    if (definition.template !== null) {\n      const renderContext = createRenderContext(dom, parentContext, definition.dependencies, componentType) as ExposedContext;\n\n      if (definition.build.required) {\n        const compilerName = definition.build.compiler || defaultCompilerName;\n        const compiler = this.compilers[compilerName];\n\n        if (compiler === undefined) {\n          throw Reporter.error(20, compilerName);\n        }\n\n        definition = compiler.compile(dom, definition as ITemplateDefinition, new RuntimeCompilationResources(renderContext), ViewCompileFlags.surrogate);\n      }\n\n      return this.templateFactory.create(renderContext, definition);\n    }\n\n    return noViewTemplate;\n  }\n}\n\nexport function createRenderContext(\n  dom: IDOM,\n  parentRenderContext: IRenderContext,\n  dependencies: ImmutableArray<IRegistry>,\n  componentType: ICustomElementType | null\n): IRenderContext {\n  const context = parentRenderContext.createChild() as ExposedContext;\n  const renderableProvider = new InstanceProvider();\n  const elementProvider = new InstanceProvider();\n  const instructionProvider = new InstanceProvider<ITargetedInstruction>();\n  const factoryProvider = new ViewFactoryProvider();\n  const renderLocationProvider = new InstanceProvider<IRenderLocation>();\n  const renderer = context.get(IRenderer);\n\n  dom.registerElementResolver(context, elementProvider);\n\n  context.registerResolver(IViewFactory, factoryProvider);\n  context.registerResolver(IRenderable, renderableProvider);\n  context.registerResolver(ITargetedInstruction, instructionProvider);\n  context.registerResolver(IRenderLocation, renderLocationProvider);\n\n  if (dependencies) {\n    context.register(...dependencies);\n  }\n\n  //If the element has a view, support Recursive Components by adding self to own view template container.\n  if (componentType) {\n    componentType.register(context);\n  }\n\n  context.render = function(this: IRenderContext, renderable: IRenderable, targets: ArrayLike<INode>, templateDefinition: TemplateDefinition, host?: INode, parts?: TemplatePartDefinitions): void {\n    renderer.render(dom, this, renderable, targets, templateDefinition, host, parts);\n  };\n\n  context.beginComponentOperation = function(renderable: IRenderable, target: INode, instruction: ITargetedInstruction, factory: IViewFactory | null, parts?: TemplatePartDefinitions, location?: IRenderLocation): IDisposable {\n    renderableProvider.prepare(renderable);\n    elementProvider.prepare(target);\n    instructionProvider.prepare(instruction);\n\n    if (factory) {\n      factoryProvider.prepare(factory, parts);\n    }\n\n    if (location) {\n      renderLocationProvider.prepare(location);\n    }\n\n    return context;\n  };\n\n  context.dispose = function(): void {\n    factoryProvider.dispose();\n    renderableProvider.dispose();\n    instructionProvider.dispose();\n    elementProvider.dispose();\n    renderLocationProvider.dispose();\n  };\n\n  return context;\n}\n\n/** @internal */\nexport class InstanceProvider<T> implements IResolver {\n  private instance: T | null;\n\n  constructor() {\n    this.instance = null;\n  }\n\n  public prepare(instance: T): void {\n    this.instance = instance;\n  }\n\n  public resolve(handler: IContainer, requestor: IContainer): T | null {\n    if (this.instance === undefined) { // unmet precondition: call prepare\n      throw Reporter.error(50); // TODO: organize error codes\n    }\n    return this.instance;\n  }\n\n  public dispose(): void {\n    this.instance = null;\n  }\n}\n\n/** @internal */\nexport class ViewFactoryProvider implements IResolver {\n  private factory: IViewFactory | null;\n  private replacements: TemplatePartDefinitions;\n\n  public prepare(factory: IViewFactory, parts: TemplatePartDefinitions): void {\n    this.factory = factory;\n    this.replacements = parts || PLATFORM.emptyObject;\n  }\n\n  public resolve(handler: IContainer, requestor: ExposedContext): IViewFactory {\n    const factory = this.factory;\n    if (factory === undefined || factory === null) { // unmet precondition: call prepare\n      throw Reporter.error(50); // TODO: organize error codes\n    }\n    if (!factory.name || !factory.name.length) { // unmet invariant: factory must have a name\n      throw Reporter.error(51); // TODO: organize error codes\n    }\n    const found = this.replacements[factory.name];\n    if (found) {\n      const renderingEngine = handler.get(IRenderingEngine);\n      const dom = handler.get(IDOM);\n      return renderingEngine.getViewFactory(dom, found, requestor);\n    }\n\n    return factory;\n  }\n\n  public dispose(): void {\n    this.factory = null;\n    this.replacements = PLATFORM.emptyObject;\n  }\n}\n\nexport interface IChildrenObserver extends\n  IAccessor,\n  ISubscribable<MutationKind.instance>,\n  ISubscriberCollection<MutationKind.instance> { }\n\n/** @internal */\n@subscriberCollection(MutationKind.instance)\nexport class ChildrenObserver implements Partial<IChildrenObserver> {\n  public hasChanges: boolean;\n\n  private readonly customElement: ICustomElement & { $childrenChanged?(): void };\n  private readonly lifecycle: ILifecycle;\n  private children: ICustomElement[];\n  private observing: boolean;\n\n  constructor(lifecycle: ILifecycle, customElement: ICustomElement & { $childrenChanged?(): void }) {\n    this.hasChanges = false;\n\n    this.children = null;\n    this.customElement = customElement;\n    this.lifecycle = lifecycle;\n    this.observing = false;\n  }\n\n  public getValue(): ICustomElement[] {\n    if (!this.observing) {\n      this.observing = true;\n      this.customElement.$projector.subscribeToChildrenChange(() => { this.onChildrenChanged(); });\n      this.children = findElements(this.customElement.$projector.children);\n    }\n\n    return this.children;\n  }\n\n  public setValue(newValue: unknown): void { /* do nothing */ }\n\n  public flush(this: ChildrenObserver & IChildrenObserver, flags: LifecycleFlags): void {\n    this.callSubscribers(this.children, undefined, flags | LifecycleFlags.updateTargetInstance);\n    this.hasChanges = false;\n  }\n\n  public subscribe(this: ChildrenObserver & IChildrenObserver, subscriber: IPropertySubscriber): void {\n    this.addSubscriber(subscriber);\n  }\n\n  public unsubscribe(this: ChildrenObserver & IChildrenObserver, subscriber: IPropertySubscriber): void {\n    this.removeSubscriber(subscriber);\n  }\n\n  private onChildrenChanged(): void {\n    this.children = findElements(this.customElement.$projector.children);\n\n    if ('$childrenChanged' in this.customElement) {\n      this.customElement.$childrenChanged();\n    }\n\n    this.lifecycle.enqueueFlush(this).catch(error => { throw error; });\n    this.hasChanges = true;\n  }\n}\n\n/** @internal */\nexport function findElements(nodes: ArrayLike<unknown>): ICustomElement[] {\n  const components: ICustomElement[] = [];\n\n  for (let i = 0, ii = nodes.length; i < ii; ++i) {\n    const current = nodes[i];\n    const component = customElementBehavior(current);\n\n    if (component !== null) {\n      components.push(component);\n    }\n  }\n\n  return components;\n}\n\n/** @internal */\nexport class RuntimeBehavior {\n  public bindables: BindableDefinitions;\n\n  private constructor() {}\n\n  public static create(Component: ICustomElementType | ICustomAttributeType): RuntimeBehavior {\n    const behavior = new RuntimeBehavior();\n\n    behavior.bindables = Component.description.bindables;\n\n    return behavior;\n  }\n\n  public applyTo(instance: ICustomAttribute | ICustomElement, lifecycle: ILifecycle): void {\n    instance.$lifecycle = lifecycle;\n    if ('$projector' in instance) {\n      this.applyToElement(lifecycle, instance);\n    } else {\n      this.applyToCore(instance);\n    }\n  }\n\n  private applyToElement(lifecycle: ILifecycle, instance: ICustomElement): void {\n    const observers = this.applyToCore(instance);\n\n    observers.$children = new ChildrenObserver(lifecycle, instance);\n\n    Reflect.defineProperty(instance, '$children', {\n      enumerable: false,\n      get: function(): unknown {\n        return this['$observers'].$children.getValue();\n      }\n    });\n  }\n\n  private applyToCore(instance: ICustomAttribute | ICustomElement): IIndexable {\n    const observers = {};\n    const bindables = this.bindables;\n    const observableNames = Object.getOwnPropertyNames(bindables);\n\n    for (let i = 0, ii = observableNames.length; i < ii; ++i) {\n      const name = observableNames[i];\n\n      observers[name] = new SelfObserver(\n        instance,\n        name,\n        bindables[name].callback\n      );\n\n      createGetterSetter(instance, name);\n    }\n\n    Reflect.defineProperty(instance, '$observers', {\n      enumerable: false,\n      value: observers\n    });\n\n    return observers;\n  }\n}\n\nfunction createGetterSetter(instance: ICustomAttribute | ICustomElement, name: string): void {\n  Reflect.defineProperty(instance, name, {\n    enumerable: true,\n    get: function(): unknown { return this['$observers'][name].getValue(); },\n    set: function(value: unknown): void { this['$observers'][name].setValue(value, LifecycleFlags.updateTargetInstance); }\n  });\n}\n\n/** @internal */\nexport type ExposedContext = IRenderContext & IDisposable & IContainer;\n","import { DI, IContainer, IRegistry, PLATFORM, Profiler, Registration } from '@aurelia/kernel';\nimport { IDOM, INode } from './dom';\nimport { LifecycleFlags } from './observation';\nimport { ExposedContext, IRenderingEngine } from './rendering-engine';\nimport { CustomElementResource, ICustomElement, ICustomElementType, IProjectorLocator } from './resources/custom-element';\n\nconst { enter: enterStart, leave: leaveStart } = Profiler.createTimer('Aurelia.start');\nconst { enter: enterStop, leave: leaveStop } = Profiler.createTimer('Aurelia.stop');\n\nexport interface ISinglePageApp<THost extends INode = INode> {\n  dom?: IDOM;\n  host: THost;\n  component: unknown;\n}\n\nexport class Aurelia {\n  private readonly container: IContainer;\n  private readonly components: ICustomElement[];\n  private readonly startTasks: (() => void)[];\n  private readonly stopTasks: (() => void)[];\n  private isStarted: boolean;\n  private _root: ICustomElement | null;\n\n  constructor(container: IContainer = DI.createContainer()) {\n    this.container = container;\n    this.components = [];\n    this.startTasks = [];\n    this.stopTasks = [];\n    this.isStarted = false;\n    this._root = null;\n\n    Registration\n      .instance(Aurelia, this)\n      .register(container, Aurelia);\n  }\n\n  public register(...params: (IRegistry | Record<string, Partial<IRegistry>>)[]): this {\n    this.container.register(...params);\n    return this;\n  }\n\n  public app(config: ISinglePageApp): this {\n    const host = config.host as INode & {$au?: Aurelia | null};\n    let dom: IDOM;\n    if (this.container.has(IDOM, false)) {\n      dom = this.container.get(IDOM);\n    } else {\n      const domInitializer = this.container.get(IDOMInitializer);\n      dom = domInitializer.initialize(config);\n    }\n    let component: ICustomElement;\n    const componentOrType = config.component as ICustomElement | ICustomElementType;\n    if (CustomElementResource.isType(componentOrType as ICustomElementType)) {\n      this.container.register(componentOrType as ICustomElementType);\n      component = this.container.get<ICustomElement>(CustomElementResource.keyFrom((componentOrType as ICustomElementType).description.name));\n    } else {\n      component = componentOrType as ICustomElement;\n    }\n\n    const startTask = () => {\n      host.$au = this;\n      if (!this.components.includes(component)) {\n        this._root = component;\n        this.components.push(component);\n        const re = this.container.get(IRenderingEngine);\n        const pl = this.container.get(IProjectorLocator);\n        component.$hydrate(dom, pl, re, host, this.container as ExposedContext);\n      }\n\n      component.$bind(LifecycleFlags.fromStartTask | LifecycleFlags.fromBind, null);\n      component.$attach(LifecycleFlags.fromStartTask | LifecycleFlags.fromAttach);\n    };\n\n    this.startTasks.push(startTask);\n\n    this.stopTasks.push(() => {\n      component.$detach(LifecycleFlags.fromStopTask | LifecycleFlags.fromDetach);\n      component.$unbind(LifecycleFlags.fromStopTask | LifecycleFlags.fromUnbind);\n      host.$au = null;\n    });\n\n    if (this.isStarted) {\n      startTask();\n    }\n\n    return this;\n  }\n\n  public root(): ICustomElement | null {\n    return this._root;\n  }\n\n  public start(): this {\n    if (Profiler.enabled) { enterStart(); }\n    for (const runStartTask of this.startTasks) {\n      runStartTask();\n    }\n    this.isStarted = true;\n    if (Profiler.enabled) { leaveStart(); }\n    return this;\n  }\n\n  public stop(): this {\n    if (Profiler.enabled) { enterStop(); }\n    this.isStarted = false;\n    for (const runStopTask of this.stopTasks) {\n      runStopTask();\n    }\n    if (Profiler.enabled) { leaveStop(); }\n    return this;\n  }\n}\n(PLATFORM.global as typeof PLATFORM.global & {Aurelia: unknown}).Aurelia = Aurelia;\n\nexport const IDOMInitializer = DI.createInterface<IDOMInitializer>('IDOMInitializer').noDefault();\n\nexport interface IDOMInitializer {\n  initialize(config?: ISinglePageApp): IDOM;\n}\n","import {\n  all,\n  Class,\n  IContainer,\n  InterfaceSymbol,\n  IRegistry,\n  IResolver,\n  Registration,\n  Reporter,\n  Tracer\n} from '@aurelia/kernel';\nimport { Binding } from './binding/binding';\nimport { BindingMode } from './binding/binding-mode';\nimport { Call } from './binding/call';\nimport { BindingType, IExpressionParser } from './binding/expression-parser';\nimport { InterpolationBinding, MultiInterpolationBinding } from './binding/interpolation-binding';\nimport { LetBinding } from './binding/let-binding';\nimport { Ref } from './binding/ref';\nimport {\n  customAttributeKey,\n  customElementKey,\n  ICallBindingInstruction,\n  IElementHydrationOptions,\n  IHydrateAttributeInstruction,\n  IHydrateElementInstruction,\n  IHydrateLetElementInstruction,\n  IHydrateTemplateController,\n  IInterpolationInstruction,\n  IIteratorBindingInstruction,\n  InstructionTypeName,\n  IPropertyBindingInstruction,\n  IRefBindingInstruction,\n  ISetPropertyInstruction,\n  TargetedInstructionType,\n  TemplateDefinition,\n  TemplatePartDefinitions\n} from './definitions';\nimport { IDOM, INode } from './dom';\nimport {\n  IAttach,\n  IAttachables,\n  IBindables,\n  IBindScope,\n  IRenderable,\n  IRenderContext,\n} from './lifecycle';\nimport { IObserverLocator } from './observation/observer-locator';\nimport {\n  IInstructionRenderer,\n  IInstructionTypeClassifier,\n  IRenderer,\n  IRenderingEngine\n} from './rendering-engine';\nimport { ICustomAttribute } from './resources/custom-attribute';\nimport { ICustomElement, IProjectorLocator } from './resources/custom-element';\n\nconst slice = Array.prototype.slice;\n\ntype DecoratableInstructionRenderer<TType extends string, TProto, TClass> = Class<TProto & Partial<IInstructionTypeClassifier<TType> & Pick<IInstructionRenderer, 'render'>>, TClass> & Partial<IRegistry>;\ntype DecoratedInstructionRenderer<TType extends string, TProto, TClass> =  Class<TProto & IInstructionTypeClassifier<TType> & Pick<IInstructionRenderer, 'render'>, TClass> & IRegistry;\n\ntype InstructionRendererDecorator<TType extends string> = <TProto, TClass>(target: DecoratableInstructionRenderer<TType, TProto, TClass>) => DecoratedInstructionRenderer<TType, TProto, TClass>;\n\nexport function instructionRenderer<TType extends string>(instructionType: TType): InstructionRendererDecorator<TType> {\n  return function decorator<TProto, TClass>(target: DecoratableInstructionRenderer<TType, TProto, TClass>): DecoratedInstructionRenderer<TType, TProto, TClass> {\n    // wrap the constructor to set the instructionType to the instance (for better performance than when set on the prototype)\n    const decoratedTarget = function(...args: unknown[]): TProto {\n      const instance = new target(...args);\n      instance.instructionType = instructionType;\n      return instance;\n    } as unknown as DecoratedInstructionRenderer<TType, TProto, TClass>;\n    // make sure we register the decorated constructor with DI\n    decoratedTarget.register = function register(container: IContainer): IResolver {\n      return Registration.singleton(IInstructionRenderer, decoratedTarget).register(container, IInstructionRenderer);\n    };\n    // copy over any static properties such as inject (set by preceding decorators)\n    // also copy the name, to be less confusing to users (so they can still use constructor.name for whatever reason)\n    // the length (number of ctor arguments) is copied for the same reason\n    const ownProperties = Object.getOwnPropertyDescriptors(target);\n    Object.keys(ownProperties).filter(prop => prop !== 'prototype').forEach(prop => {\n      Reflect.defineProperty(decoratedTarget, prop, ownProperties[prop]);\n    });\n    return decoratedTarget;\n  };\n}\n\n/* @internal */\nexport class Renderer implements IRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [all(IInstructionRenderer)];\n\n  public instructionRenderers: Record<InstructionTypeName, IInstructionRenderer>;\n\n  constructor(instructionRenderers: IInstructionRenderer[]) {\n    const record = this.instructionRenderers = {};\n    instructionRenderers.forEach(item => {\n      record[item.instructionType] = item;\n    });\n  }\n\n  public static register(container: IContainer): IResolver<IRenderer> {\n    return Registration.singleton(IRenderer, this).register(container);\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, targets: ArrayLike<INode>, definition: TemplateDefinition, host?: INode, parts?: TemplatePartDefinitions): void {\n    if (Tracer.enabled) { Tracer.enter('Renderer.render', slice.call(arguments)); }\n    const targetInstructions = definition.instructions;\n    const instructionRenderers = this.instructionRenderers;\n\n    if (targets.length !== targetInstructions.length) {\n      if (targets.length > targetInstructions.length) {\n        throw Reporter.error(30);\n      } else {\n        throw Reporter.error(31);\n      }\n    }\n    for (let i = 0, ii = targets.length; i < ii; ++i) {\n      const instructions = targetInstructions[i];\n      const target = targets[i];\n\n      for (let j = 0, jj = instructions.length; j < jj; ++j) {\n        const current = instructions[j];\n        instructionRenderers[current.type].render(dom, context, renderable, target, current, parts);\n      }\n    }\n\n    if (host) {\n      const surrogateInstructions = definition.surrogates;\n\n      for (let i = 0, ii = surrogateInstructions.length; i < ii; ++i) {\n        const current = surrogateInstructions[i];\n        instructionRenderers[current.type].render(dom, context, renderable, host, current, parts);\n      }\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\nexport function ensureExpression<TFrom>(parser: IExpressionParser, srcOrExpr: TFrom, bindingType: BindingType): Exclude<TFrom, string> {\n  if (typeof srcOrExpr === 'string') {\n    return parser.parse(srcOrExpr, bindingType) as unknown as Exclude<TFrom, string>;\n  }\n  return srcOrExpr as Exclude<TFrom, string>;\n}\n\nexport function addBindable(renderable: IBindables, bindable: IBindScope): void {\n  if (Tracer.enabled) { Tracer.enter('addBindable', slice.call(arguments)); }\n  bindable.$prevBind = renderable.$bindableTail;\n  bindable.$nextBind = null;\n  if (renderable.$bindableTail === null) {\n    renderable.$bindableHead = bindable;\n  } else {\n    renderable.$bindableTail.$nextBind = bindable;\n  }\n  renderable.$bindableTail = bindable;\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\nexport function addAttachable(renderable: IAttachables, attachable: IAttach): void {\n  if (Tracer.enabled) { Tracer.enter('addAttachable', slice.call(arguments)); }\n  attachable.$prevAttach = renderable.$attachableTail;\n  attachable.$nextAttach = null;\n  if (renderable.$attachableTail === null) {\n    renderable.$attachableHead = attachable;\n  } else {\n    renderable.$attachableTail.$nextAttach = attachable;\n  }\n  renderable.$attachableTail = attachable;\n  if (Tracer.enabled) { Tracer.leave(); }\n}\n\n@instructionRenderer(TargetedInstructionType.setProperty)\n/** @internal */\nexport class SetPropertyRenderer implements IInstructionRenderer {\n  public static readonly register: IRegistry['register'];\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: Record<string, unknown>, instruction: ISetPropertyInstruction): void {\n    if (Tracer.enabled) { Tracer.enter('SetPropertyRenderer.render', slice.call(arguments)); }\n    target[instruction.to] = instruction.value;\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\n@instructionRenderer(TargetedInstructionType.hydrateElement)\n/** @internal */\nexport class CustomElementRenderer implements IInstructionRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IRenderingEngine];\n  public static readonly register: IRegistry['register'];\n\n  private readonly renderingEngine: IRenderingEngine;\n\n  constructor(renderingEngine: IRenderingEngine) {\n    this.renderingEngine = renderingEngine;\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: INode, instruction: IHydrateElementInstruction): void {\n    if (Tracer.enabled) { Tracer.enter('CustomElementRenderer.render', slice.call(arguments)); }\n    const operation = context.beginComponentOperation(renderable, target, instruction, null, null, target, true);\n    const component = context.get<ICustomElement>(customElementKey(instruction.res));\n    const instructionRenderers = context.get(IRenderer).instructionRenderers;\n    const projectorLocator = context.get(IProjectorLocator);\n    const childInstructions = instruction.instructions;\n\n    component.$hydrate(dom, projectorLocator, this.renderingEngine, target, context, instruction as IElementHydrationOptions);\n\n    for (let i = 0, ii = childInstructions.length; i < ii; ++i) {\n      const current = childInstructions[i];\n      instructionRenderers[current.type].render(dom, context, renderable, component, current);\n    }\n\n    addBindable(renderable, component);\n    addAttachable(renderable, component);\n\n    operation.dispose();\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\n@instructionRenderer(TargetedInstructionType.hydrateAttribute)\n/** @internal */\nexport class CustomAttributeRenderer implements IInstructionRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IRenderingEngine];\n  public static readonly register: IRegistry['register'];\n\n  private readonly renderingEngine: IRenderingEngine;\n\n  constructor(renderingEngine: IRenderingEngine) {\n    this.renderingEngine = renderingEngine;\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: INode, instruction: IHydrateAttributeInstruction): void {\n    if (Tracer.enabled) { Tracer.enter('CustomAttributeRenderer.render', slice.call(arguments)); }\n    const operation = context.beginComponentOperation(renderable, target, instruction);\n    const component = context.get<ICustomAttribute>(customAttributeKey(instruction.res));\n    const instructionRenderers = context.get(IRenderer).instructionRenderers;\n    const childInstructions = instruction.instructions;\n\n    component.$hydrate(this.renderingEngine);\n\n    for (let i = 0, ii = childInstructions.length; i < ii; ++i) {\n      const current = childInstructions[i];\n      instructionRenderers[current.type].render(dom, context, renderable, component, current);\n    }\n\n    addBindable(renderable, component);\n    addAttachable(renderable, component);\n\n    operation.dispose();\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\n@instructionRenderer(TargetedInstructionType.hydrateTemplateController)\n/** @internal */\nexport class TemplateControllerRenderer implements IInstructionRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IRenderingEngine];\n  public static readonly register: IRegistry['register'];\n\n  private readonly renderingEngine: IRenderingEngine;\n\n  constructor(renderingEngine: IRenderingEngine) {\n    this.renderingEngine = renderingEngine;\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: INode, instruction: IHydrateTemplateController, parts?: TemplatePartDefinitions): void {\n    if (Tracer.enabled) { Tracer.enter('TemplateControllerRenderer.render', slice.call(arguments)); }\n    const factory = this.renderingEngine.getViewFactory(dom, instruction.def, context);\n    const operation = context.beginComponentOperation(renderable, target, instruction, factory, parts, dom.convertToRenderLocation(target), false);\n    const component = context.get<ICustomAttribute>(customAttributeKey(instruction.res));\n    const instructionRenderers = context.get(IRenderer).instructionRenderers;\n    const childInstructions = instruction.instructions;\n\n    component.$hydrate(this.renderingEngine);\n\n    if (instruction.link) {\n      (component as ICustomAttribute & { link(attachableTail: IAttach): void}).link(renderable.$attachableTail);\n    }\n\n    for (let i = 0, ii = childInstructions.length; i < ii; ++i) {\n      const current = childInstructions[i];\n      instructionRenderers[current.type].render(dom, context, renderable, component, current);\n    }\n\n    addBindable(renderable, component);\n    addAttachable(renderable, component);\n\n    operation.dispose();\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\n@instructionRenderer(TargetedInstructionType.hydrateLetElement)\n/** @internal */\nexport class LetElementRenderer implements IInstructionRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IExpressionParser, IObserverLocator];\n  public static readonly register: IRegistry['register'];\n\n  private readonly parser: IExpressionParser;\n  private readonly observerLocator: IObserverLocator;\n\n  constructor(parser: IExpressionParser, observerLocator: IObserverLocator) {\n    this.parser = parser;\n    this.observerLocator = observerLocator;\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: INode, instruction: IHydrateLetElementInstruction): void {\n    if (Tracer.enabled) { Tracer.enter('LetElementRenderer.render', slice.call(arguments)); }\n    dom.remove(target);\n    const childInstructions = instruction.instructions;\n    const toViewModel = instruction.toViewModel;\n    for (let i = 0, ii = childInstructions.length; i < ii; ++i) {\n      const childInstruction = childInstructions[i];\n      const expr = ensureExpression(this.parser, childInstruction.from, BindingType.IsPropertyCommand);\n      const bindable = new LetBinding(expr, childInstruction.to, this.observerLocator, context, toViewModel);\n      addBindable(renderable, bindable);\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\n@instructionRenderer(TargetedInstructionType.callBinding)\n/** @internal */\nexport class CallBindingRenderer implements IInstructionRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IExpressionParser, IObserverLocator];\n  public static readonly register: IRegistry['register'];\n\n  private readonly parser: IExpressionParser;\n  private readonly observerLocator: IObserverLocator;\n\n  constructor(parser: IExpressionParser, observerLocator: IObserverLocator) {\n    this.parser = parser;\n    this.observerLocator = observerLocator;\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: INode, instruction: ICallBindingInstruction): void {\n    if (Tracer.enabled) { Tracer.enter('CallBindingRenderer.render', slice.call(arguments)); }\n    const expr = ensureExpression(this.parser, instruction.from, BindingType.CallCommand);\n    const bindable = new Call(expr, target, instruction.to, this.observerLocator, context);\n    addBindable(renderable, bindable);\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\n@instructionRenderer(TargetedInstructionType.refBinding)\n/** @internal */\nexport class RefBindingRenderer implements IInstructionRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IExpressionParser];\n  public static readonly register: IRegistry['register'];\n\n  private readonly parser: IExpressionParser;\n\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: INode, instruction: IRefBindingInstruction): void {\n    if (Tracer.enabled) { Tracer.enter('RefBindingRenderer.render', slice.call(arguments)); }\n    const expr = ensureExpression(this.parser, instruction.from, BindingType.IsRef);\n    const bindable = new Ref(expr, target, context);\n    addBindable(renderable, bindable);\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\n@instructionRenderer(TargetedInstructionType.interpolation)\n/** @internal */\nexport class InterpolationBindingRenderer implements IInstructionRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IExpressionParser, IObserverLocator];\n  public static readonly register: IRegistry['register'];\n\n  private readonly parser: IExpressionParser;\n  private readonly observerLocator: IObserverLocator;\n\n  constructor(parser: IExpressionParser, observerLocator: IObserverLocator) {\n    this.parser = parser;\n    this.observerLocator = observerLocator;\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: INode, instruction: IInterpolationInstruction): void {\n    if (Tracer.enabled) { Tracer.enter('InterpolationBindingRenderer.render', slice.call(arguments)); }\n    let bindable: MultiInterpolationBinding | InterpolationBinding;\n    const expr = ensureExpression(this.parser, instruction.from, BindingType.Interpolation);\n    if (expr.isMulti) {\n      bindable = new MultiInterpolationBinding(this.observerLocator, expr, target, instruction.to, BindingMode.toView, context);\n    } else {\n      bindable = new InterpolationBinding(expr.firstExpression, expr, target, instruction.to, BindingMode.toView, this.observerLocator, context, true);\n    }\n    addBindable(renderable, bindable);\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\n@instructionRenderer(TargetedInstructionType.propertyBinding)\n/** @internal */\nexport class PropertyBindingRenderer implements IInstructionRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IExpressionParser, IObserverLocator];\n  public static readonly register: IRegistry['register'];\n\n  private readonly parser: IExpressionParser;\n  private readonly observerLocator: IObserverLocator;\n\n  constructor(parser: IExpressionParser, observerLocator: IObserverLocator) {\n    this.parser = parser;\n    this.observerLocator = observerLocator;\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: INode, instruction: IPropertyBindingInstruction): void {\n    if (Tracer.enabled) { Tracer.enter('PropertyBindingRenderer.render', slice.call(arguments)); }\n    const expr = ensureExpression(this.parser, instruction.from, BindingType.IsPropertyCommand | instruction.mode);\n    const bindable = new Binding(expr, target, instruction.to, instruction.mode, this.observerLocator, context);\n    addBindable(renderable, bindable);\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n\n@instructionRenderer(TargetedInstructionType.iteratorBinding)\n/** @internal */\nexport class IteratorBindingRenderer implements IInstructionRenderer {\n  public static readonly inject: ReadonlyArray<InterfaceSymbol<unknown>> = [IExpressionParser, IObserverLocator];\n  public static readonly register: IRegistry['register'];\n\n  private readonly parser: IExpressionParser;\n  private readonly observerLocator: IObserverLocator;\n\n  constructor(parser: IExpressionParser, observerLocator: IObserverLocator) {\n    this.parser = parser;\n    this.observerLocator = observerLocator;\n  }\n\n  public render(dom: IDOM, context: IRenderContext, renderable: IRenderable, target: INode, instruction: IIteratorBindingInstruction): void {\n    if (Tracer.enabled) { Tracer.enter('IteratorBindingRenderer.render', slice.call(arguments)); }\n    const expr = ensureExpression(this.parser, instruction.from, BindingType.ForCommand);\n    const bindable = new Binding(expr, target, instruction.to, BindingMode.toView, this.observerLocator, context);\n    addBindable(renderable, bindable);\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n}\n","import { DI, IContainer, IRegistry } from '@aurelia/kernel';\nimport { Lifecycle } from './lifecycle';\nimport { ObserverLocator } from './observation/observer-locator';\nimport {\n  CallBindingRenderer,\n  CustomAttributeRenderer,\n  CustomElementRenderer,\n  InterpolationBindingRenderer,\n  IteratorBindingRenderer,\n  LetElementRenderer,\n  PropertyBindingRenderer,\n  RefBindingRenderer,\n  Renderer,\n  SetPropertyRenderer,\n  TemplateControllerRenderer\n} from './renderer';\nimport { FromViewBindingBehavior, OneTimeBindingBehavior, ToViewBindingBehavior, TwoWayBindingBehavior } from './resources/binding-behaviors/binding-mode';\nimport { DebounceBindingBehavior } from './resources/binding-behaviors/debounce';\nimport { SignalBindingBehavior } from './resources/binding-behaviors/signals';\nimport { ThrottleBindingBehavior } from './resources/binding-behaviors/throttle';\nimport { Else, If } from './resources/custom-attributes/if';\nimport { Repeat } from './resources/custom-attributes/repeat';\nimport { Replaceable } from './resources/custom-attributes/replaceable';\nimport { With } from './resources/custom-attributes/with';\nimport { SanitizeValueConverter } from './resources/value-converters/sanitize';\n\nexport const IObserverLocatorRegistration = ObserverLocator as IRegistry;\nexport const ILifecycleRegistration = Lifecycle as IRegistry;\nexport const IRendererRegistration = Renderer as IRegistry;\n\n/**\n * Default implementations for the following interfaces:\n * - `IObserverLocator`\n * - `ILifecycle`\n * - `IRenderer`\n */\nexport const DefaultComponents = [\n  IObserverLocatorRegistration,\n  ILifecycleRegistration,\n  IRendererRegistration\n];\n\nexport const IfRegistration = If as IRegistry;\nexport const ElseRegistration = Else as IRegistry;\nexport const RepeatRegistration = Repeat as IRegistry;\nexport const ReplaceableRegistration = Replaceable as IRegistry;\nexport const WithRegistration = With as IRegistry;\nexport const SanitizeValueConverterRegistration = SanitizeValueConverter as IRegistry;\nexport const DebounceBindingBehaviorRegistration = DebounceBindingBehavior as IRegistry;\nexport const OneTimeBindingBehaviorRegistration = OneTimeBindingBehavior as IRegistry;\nexport const ToViewBindingBehaviorRegistration = ToViewBindingBehavior as IRegistry;\nexport const FromViewBindingBehaviorRegistration = FromViewBindingBehavior as IRegistry;\nexport const SignalBindingBehaviorRegistration = SignalBindingBehavior as IRegistry;\nexport const ThrottleBindingBehaviorRegistration = ThrottleBindingBehavior as IRegistry;\nexport const TwoWayBindingBehaviorRegistration = TwoWayBindingBehavior as IRegistry;\n\n/**\n * Default resources:\n * - Template controllers (`if`/`else`, `repeat`, `replaceable`, `with`)\n * - Value Converters (`sanitize`)\n * - Binding Behaviors (`oneTime`, `toView`, `fromView`, `twoWay`, `signal`, `debounce`, `throttle`)\n */\nexport const DefaultResources = [\n  IfRegistration,\n  ElseRegistration,\n  RepeatRegistration,\n  ReplaceableRegistration,\n  WithRegistration,\n  SanitizeValueConverterRegistration,\n  DebounceBindingBehaviorRegistration,\n  OneTimeBindingBehaviorRegistration,\n  ToViewBindingBehaviorRegistration,\n  FromViewBindingBehaviorRegistration,\n  SignalBindingBehaviorRegistration,\n  ThrottleBindingBehaviorRegistration,\n  TwoWayBindingBehaviorRegistration\n];\n\nexport const CallBindingRendererRegistration = CallBindingRenderer as IRegistry;\nexport const CustomAttributeRendererRegistration = CustomAttributeRenderer as IRegistry;\nexport const CustomElementRendererRegistration = CustomElementRenderer as IRegistry;\nexport const InterpolationBindingRendererRegistration = InterpolationBindingRenderer as IRegistry;\nexport const IteratorBindingRendererRegistration = IteratorBindingRenderer as IRegistry;\nexport const LetElementRendererRegistration = LetElementRenderer as IRegistry;\nexport const PropertyBindingRendererRegistration = PropertyBindingRenderer as IRegistry;\nexport const RefBindingRendererRegistration = RefBindingRenderer as IRegistry;\nexport const SetPropertyRendererRegistration = SetPropertyRenderer as IRegistry;\nexport const TemplateControllerRendererRegistration = TemplateControllerRenderer as IRegistry;\n\n/**\n * Default renderers for:\n * - PropertyBinding: `bind`, `one-time`, `to-view`, `from-view`, `two-way`\n * - IteratorBinding: `for`\n * - CallBinding: `call`\n * - RefBinding: `ref`\n * - InterpolationBinding: `${}`\n * - SetProperty\n * - `customElement` hydration\n * - `customAttribute` hydration\n * - `templateController` hydration\n * - `let` element hydration\n */\nexport const DefaultRenderers = [\n  PropertyBindingRendererRegistration,\n  IteratorBindingRendererRegistration,\n  CallBindingRendererRegistration,\n  RefBindingRendererRegistration,\n  InterpolationBindingRendererRegistration,\n  SetPropertyRendererRegistration,\n  CustomElementRendererRegistration,\n  CustomAttributeRendererRegistration,\n  TemplateControllerRendererRegistration,\n  LetElementRendererRegistration\n];\n\n/**\n * A DI configuration object containing environment/runtime-agnostic registrations:\n * - `DefaultComponents`\n * - `DefaultResources`\n * - `DefaultRenderers`\n */\nexport const RuntimeBasicConfiguration = {\n  /**\n   * Apply this configuration to the provided container.\n   */\n  register(container: IContainer): IContainer {\n    return container.register(\n      ...DefaultComponents,\n      ...DefaultResources,\n      ...DefaultRenderers\n    );\n  },\n  /**\n   * Create a new container with this configuration applied to it.\n   */\n  createContainer(): IContainer {\n    return this.register(DI.createContainer());\n  }\n};\n","import { AccessScope, BindingIdentifier, ForOfStatement, Interpolation, IsBindingBehavior } from './binding/ast';\nimport { BindingMode } from './binding/binding-mode';\nimport {\n  ICallBindingInstruction,\n  IHydrateAttributeInstruction,\n  IHydrateElementInstruction,\n  IHydrateLetElementInstruction,\n  IHydrateTemplateController,\n  IInterpolationInstruction,\n  IIteratorBindingInstruction,\n  ILetBindingInstruction,\n  IPropertyBindingInstruction,\n  IRefBindingInstruction,\n  ISetPropertyInstruction,\n  ITargetedInstruction,\n  ITemplateDefinition,\n  TargetedInstructionType\n} from './definitions';\n\nexport class InterpolationInstruction implements IInterpolationInstruction {\n  public type: TargetedInstructionType.interpolation;\n\n  public from: string | Interpolation;\n  public to: string;\n\n  constructor(from: string | Interpolation, to: string) {\n    this.type = TargetedInstructionType.interpolation;\n\n    this.from = from;\n    this.to = to;\n  }\n}\n\nexport class OneTimeBindingInstruction implements IPropertyBindingInstruction {\n  public type: TargetedInstructionType.propertyBinding;\n\n  public from: string | IsBindingBehavior;\n  public mode: BindingMode.oneTime;\n  public oneTime: true;\n  public to: string;\n\n  constructor(from: string | IsBindingBehavior, to: string) {\n    this.type = TargetedInstructionType.propertyBinding;\n\n    this.from = from;\n    this.mode = BindingMode.oneTime;\n    this.oneTime = true;\n    this.to = to;\n  }\n}\n\nexport class ToViewBindingInstruction implements IPropertyBindingInstruction {\n  public type: TargetedInstructionType.propertyBinding;\n\n  public from: string | IsBindingBehavior;\n  public mode: BindingMode.toView;\n  public oneTime: false;\n  public to: string;\n\n  constructor(from: string | IsBindingBehavior, to: string) {\n    this.type = TargetedInstructionType.propertyBinding;\n\n    this.from = from;\n    this.mode = BindingMode.toView;\n    this.oneTime = false;\n    this.to = to;\n  }\n}\n\nexport class FromViewBindingInstruction implements IPropertyBindingInstruction {\n  public type: TargetedInstructionType.propertyBinding;\n\n  public from: string | IsBindingBehavior;\n  public mode: BindingMode.fromView;\n  public oneTime: false;\n  public to: string;\n\n  constructor(from: string | IsBindingBehavior, to: string) {\n    this.type = TargetedInstructionType.propertyBinding;\n\n    this.from = from;\n    this.mode = BindingMode.fromView;\n    this.oneTime = false;\n    this.to = to;\n  }\n}\n\nexport class TwoWayBindingInstruction implements IPropertyBindingInstruction {\n  public type: TargetedInstructionType.propertyBinding = TargetedInstructionType.propertyBinding;\n\n  public from: string | IsBindingBehavior;\n  public mode: BindingMode.twoWay;\n  public oneTime: false;\n  public to: string;\n\n  constructor(from: string | IsBindingBehavior, to: string) {\n    this.type = TargetedInstructionType.propertyBinding;\n\n    this.from = from;\n    this.mode = BindingMode.twoWay;\n    this.oneTime = false;\n    this.to = to;\n  }\n}\n\nexport class IteratorBindingInstruction implements IIteratorBindingInstruction {\n  public type: TargetedInstructionType.iteratorBinding;\n\n  public from: string | ForOfStatement;\n  public to: string;\n\n  constructor(from: string | ForOfStatement, to: string) {\n    this.type = TargetedInstructionType.iteratorBinding;\n\n    this.from = from;\n    this.to = to;\n  }\n}\n\nexport class CallBindingInstruction implements ICallBindingInstruction {\n  public type: TargetedInstructionType.callBinding;\n\n  public from: string | IsBindingBehavior;\n  public to: string;\n\n  constructor(from: string | IsBindingBehavior, to: string) {\n    this.type = TargetedInstructionType.callBinding;\n\n    this.from = from;\n    this.to = to;\n  }\n}\n\nexport class RefBindingInstruction implements IRefBindingInstruction {\n  public type: TargetedInstructionType.refBinding;\n\n  public from: string | IsBindingBehavior;\n\n  constructor(from: string | IsBindingBehavior) {\n    this.type = TargetedInstructionType.refBinding;\n\n    this.from = from;\n  }\n}\n\nexport class SetPropertyInstruction implements ISetPropertyInstruction {\n  public type: TargetedInstructionType.setProperty;\n\n  public to: string;\n  public value: unknown;\n\n  constructor(value: unknown, to: string) {\n    this.type = TargetedInstructionType.setProperty;\n\n    this.to = to;\n    this.value = value;\n  }\n}\n\nexport class HydrateElementInstruction implements IHydrateElementInstruction {\n  public type: TargetedInstructionType.hydrateElement;\n\n  public instructions: ITargetedInstruction[];\n  public parts?: Record<string, ITemplateDefinition>;\n  public res: string;\n\n  constructor(res: string, instructions: ITargetedInstruction[], parts?: Record<string, ITemplateDefinition>) {\n    this.type = TargetedInstructionType.hydrateElement;\n\n    this.instructions = instructions;\n    this.parts = parts;\n    this.res = res;\n  }\n}\n\nexport class HydrateAttributeInstruction implements IHydrateAttributeInstruction {\n  public type: TargetedInstructionType.hydrateAttribute;\n\n  public instructions: ITargetedInstruction[];\n  public res: string;\n\n  constructor(res: string, instructions: ITargetedInstruction[]) {\n    this.type = TargetedInstructionType.hydrateAttribute;\n\n    this.instructions = instructions;\n    this.res = res;\n  }\n}\n\nexport class HydrateTemplateController implements IHydrateTemplateController {\n  public type: TargetedInstructionType.hydrateTemplateController;\n\n  public def: ITemplateDefinition;\n  public instructions: ITargetedInstruction[];\n  public link?: boolean;\n  public res: string;\n\n  constructor(def: ITemplateDefinition, res: string, instructions: ITargetedInstruction[], link?: boolean) {\n    this.type = TargetedInstructionType.hydrateTemplateController;\n\n    this.def = def;\n    this.instructions = instructions;\n    this.link = link;\n    this.res = res;\n  }\n}\n\nexport class LetElementInstruction implements IHydrateLetElementInstruction {\n  public type: TargetedInstructionType.hydrateLetElement;\n\n  public instructions: ILetBindingInstruction[];\n  public toViewModel: boolean;\n\n  constructor(instructions: ILetBindingInstruction[], toViewModel: boolean) {\n    this.type = TargetedInstructionType.hydrateLetElement;\n\n    this.instructions = instructions;\n    this.toViewModel = toViewModel;\n  }\n}\n\nexport class LetBindingInstruction implements ILetBindingInstruction {\n  public type: TargetedInstructionType.letBinding;\n\n  public from: string | IsBindingBehavior | Interpolation;\n  public to: string;\n\n  constructor(from: string | IsBindingBehavior | Interpolation, to: string) {\n    this.type = TargetedInstructionType.letBinding;\n\n    this.from = from;\n    this.to = to;\n  }\n}\n"],"names":["register","keyFrom","isType","define","RuntimeError","all","toView","oneTime","dispose","flush","proto","native","methods","observe","descriptorProps","def","$clear","$delete","toStringTag","noop","fromView","enter","leave","tslib_1.__decorate"],"mappings":"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"}