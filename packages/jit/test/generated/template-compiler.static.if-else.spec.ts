import { expect } from "chai";
import { DI } from "../../../kernel/src/index";
import { CustomElementResource, DOM, Aurelia } from "../../../runtime/src/index";
import { BasicConfiguration } from "../../src/index";

describe("generated.template-compiler.static.if-else", function generated_template_compiler_static_if_else() {
    function setup() {
        const container = DI.createContainer();
        container.register(BasicConfiguration);
        const au = new Aurelia(container);
        const host = DOM.createElement("div");
        return { au, host };
    }
    it("tag$01 text$01 if$01 variant$01 _", function tag$01_text$01_if$01_variant$01__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">a</div><div else>b</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$01 if$01 variant$02 _", function tag$01_text$01_if$01_variant$02__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">a</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$01 if$01 variant$03 _", function tag$01_text$01_if$01_variant$03__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">a</div><div else></div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$01 if$02 variant$01 _", function tag$01_text$01_if$02_variant$01__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"false\">a</div><div else>b</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$01 if$02 variant$04 _", function tag$01_text$01_if$02_variant$04__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"false\"></div><div else>b</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$02 if$01 variant$01 _", function tag$01_text$02_if$01_variant$01__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">a</div><div else>${notMsg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$02 if$01 variant$02 _", function tag$01_text$02_if$01_variant$02__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">a</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$02 if$01 variant$03 _", function tag$01_text$02_if$01_variant$03__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">a</div><div else></div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$02 if$02 variant$01 _", function tag$01_text$02_if$02_variant$01__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"false\">a</div><div else>${notMsg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$02 if$02 variant$04 _", function tag$01_text$02_if$02_variant$04__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"false\"></div><div else>${notMsg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$03 if$01 variant$01 _", function tag$01_text$03_if$01_variant$01__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">${msg}</div><div else>${notMsg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$03 if$01 variant$02 _", function tag$01_text$03_if$01_variant$02__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">${msg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$03 if$01 variant$03 _", function tag$01_text$03_if$01_variant$03__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">${msg}</div><div else></div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$03 if$02 variant$01 _", function tag$01_text$03_if$02_variant$01__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"false\">${msg}</div><div else>${notMsg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$03 if$02 variant$04 _", function tag$01_text$03_if$02_variant$04__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"false\"></div><div else>${notMsg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$04 if$01 variant$01 _", function tag$01_text$04_if$01_variant$01__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">${msg}</div><div else>${notMsg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$04 if$01 variant$02 _", function tag$01_text$04_if$01_variant$02__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">${msg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$04 if$01 variant$03 _", function tag$01_text$04_if$01_variant$03__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"true\">${msg}</div><div else></div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$04 if$02 variant$01 _", function tag$01_text$04_if$02_variant$01__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"false\">${msg}</div><div else>${notMsg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$01 text$04 if$02 variant$04 _", function tag$01_text$04_if$02_variant$04__() {
        const { au, host } = setup();
        const template = "<template><div if.bind=\"false\"></div><div else>${notMsg}</div></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$01 if$01 variant$01 _", function tag$02_text$01_if$01_variant$01__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">a</template><template else>b</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$01 if$01 variant$02 _", function tag$02_text$01_if$01_variant$02__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">a</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$01 if$01 variant$03 _", function tag$02_text$01_if$01_variant$03__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">a</template><template else></template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$01 if$02 variant$01 _", function tag$02_text$01_if$02_variant$01__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"false\">a</template><template else>b</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$01 if$02 variant$04 _", function tag$02_text$01_if$02_variant$04__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"false\"></template><template else>b</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$02 if$01 variant$01 _", function tag$02_text$02_if$01_variant$01__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">a</template><template else>${notMsg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$02 if$01 variant$02 _", function tag$02_text$02_if$01_variant$02__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">a</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$02 if$01 variant$03 _", function tag$02_text$02_if$01_variant$03__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">a</template><template else></template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$02 if$02 variant$01 _", function tag$02_text$02_if$02_variant$01__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"false\">a</template><template else>${notMsg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$02 if$02 variant$04 _", function tag$02_text$02_if$02_variant$04__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"false\"></template><template else>${notMsg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$03 if$01 variant$01 _", function tag$02_text$03_if$01_variant$01__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">${msg}</template><template else>${notMsg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$03 if$01 variant$02 _", function tag$02_text$03_if$01_variant$02__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">${msg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$03 if$01 variant$03 _", function tag$02_text$03_if$01_variant$03__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">${msg}</template><template else></template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$03 if$02 variant$01 _", function tag$02_text$03_if$02_variant$01__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"false\">${msg}</template><template else>${notMsg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$03 if$02 variant$04 _", function tag$02_text$03_if$02_variant$04__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"false\"></template><template else>${notMsg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$04 if$01 variant$01 _", function tag$02_text$04_if$01_variant$01__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">${msg}</template><template else>${notMsg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$04 if$01 variant$02 _", function tag$02_text$04_if$01_variant$02__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">${msg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$04 if$01 variant$03 _", function tag$02_text$04_if$01_variant$03__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"true\">${msg}</template><template else></template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("a", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$04 if$02 variant$01 _", function tag$02_text$04_if$02_variant$01__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"false\">${msg}</template><template else>${notMsg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
    it("tag$02 text$04 if$02 variant$04 _", function tag$02_text$04_if$02_variant$04__() {
        const { au, host } = setup();
        const template = "<template><template if.bind=\"false\"></template><template else>${notMsg}</template></template>";
        const name = "app";
        const App = CustomElementResource.define({ name, template }, class {
            msg = "a";
            notMsg = "b";
        });
        const component = new App();
        au.app({ host, component });
        au.start();
        const outerHtmlAfterStart1 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #1");
        au.stop();
        const outerHtmlAfterStop1 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #1");
        au.start();
        const outerHtmlAfterStart2 = host.outerHTML;
        expect(host.textContent).to.equal("b", "after start #2");
        au.stop();
        const outerHtmlAfterStop2 = host.outerHTML;
        expect(host.textContent).to.equal("", "after stop #2");
        expect(outerHtmlAfterStart1).to.equal(outerHtmlAfterStart2, "outerHTML after start #1 / #2");
        expect(outerHtmlAfterStop1).to.equal(outerHtmlAfterStop2, "outerHTML after stop #1 / #2");
    });
});