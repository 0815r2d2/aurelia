{"version":3,"file":"index.umd.js","sources":["../src/ast.ts","../../../node_modules/tslib/tslib.es6.js","../src/attribute-pattern.ts","../src/attribute-parser.ts","../src/binding-command.ts","../src/common.ts","../src/expression-parser.ts","../src/element-parser.ts","../src/semantic-model.ts","../src/template-compiler.ts","../src/configuration.ts"],"sourcesContent":["import { PLATFORM } from '@aurelia/kernel';\nimport { DOM } from '@aurelia/runtime';\n\nexport class AttrSyntax {\n  public readonly rawName: string;\n  public readonly rawValue: string;\n  public readonly target: string;\n  public readonly command: string | null;\n\n  constructor(rawName: string, rawValue: string, target: string, command: string | null) {\n    this.rawName = rawName;\n    this.rawValue = rawValue;\n    this.target = target;\n    this.command = command;\n  }\n}\n\nconst marker = DOM.createElement('au-m') as Element;\nmarker.classList.add('au');\nconst createMarker: () => HTMLElement = marker.cloneNode.bind(marker, false);\n\nexport class ElementSyntax {\n  public readonly node: Node;\n  public readonly name: string;\n  public readonly $content: ElementSyntax | null;\n  public readonly $children: ReadonlyArray<ElementSyntax>;\n  public readonly $attributes: ReadonlyArray<AttrSyntax>;\n\n  constructor(\n    node: Node,\n    name: string,\n    $content: ElementSyntax | null,\n    $children: ReadonlyArray<ElementSyntax>,\n    $attributes: ReadonlyArray<AttrSyntax>) {\n    this.node = node;\n    this.name = name;\n    this.$content = $content;\n    this.$children = $children;\n    this.$attributes = $attributes;\n  }\n\n  public static createMarker(): ElementSyntax {\n    return new ElementSyntax(createMarker(), 'au-m', null, PLATFORM.emptyArray, PLATFORM.emptyArray);\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Class, DI, IContainer, IRegistry, IResolver, PLATFORM, Registration, Reporter } from '@aurelia/kernel';\nimport { AttrSyntax } from './ast';\n\nexport interface AttributePatternDefinition {\n  pattern: string;\n  symbols: string;\n}\n\n/** @internal */\nexport interface ICharSpec {\n  chars: string;\n  repeat: boolean;\n  isSymbol: boolean;\n  isInverted: boolean;\n  has(char: string): boolean;\n  equals(other: ICharSpec): boolean;\n}\n\n/** @internal */\nexport class CharSpec implements ICharSpec {\n  public chars: string;\n  public repeat: boolean;\n  public isSymbol: boolean;\n  public isInverted: boolean;\n\n  public has: (char: string) => boolean;\n\n  constructor(chars: string, repeat: boolean, isSymbol: boolean, isInverted: boolean) {\n    this.chars = chars;\n    this.repeat = repeat;\n    this.isSymbol = isSymbol;\n    this.isInverted = isInverted;\n    if (isInverted) {\n      switch (chars.length) {\n        case 0:\n          this.has = this.hasOfNoneInverse;\n          break;\n        case 1:\n          this.has = this.hasOfSingleInverse;\n          break;\n        default:\n          this.has = this.hasOfMultipleInverse;\n      }\n    } else {\n      switch (chars.length) {\n        case 0:\n          this.has = this.hasOfNone;\n          break;\n        case 1:\n          this.has = this.hasOfSingle;\n          break;\n        default:\n          this.has = this.hasOfMultiple;\n      }\n    }\n  }\n\n  public equals(other: ICharSpec): boolean {\n    return this.chars === other.chars\n        && this.repeat === other.repeat\n        && this.isSymbol === other.isSymbol\n        && this.isInverted === other.isInverted;\n  }\n\n  private hasOfMultiple(char: string): boolean {\n    return this.chars.indexOf(char) !== -1;\n  }\n\n  private hasOfSingle(char: string): boolean {\n    return this.chars === char;\n  }\n\n  private hasOfNone(char: string): boolean {\n    return false;\n  }\n\n  private hasOfMultipleInverse(char: string): boolean {\n    return this.chars.indexOf(char) === -1;\n  }\n\n  private hasOfSingleInverse(char: string): boolean {\n    return this.chars !== char;\n  }\n\n  private hasOfNoneInverse(char: string): boolean {\n    return true;\n  }\n}\n\nexport class Interpretation {\n  public parts: ReadonlyArray<string>;\n  public get pattern(): string | null {\n    const value = this._pattern;\n    if (value === '') {\n      return null;\n    } else {\n      return value;\n    }\n  }\n  public set pattern(value: string | null) {\n    if (value === null) {\n      this._pattern = '';\n      this.parts = PLATFORM.emptyArray;\n    } else {\n      this._pattern = value;\n      this.parts = this.partsRecord[value];\n    }\n  }\n  private _pattern: string;\n  private currentRecord: Record<string, string>;\n  private partsRecord: Record<string, string[]>;\n\n  constructor() {\n    this._pattern = '';\n    this.parts = PLATFORM.emptyArray;\n    this.currentRecord = {};\n    this.partsRecord = {};\n  }\n\n  public append(pattern: string, ch: string): void {\n    const { currentRecord } = this;\n    if (currentRecord[pattern] === undefined) {\n      currentRecord[pattern] = ch;\n    } else {\n      currentRecord[pattern] += ch;\n    }\n  }\n\n  public next(pattern: string): void {\n    const { currentRecord } = this;\n    if (currentRecord[pattern] !== undefined) {\n      const { partsRecord } = this;\n      if (partsRecord[pattern] === undefined) {\n        partsRecord[pattern] = [currentRecord[pattern]];\n      } else {\n        partsRecord[pattern].push(currentRecord[pattern]);\n      }\n      currentRecord[pattern] = undefined;\n    }\n  }\n}\n\n/** @internal */\nexport class State {\n  public charSpec: ICharSpec;\n  public nextStates: State[];\n  public types: SegmentTypes | null;\n  public patterns: string[];\n  public isEndpoint: boolean;\n  public get pattern(): string | null {\n    return this.isEndpoint ? this.patterns[0] : null;\n  }\n\n  constructor(charSpec: ICharSpec, ...patterns: string[]) {\n    this.charSpec = charSpec;\n    this.nextStates = [];\n    this.types = null;\n    this.patterns = patterns;\n    this.isEndpoint = false;\n  }\n\n  public findChild(charSpec: ICharSpec): State {\n    const nextStates = this.nextStates;\n    const len = nextStates.length;\n    let child: State = null;\n    for (let i = 0; i < len; ++i) {\n      child = nextStates[i];\n      if (charSpec.equals(child.charSpec)) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  public append(charSpec: ICharSpec, pattern: string): State {\n    const { patterns } = this;\n    if (patterns.indexOf(pattern) === -1) {\n      patterns.push(pattern);\n    }\n    let state = this.findChild(charSpec);\n    if (state === null) {\n      state = new State(charSpec, pattern);\n      this.nextStates.push(state);\n      if (charSpec.repeat) {\n        state.nextStates.push(state);\n      }\n    }\n    return state;\n  }\n\n  public findMatches(ch: string, interpretation: Interpretation): State[] {\n    // TODO: reuse preallocated arrays\n    const results = [];\n    const nextStates = this.nextStates;\n    const len = nextStates.length;\n    let childLen = 0;\n    let child: State = null;\n    let i = 0;\n    let j = 0;\n    for (; i < len; ++i) {\n      child = nextStates[i];\n      if (child.charSpec.has(ch)) {\n        results.push(child);\n        childLen = child.patterns.length;\n        if (child.charSpec.isSymbol) {\n          for (; j < childLen; ++j) {\n            interpretation.next(child.patterns[j]);\n          }\n        } else {\n          for (; j < childLen; ++j) {\n            interpretation.append(child.patterns[j], ch);\n          }\n        }\n      }\n    }\n    return results;\n  }\n}\n\n/** @internal */\nexport interface ISegment {\n  text: string;\n  eachChar(callback: (spec: CharSpec) => void): void;\n}\n\n/** @internal */\nexport class StaticSegment implements ISegment {\n  public text: string;\n  private len: number;\n  private specs: CharSpec[];\n\n  constructor(text: string) {\n    this.text = text;\n    const len = this.len = text.length;\n    const specs = this.specs = [];\n    for (let i = 0; i < len; ++i) {\n      specs.push(new CharSpec(text[i], false, false, false));\n    }\n  }\n\n  public eachChar(callback: (spec: CharSpec) => void): void {\n    const { len, specs } = this;\n    for (let i = 0; i < len; ++i) {\n      callback(specs[i]);\n    }\n  }\n}\n\n/** @internal */\nexport class DynamicSegment implements ISegment {\n  public text: string;\n  private spec: CharSpec;\n\n  constructor(symbols: string) {\n    this.text = 'PART';\n    this.spec = new CharSpec(symbols, true, false, true);\n  }\n\n  public eachChar(callback: (spec: CharSpec) => void): void {\n    callback(this.spec);\n  }\n}\n\n/** @internal */\nexport class SymbolSegment implements ISegment {\n  public text: string;\n  private spec: CharSpec;\n\n  constructor(text: string) {\n    this.text = text;\n    this.spec = new CharSpec(text, false, true, false);\n  }\n\n  public eachChar(callback: (spec: CharSpec) => void): void {\n    callback(this.spec);\n  }\n}\n\n/** @internal */\nexport class SegmentTypes {\n  public statics: number;\n  public dynamics: number;\n  public symbols: number;\n\n  constructor() {\n    this.statics = 0;\n    this.dynamics = 0;\n    this.symbols = 0;\n  }\n}\n\nexport interface ISyntaxInterpreter {\n  add(def: AttributePatternDefinition): void;\n  add(defs: AttributePatternDefinition[]): void;\n  add(defOrDefs: AttributePatternDefinition | AttributePatternDefinition[]): void;\n  interpret(value: string): Interpretation;\n}\n\nexport const ISyntaxInterpreter = DI.createInterface<ISyntaxInterpreter>().withDefault(x => x.singleton(SyntaxInterpreter));\n\n/** @internal */\nexport class SyntaxInterpreter {\n  public rootState: State;\n  private initialStates: State[];\n\n  constructor() {\n    this.rootState = new State(null);\n    this.initialStates = [this.rootState];\n  }\n\n  public add(def: AttributePatternDefinition): void;\n  public add(defs: AttributePatternDefinition[]): void;\n  public add(defOrDefs: AttributePatternDefinition | AttributePatternDefinition[]): void {\n    let i = 0;\n    if (Array.isArray(defOrDefs)) {\n      const ii = defOrDefs.length;\n      for (; i < ii; ++i) {\n        this.add(defOrDefs[i]);\n      }\n      return;\n    }\n    let currentState = this.rootState;\n    const def = defOrDefs;\n    const pattern = def.pattern;\n    const types = new SegmentTypes();\n    const segments = this.parse(def, types);\n    const len = segments.length;\n    const callback = (ch: ICharSpec): void => {\n      currentState = currentState.append(ch, pattern);\n    };\n    for (i = 0; i < len; ++i) {\n      segments[i].eachChar(callback);\n    }\n    currentState.types = types;\n    currentState.isEndpoint = true;\n  }\n\n  public interpret(name: string): Interpretation {\n    const interpretation = new Interpretation();\n    let states = this.initialStates;\n    const len = name.length;\n    for (let i = 0; i < len; ++i) {\n      states = this.getNextStates(states, name.charAt(i), interpretation);\n      if (states.length === 0) {\n        break;\n      }\n    }\n\n    states.sort((a, b) => {\n      if (a.isEndpoint) {\n        if (!b.isEndpoint) {\n          return -1;\n        }\n      } else if (b.isEndpoint) {\n        return 1;\n      } else {\n        return 0;\n      }\n      const aTypes = a.types;\n      const bTypes = b.types;\n      if (aTypes.statics !== bTypes.statics) {\n        return bTypes.statics - aTypes.statics;\n      }\n      if (aTypes.dynamics !== bTypes.dynamics) {\n        return bTypes.dynamics - aTypes.dynamics;\n      }\n      if (aTypes.symbols !== bTypes.symbols) {\n        return bTypes.symbols - aTypes.symbols;\n      }\n      return 0;\n    });\n\n    if (states.length > 0) {\n      const state = states[0];\n      if (!state.charSpec.isSymbol) {\n        interpretation.next(state.pattern);\n      }\n      interpretation.pattern = state.pattern;\n    }\n    return interpretation;\n  }\n\n  public getNextStates(states: State[], ch: string, interpretation: Interpretation): State[] {\n    // TODO: reuse preallocated arrays\n    const nextStates: State[] = [];\n    let state: State = null;\n    const len = states.length;\n    for (let i = 0; i < len; ++i) {\n      state = states[i];\n      nextStates.push(...state.findMatches(ch, interpretation));\n    }\n\n    return nextStates;\n  }\n\n  private parse(def: AttributePatternDefinition, types: SegmentTypes): ISegment[] {\n    const result = [];\n    const pattern = def.pattern;\n    const len = pattern.length;\n    let i = 0;\n    let start = 0;\n    let c = '';\n\n    while (i < len) {\n      c = pattern.charAt(i);\n      if (def.symbols.indexOf(c) === -1) {\n        if (i === start) {\n          if (c === 'P' && pattern.slice(i, i + 4) === 'PART') {\n            start = i = (i + 4);\n            result.push(new DynamicSegment(def.symbols));\n            ++types.dynamics;\n          } else {\n            ++i;\n          }\n        } else {\n          ++i;\n        }\n      } else if (i !== start) {\n        result.push(new StaticSegment(pattern.slice(start, i)));\n        ++types.statics;\n        start = i;\n      } else {\n        result.push(new SymbolSegment(pattern.slice(start, i + 1)));\n        ++types.symbols;\n        start = ++i;\n      }\n    }\n    if (start !== i) {\n      result.push(new StaticSegment(pattern.slice(start, i)));\n      ++types.statics;\n    }\n\n    return result;\n  }\n}\n\nfunction validatePrototype(handler: IAttributePatternHandler, patternDefs: AttributePatternDefinition[]): void {\n  for (const def of patternDefs) {\n    // note: we're intentionally not throwing here\n    if (!(def.pattern in handler)) {\n      Reporter.write(401, def); // TODO: organize error codes\n    } else if (typeof handler[def.pattern] !== 'function') {\n      Reporter.write(402, def); // TODO: organize error codes\n    }\n  }\n}\n\nexport interface IAttributePattern {\n  $patternDefs: AttributePatternDefinition[];\n}\n\nexport interface IAttributePatternHandler {\n  [pattern: string]: (rawName: string, rawValue: string, parts: ReadonlyArray<string>) => AttrSyntax;\n}\n\nexport const IAttributePattern = DI.createInterface<IAttributePattern>().noDefault();\n\ntype DecoratableAttributePattern<TProto, TClass> = Class<TProto & Partial<IAttributePattern | IAttributePatternHandler>, TClass> & Partial<IRegistry>;\ntype DecoratedAttributePattern<TProto, TClass> =  Class<TProto & IAttributePattern | IAttributePatternHandler, TClass> & IRegistry;\n\ntype AttributePatternDecorator = <TProto, TClass>(target: DecoratableAttributePattern<TProto, TClass>) => DecoratedAttributePattern<TProto, TClass>;\n\nexport function attributePattern(...patternDefs: AttributePatternDefinition[]): AttributePatternDecorator {\n  return function decorator<TProto, TClass>(target: DecoratableAttributePattern<TProto, TClass>): DecoratedAttributePattern<TProto, TClass> {\n    const proto = target.prototype;\n    // Note: the prototype is really meant to be an intersection type between IAttrubutePattern and IAttributePatternHandler, but\n    // a type with an index signature cannot be intersected with anything else that has normal property names.\n    // So we're forced to use a union type and cast it here.\n    validatePrototype(proto as IAttributePatternHandler, patternDefs);\n    proto.$patternDefs = patternDefs;\n\n    target.register = function register(container: IContainer): IResolver {\n      return Registration.singleton(IAttributePattern, target).register(container, IAttributePattern);\n    };\n    return target as DecoratedAttributePattern<TProto, TClass>;\n  } as AttributePatternDecorator;\n}\n\nexport interface DotSeparatedAttributePattern extends IAttributePattern {}\n\n@attributePattern(\n  { pattern: 'PART.PART', symbols: '.' },\n  { pattern: 'PART.PART.PART', symbols: '.' }\n)\nexport class DotSeparatedAttributePattern implements DotSeparatedAttributePattern {\n  public static register: IRegistry['register'];\n\n  public ['PART.PART'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, parts[0], parts[1]);\n  }\n\n  public ['PART.PART.PART'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, parts[0], parts[2]);\n  }\n}\n\nexport interface ColonPrefixedBindAttributePattern extends IAttributePattern {}\n\n@attributePattern({ pattern: ':PART', symbols: ':' })\nexport class ColonPrefixedBindAttributePattern implements ColonPrefixedBindAttributePattern  {\n  public static register: IRegistry['register'];\n\n  public [':PART'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, parts[0], 'bind');\n  }\n}\n\nexport interface AtPrefixedTriggerAttributePattern extends IAttributePattern {}\n\n@attributePattern({ pattern: '@PART', symbols: '@' })\nexport class AtPrefixedTriggerAttributePattern implements AtPrefixedTriggerAttributePattern  {\n  public static register: IRegistry['register'];\n\n  public ['@PART'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, parts[0], 'trigger');\n  }\n}\n","import { all, DI, inject } from '@aurelia/kernel';\nimport { AttrSyntax } from './ast';\nimport { IAttributePattern, IAttributePatternHandler, Interpretation, ISyntaxInterpreter } from './attribute-pattern';\n\nexport interface IAttributeParser {\n  parse(name: string, value: string): AttrSyntax;\n}\n\nexport const IAttributeParser = DI.createInterface<IAttributeParser>()\n  .withDefault(x => x.singleton(AttributeParser));\n\n/** @internal */\n@inject(ISyntaxInterpreter, all(IAttributePattern))\nexport class AttributeParser implements IAttributeParser {\n  private interpreter: ISyntaxInterpreter;\n  private cache: Record<string, Interpretation>;\n  private patterns: Record<string, IAttributePatternHandler>;\n\n  constructor(interpreter: ISyntaxInterpreter, attrPatterns: IAttributePattern[]) {\n    this.interpreter = interpreter;\n    this.cache = {};\n    const patterns: AttributeParser['patterns'] = this.patterns = {};\n    attrPatterns.forEach(attrPattern => {\n      const defs = attrPattern.$patternDefs;\n      interpreter.add(defs);\n      defs.forEach(def => {\n        patterns[def.pattern] = attrPattern as unknown as IAttributePatternHandler;\n      });\n    });\n  }\n\n  public parse(name: string, value: string): AttrSyntax {\n    let interpretation = this.cache[name];\n    if (interpretation === undefined) {\n      interpretation = this.cache[name] = this.interpreter.interpret(name);\n    }\n    const pattern = interpretation.pattern;\n    if (pattern === null) {\n      return new AttrSyntax(name, value, name, null);\n    } else {\n      return this.patterns[pattern][pattern](name, value, interpretation.parts);\n    }\n  }\n}\n","import { Class, Constructable, IContainer, IRegistry, Registration, Writable } from '@aurelia/kernel';\nimport {\n  BindingType,\n  CallBindingInstruction,\n  CaptureBindingInstruction,\n  DelegateBindingInstruction,\n  FromViewBindingInstruction,\n  HydrateTemplateController,\n  IExpressionParser,\n  IResourceDefinition,\n  IResourceKind,\n  IResourceType,\n  ITemplateDefinition,\n  IteratorBindingInstruction,\n  OneTimeBindingInstruction,\n  SetPropertyInstruction,\n  TargetedInstruction,\n  ToViewBindingInstruction,\n  TriggerBindingInstruction,\n  TwoWayBindingInstruction\n} from '@aurelia/runtime';\nimport { IAttributeSymbol } from './semantic-model';\n\nexport interface IBindingCommand {\n  compile($symbol: IAttributeSymbol): TargetedInstruction;\n  handles?($symbol: IAttributeSymbol): boolean;\n}\n\nexport interface IBindingCommandDefinition extends IResourceDefinition { }\n\nexport interface IBindingCommandType extends IResourceType<IBindingCommandDefinition, IBindingCommand, Class<IBindingCommand>> { }\n\nexport interface IBindingCommandResource extends\n  IResourceKind<IBindingCommandDefinition, IBindingCommand, Class<IBindingCommand>> { }\n\ntype BindingCommandDecorator = <TProto, TClass>(target: Class<TProto, TClass> & Partial<IBindingCommandType>) => Class<TProto, TClass> & IBindingCommandType;\n\nfunction register(this: IBindingCommandType, container: IContainer): void {\n  const resourceKey = BindingCommandResource.keyFrom(this.description.name);\n  container.register(Registration.singleton(resourceKey, this));\n}\n\nexport function bindingCommand(name: string): BindingCommandDecorator;\nexport function bindingCommand(definition: IBindingCommandDefinition): BindingCommandDecorator;\nexport function bindingCommand(nameOrDefinition: string | IBindingCommandDefinition): BindingCommandDecorator {\n  return target => BindingCommandResource.define(nameOrDefinition, target);\n}\n\nfunction keyFrom(this: IBindingCommandResource, name: string): string {\n  return `${this.name}:${name}`;\n}\n\nfunction isType<T>(this: IBindingCommandResource, Type: T & Partial<IBindingCommandType>): Type is T & IBindingCommandType {\n  return Type.kind === this;\n}\n\nfunction define<T extends Constructable>(this: IBindingCommandResource, name: string, ctor: T): T & IBindingCommandType;\nfunction define<T extends Constructable>(this: IBindingCommandResource, definition: IBindingCommandDefinition, ctor: T): T & IBindingCommandType;\nfunction define<T extends Constructable>(this: IBindingCommandResource, nameOrDefinition: string | IBindingCommandDefinition, ctor: T): T & IBindingCommandType {\n  const Type = ctor as T & Writable<IBindingCommandType>;\n  const description = typeof nameOrDefinition === 'string' ? { name: nameOrDefinition, target: null } : nameOrDefinition;\n\n  Type.kind = BindingCommandResource;\n  Type.description = description;\n  Type.register = register;\n\n  const proto = Type.prototype;\n\n  proto.handles = proto.handles || defaultHandles;\n\n  return Type;\n}\n\nexport const BindingCommandResource: IBindingCommandResource = {\n  name: 'binding-command',\n  keyFrom,\n  isType,\n  define\n};\n\nfunction defaultHandles(this: IBindingCommand, $symbol: IAttributeSymbol): boolean {\n  return !$symbol.isTemplateController;\n}\n\nexport interface OneTimeBindingCommand extends IBindingCommand {}\n\n@bindingCommand('one-time')\nexport class OneTimeBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    return new OneTimeBindingInstruction(this.parser.parse($symbol.rawValue, BindingType.OneTimeCommand), $symbol.to);\n  }\n}\n\nexport interface ToViewBindingCommand extends IBindingCommand {}\n\n@bindingCommand('to-view')\nexport class ToViewBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    return new ToViewBindingInstruction(this.parser.parse($symbol.rawValue, BindingType.ToViewCommand), $symbol.to);\n  }\n}\n\nexport interface FromViewBindingCommand extends IBindingCommand {}\n\n@bindingCommand('from-view')\nexport class FromViewBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    return new FromViewBindingInstruction(this.parser.parse($symbol.rawValue, BindingType.FromViewCommand), $symbol.to);\n  }\n}\n\nexport interface TwoWayBindingCommand extends IBindingCommand {}\n\n@bindingCommand('two-way')\nexport class TwoWayBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    return new TwoWayBindingInstruction(this.parser.parse($symbol.rawValue, BindingType.TwoWayCommand), $symbol.to);\n  }\n}\n\n// Not bothering to throw on non-existing modes, should never happen anyway.\n// Keeping all array elements of the same type for better optimizeability.\nconst compileMode = ['', '$1', '$2', '', '$4', '', '$6'];\n\nexport interface DefaultBindingCommand extends IBindingCommand {}\n\n@bindingCommand('bind')\nexport class DefaultBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n  public $1: typeof OneTimeBindingCommand.prototype.compile;\n  public $2: typeof ToViewBindingCommand.prototype.compile;\n  public $4: typeof FromViewBindingCommand.prototype.compile;\n  public $6: typeof TwoWayBindingCommand.prototype.compile;\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n    this.$1 = OneTimeBindingCommand.prototype.compile;\n    this.$2 = ToViewBindingCommand.prototype.compile;\n    this.$4 = FromViewBindingCommand.prototype.compile;\n    this.$6 = TwoWayBindingCommand.prototype.compile;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    return this[compileMode[$symbol.mode]]($symbol);\n  }\n}\n\nexport interface TriggerBindingCommand extends IBindingCommand {}\n\n@bindingCommand('trigger')\nexport class TriggerBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    return new TriggerBindingInstruction(this.parser.parse($symbol.rawValue, BindingType.TriggerCommand), $symbol.to);\n  }\n}\n\nexport interface DelegateBindingCommand extends IBindingCommand {}\n\n@bindingCommand('delegate')\nexport class DelegateBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    return new DelegateBindingInstruction(this.parser.parse($symbol.rawValue, BindingType.DelegateCommand), $symbol.to);\n  }\n}\n\nexport interface CaptureBindingCommand extends IBindingCommand {}\n\n@bindingCommand('capture')\nexport class CaptureBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    return new CaptureBindingInstruction(this.parser.parse($symbol.rawValue, BindingType.CaptureCommand), $symbol.to);\n  }\n}\n\nexport interface CallBindingCommand extends IBindingCommand {}\n\n@bindingCommand('call')\nexport class CallBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    return new CallBindingInstruction(this.parser.parse($symbol.rawValue, BindingType.CallCommand), $symbol.to);\n  }\n}\n\n@bindingCommand('for')\nexport class ForBindingCommand implements IBindingCommand {\n  public static inject: Function[] = [IExpressionParser];\n  public static register: IRegistry['register'];\n\n  private parser: IExpressionParser;\n  constructor(parser: IExpressionParser) {\n    this.parser = parser;\n  }\n\n  public compile($symbol: IAttributeSymbol): TargetedInstruction {\n    const def: ITemplateDefinition = {\n      name: 'repeat',\n      template: $symbol.$element.node,\n      instructions: []\n    };\n    const instructions = [\n      new IteratorBindingInstruction(this.parser.parse($symbol.rawValue, BindingType.ForCommand), 'items'),\n      new SetPropertyInstruction('item', 'local')\n    ];\n    return new HydrateTemplateController(def, 'repeat', instructions, false);\n  }\n\n  public handles($symbol: IAttributeSymbol): boolean {\n    return $symbol.target === 'repeat';\n  }\n}\n","/** @internal */\nexport function unescapeCode(code: number): number {\n  switch (code) {\n    case Char.LowerB: return Char.Backspace;\n    case Char.LowerT: return Char.Tab;\n    case Char.LowerN: return Char.LineFeed;\n    case Char.LowerV: return Char.VerticalTab;\n    case Char.LowerF: return Char.FormFeed;\n    case Char.LowerR: return Char.CarriageReturn;\n    case Char.DoubleQuote: return Char.DoubleQuote;\n    case Char.SingleQuote: return Char.SingleQuote;\n    case Char.Backslash: return Char.Backslash;\n    default: return code;\n  }\n}\n\n/** @internal */\nexport const enum Access {\n  Reset                   = 0b0000000000000,\n  Ancestor                = 0b0000111111111,\n  This                    = 0b0001000000000,\n  Scope                   = 0b0010000000000,\n  Member                  = 0b0100000000000,\n  Keyed                   = 0b1000000000000\n}\n/** @internal */\nexport const enum Precedence {\n  Variadic                = 0b000111101,\n  Assign                  = 0b000111110,\n  Conditional             = 0b000111111,\n  LogicalOR               = 0b001000000,\n  LogicalAND              = 0b010000000,\n  Equality                = 0b011000000,\n  Relational              = 0b100000000,\n  Additive                = 0b101000000,\n  Multiplicative          = 0b110000000,\n  Binary                  = 0b111000000,\n  LeftHandSide            = 0b111000001,\n  Primary                 = 0b111000010,\n  Unary                   = 0b111000011,\n}\n/** @internal */\nexport const enum Token {\n  EOF                     = 0b110000000000_000_000000,\n  ExpressionTerminal      = 0b100000000000_000_000000,\n  AccessScopeTerminal     = 0b010000000000_000_000000,\n  ClosingToken            = 0b001000000000_000_000000,\n  OpeningToken            = 0b000100000000_000_000000,\n  BinaryOp                = 0b000010000000_000_000000,\n  UnaryOp                 = 0b000001000000_000_000000,\n  LeftHandSide            = 0b000000100000_000_000000,\n  StringOrNumericLiteral  = 0b000000011000_000_000000,\n  NumericLiteral          = 0b000000010000_000_000000,\n  StringLiteral           = 0b000000001000_000_000000,\n  IdentifierName          = 0b000000000110_000_000000,\n  Keyword                 = 0b000000000100_000_000000,\n  Identifier              = 0b000000000010_000_000000,\n  Contextual              = 0b000000000001_000_000000,\n  Precedence              = 0b000000000000_111_000000,\n  Type                    = 0b000000000000_000_111111,\n  FalseKeyword            = 0b000000000100_000_000000,\n  TrueKeyword             = 0b000000000100_000_000001,\n  NullKeyword             = 0b000000000100_000_000010,\n  UndefinedKeyword        = 0b000000000100_000_000011,\n  ThisScope               = 0b000000000110_000_000100,\n  ParentScope             = 0b000000000110_000_000101,\n  OpenParen               = 0b010100100000_000_000110,\n  OpenBrace               = 0b000100000000_000_000111,\n  Dot                     = 0b000000100000_000_001000,\n  CloseBrace              = 0b111000000000_000_001001,\n  CloseParen              = 0b111000000000_000_001010,\n  Comma                   = 0b110000000000_000_001011,\n  OpenBracket             = 0b010100100000_000_001100,\n  CloseBracket            = 0b111000000000_000_001101,\n  Colon                   = 0b110000000000_000_001110,\n  Question                = 0b110000000000_000_001111,\n  Ampersand               = 0b110000000000_000_010000,\n  Bar                     = 0b110000000000_000_010011,\n  BarBar                  = 0b110010000000_010_010100,\n  AmpersandAmpersand      = 0b110010000000_011_010101,\n  EqualsEquals            = 0b110010000000_100_010110,\n  ExclamationEquals       = 0b110010000000_100_010111,\n  EqualsEqualsEquals      = 0b110010000000_100_011000,\n  ExclamationEqualsEquals = 0b110010000000_100_011001,\n  LessThan                = 0b110010000000_101_011010,\n  GreaterThan             = 0b110010000000_101_011011,\n  LessThanEquals          = 0b110010000000_101_011100,\n  GreaterThanEquals       = 0b110010000000_101_011101,\n  InKeyword               = 0b110010000100_101_011110,\n  InstanceOfKeyword       = 0b110010000100_101_011111,\n  Plus                    = 0b010011000000_110_100000,\n  Minus                   = 0b010011000000_110_100001,\n  TypeofKeyword           = 0b000001000100_000_100010,\n  VoidKeyword             = 0b000001000100_000_100011,\n  Asterisk                = 0b110010000000_111_100100,\n  Percent                 = 0b110010000000_111_100101,\n  Slash                   = 0b110010000000_111_100110,\n  Equals                  = 0b100000000000_000_100111,\n  Exclamation             = 0b000001000000_000_101000,\n  TemplateTail            = 0b010000100000_000_101001,\n  TemplateContinuation    = 0b010000100000_000_101010,\n  OfKeyword               = 0b100000000101_000_101011\n}\n\n/** @internal */\nexport const enum Char {\n  Null           = 0x00,\n  Backspace      = 0x08,\n  Tab            = 0x09,\n  LineFeed       = 0x0A,\n  VerticalTab    = 0x0B,\n  FormFeed       = 0x0C,\n  CarriageReturn = 0x0D,\n  Space          = 0x20,\n  Exclamation    = 0x21,\n  DoubleQuote    = 0x22,\n  Dollar         = 0x24,\n  Percent        = 0x25,\n  Ampersand      = 0x26,\n  SingleQuote    = 0x27,\n  OpenParen      = 0x28,\n  CloseParen     = 0x29,\n  Asterisk       = 0x2A,\n  Plus           = 0x2B,\n  Comma          = 0x2C,\n  Minus          = 0x2D,\n  Dot            = 0x2E,\n  Slash          = 0x2F,\n  Semicolon      = 0x3B,\n  Backtick       = 0x60,\n  OpenBracket    = 0x5B,\n  Backslash      = 0x5C,\n  CloseBracket   = 0x5D,\n  Caret          = 0x5E,\n  Underscore     = 0x5F,\n  OpenBrace      = 0x7B,\n  Bar            = 0x7C,\n  CloseBrace     = 0x7D,\n  Colon          = 0x3A,\n  LessThan       = 0x3C,\n  Equals         = 0x3D,\n  GreaterThan    = 0x3E,\n  Question       = 0x3F,\n\n  Zero   = 0x30,\n  One    = 0x31,\n  Two    = 0x32,\n  Three  = 0x33,\n  Four   = 0x34,\n  Five   = 0x35,\n  Six    = 0x36,\n  Seven  = 0x37,\n  Eight  = 0x38,\n  Nine   = 0x39,\n\n  UpperA = 0x41,\n  UpperB = 0x42,\n  UpperC = 0x43,\n  UpperD = 0x44,\n  UpperE = 0x45,\n  UpperF = 0x46,\n  UpperG = 0x47,\n  UpperH = 0x48,\n  UpperI = 0x49,\n  UpperJ = 0x4A,\n  UpperK = 0x4B,\n  UpperL = 0x4C,\n  UpperM = 0x4D,\n  UpperN = 0x4E,\n  UpperO = 0x4F,\n  UpperP = 0x50,\n  UpperQ = 0x51,\n  UpperR = 0x52,\n  UpperS = 0x53,\n  UpperT = 0x54,\n  UpperU = 0x55,\n  UpperV = 0x56,\n  UpperW = 0x57,\n  UpperX = 0x58,\n  UpperY = 0x59,\n  UpperZ = 0x5A,\n\n  LowerA  = 0x61,\n  LowerB  = 0x62,\n  LowerC  = 0x63,\n  LowerD  = 0x64,\n  LowerE  = 0x65,\n  LowerF  = 0x66,\n  LowerG  = 0x67,\n  LowerH  = 0x68,\n  LowerI  = 0x69,\n  LowerJ  = 0x6A,\n  LowerK  = 0x6B,\n  LowerL  = 0x6C,\n  LowerM  = 0x6D,\n  LowerN  = 0x6E,\n  LowerO  = 0x6F,\n  LowerP  = 0x70,\n  LowerQ  = 0x71,\n  LowerR  = 0x72,\n  LowerS  = 0x73,\n  LowerT  = 0x74,\n  LowerU  = 0x75,\n  LowerV  = 0x76,\n  LowerW  = 0x77,\n  LowerX  = 0x78,\n  LowerY  = 0x79,\n  LowerZ  = 0x7A\n}\n","import { IContainer, IRegistry, Reporter } from '@aurelia/kernel';\nimport {\n  AccessKeyed, AccessMember, AccessScope, AccessThis,\n  ArrayBindingPattern, ArrayLiteral, Assign, Binary,\n  BinaryOperator, BindingBehavior, BindingIdentifier,\n  BindingIdentifierOrPattern, BindingType, CallFunction,\n  CallMember, CallScope, Conditional, ExpressionKind, ForOfStatement,\n  IExpression, IExpressionParser, Interpolation, IsAssign, IsAssignable,\n  IsBinary, IsBindingBehavior, IsConditional,\n  IsExpressionOrStatement, IsLeftHandSide, IsPrimary, IsUnary,\n  IsValueConverter, ObjectBindingPattern, ObjectLiteral, PrimitiveLiteral, TaggedTemplate, Template, Unary, UnaryOperator, ValueConverter\n} from '@aurelia/runtime';\nimport { Access, Char, Precedence, Token, unescapeCode } from './common';\n\nexport const ParserRegistration: IRegistry = {\n  register(container: IContainer): void {\n    container.registerTransformer(IExpressionParser, parser => {\n      parser['parseCore'] = parseCore;\n      return parser;\n    });\n  }\n};\n\nconst $false = PrimitiveLiteral.$false;\nconst $true = PrimitiveLiteral.$true;\nconst $null = PrimitiveLiteral.$null;\nconst $undefined = PrimitiveLiteral.$undefined;\nconst $this = AccessThis.$this;\nconst $parent = AccessThis.$parent;\n\n/** @internal */\nexport class ParserState {\n  public index: number;\n  public startIndex: number;\n  public input: string;\n  public lastIndex: number;\n  public length: number;\n  public currentToken: Token;\n  public tokenValue: string | number;\n  public currentChar: number;\n  public assignable: boolean;\n  public get tokenRaw(): string {\n    return this.input.slice(this.startIndex, this.index);\n  }\n\n  constructor(input: string) {\n    this.index = 0;\n    this.startIndex = 0;\n    this.lastIndex = 0;\n    this.input = input;\n    this.length = input.length;\n    this.currentToken = Token.EOF;\n    this.tokenValue = '';\n    this.currentChar = input.charCodeAt(0);\n    this.assignable = true;\n  }\n}\n\nconst $state = new ParserState('');\n\nconst enum SyntaxError {\n  InvalidExpressionStart = 100,\n  UnconsumedToken = 101,\n  DoubleDot = 102,\n  InvalidMemberExpression = 103,\n  UnexpectedEndOfExpression = 104,\n  ExpectedIdentifier = 105,\n  InvalidForDeclaration = 106,\n  InvalidObjectLiteralPropertyDefinition = 107,\n  UnterminatedQuote = 108,\n  UnterminatedTemplate = 109,\n  MissingExpectedToken = 110,\n  UnexpectedCharacter = 111,\n  MissingValueConverter = 112,\n  MissingBindingBehavior = 113\n}\n\nconst enum SemanticError {\n  NotAssignable = 150,\n  UnexpectedForOf = 151\n}\n\n/** @internal */\nexport function parseCore(input: string, bindingType?: BindingType): IExpression {\n  $state.input = input;\n  $state.length = input.length;\n  $state.index = 0;\n  $state.currentChar = input.charCodeAt(0);\n  return parse($state, Access.Reset, Precedence.Variadic, bindingType === undefined ? BindingType.BindCommand : bindingType);\n}\n\n/** @internal */\n// JUSTIFICATION: This is performance-critical code which follows a subset of the well-known ES spec.\n// Knowing the spec, or parsers in general, will help with understanding this code and it is therefore not the\n// single source of information for being able to figure it out.\n// It generally does not need to change unless the spec changes or spec violations are found, or optimization\n// opportunities are found (which would likely not fix these warnings in any case).\n// It's therefore not considered to have any tangible impact on the maintainability of the code base.\n// For reference, most of the parsing logic is based on: https://tc39.github.io/ecma262/#sec-ecmascript-language-expressions\n// tslint:disable-next-line:no-big-function cognitive-complexity\nexport function parse<TPrec extends Precedence, TType extends BindingType>(state: ParserState, access: Access, minPrecedence: TPrec, bindingType: TType):\n  TPrec extends Precedence.Unary ? IsUnary :\n  TPrec extends Precedence.Binary ? IsBinary :\n  TPrec extends Precedence.LeftHandSide ? IsLeftHandSide :\n  TPrec extends Precedence.Assign ? IsAssign :\n  TPrec extends Precedence.Conditional ? IsConditional :\n  TPrec extends Precedence.Primary ? IsPrimary :\n  TPrec extends Precedence.Multiplicative ? IsBinary :\n  TPrec extends Precedence.Additive ? IsBinary :\n  TPrec extends Precedence.Relational ? IsBinary :\n  TPrec extends Precedence.Equality ? IsBinary :\n  TPrec extends Precedence.LogicalAND ? IsBinary :\n  TPrec extends Precedence.LogicalOR ? IsBinary :\n  TPrec extends Precedence.Variadic ?\n    TType extends BindingType.Interpolation ? Interpolation :\n    TType extends BindingType.ForCommand ? ForOfStatement :\n    never : never {\n\n  if (state.index === 0) {\n    if (bindingType & BindingType.Interpolation) {\n      // tslint:disable-next-line:no-any\n      return parseInterpolation(state) as any;\n    }\n    nextToken(state);\n    if (state.currentToken & Token.ExpressionTerminal) {\n      throw Reporter.error(SyntaxError.InvalidExpressionStart, { state });\n    }\n  }\n\n  state.assignable = Precedence.Binary > minPrecedence;\n  let result = undefined as IsExpressionOrStatement;\n\n  if (state.currentToken & Token.UnaryOp) {\n    /** parseUnaryExpression\n     * https://tc39.github.io/ecma262/#sec-unary-operators\n     *\n     * UnaryExpression :\n     *   1. LeftHandSideExpression\n     *   2. void UnaryExpression\n     *   3. typeof UnaryExpression\n     *   4. + UnaryExpression\n     *   5. - UnaryExpression\n     *   6. ! UnaryExpression\n     *\n     * IsValidAssignmentTarget\n     *   2,3,4,5,6 = false\n     *   1 = see parseLeftHandSideExpression\n     *\n     * Note: technically we should throw on ++ / -- / +++ / ---, but there's nothing to gain from that\n     */\n    const op = TokenValues[state.currentToken & Token.Type] as UnaryOperator;\n    nextToken(state);\n    result = new Unary(op, parse(state, access, Precedence.LeftHandSide, bindingType));\n    state.assignable = false;\n  } else {\n    /** parsePrimaryExpression\n     * https://tc39.github.io/ecma262/#sec-primary-expression\n     *\n     * PrimaryExpression :\n     *   1. this\n     *   2. IdentifierName\n     *   3. Literal\n     *   4. ArrayLiteral\n     *   5. ObjectLiteral\n     *   6. TemplateLiteral\n     *   7. ParenthesizedExpression\n     *\n     * Literal :\n     *    NullLiteral\n     *    BooleanLiteral\n     *    NumericLiteral\n     *    StringLiteral\n     *\n     * ParenthesizedExpression :\n     *   ( AssignmentExpression )\n     *\n     * IsValidAssignmentTarget\n     *   1,3,4,5,6,7 = false\n     *   2 = true\n     */\n    primary: switch (state.currentToken) {\n    case Token.ParentScope: // $parent\n      state.assignable = false;\n      do {\n        nextToken(state);\n        access++; // ancestor\n        if (consumeOpt(state, Token.Dot)) {\n          if ((state.currentToken as Token) === Token.Dot) {\n            throw Reporter.error(SyntaxError.DoubleDot, { state });\n          } else if ((state.currentToken as Token) === Token.EOF) {\n            throw Reporter.error(SyntaxError.ExpectedIdentifier, { state });\n          }\n        } else if (state.currentToken & Token.AccessScopeTerminal) {\n          const ancestor = access & Access.Ancestor;\n          result = ancestor === 0 ? $this : ancestor === 1 ? $parent : new AccessThis(ancestor);\n          access = Access.This;\n          break primary;\n        } else {\n          throw Reporter.error(SyntaxError.InvalidMemberExpression, { state });\n        }\n      } while (state.currentToken === Token.ParentScope);\n    // falls through\n    case Token.Identifier: // identifier\n      if (bindingType & BindingType.IsIterator) {\n        result = new BindingIdentifier(state.tokenValue as string);\n      } else {\n        result = new AccessScope(state.tokenValue as string, access & Access.Ancestor);\n        access = Access.Scope;\n      }\n      state.assignable = true;\n      nextToken(state);\n      break;\n    case Token.ThisScope: // $this\n      state.assignable = false;\n      nextToken(state);\n      result = $this;\n      access = Access.This;\n      break;\n    case Token.OpenParen: // parenthesized expression\n      nextToken(state);\n      result = parse(state, Access.Reset, Precedence.Assign, bindingType);\n      consume(state, Token.CloseParen);\n      access = Access.Reset;\n      break;\n    case Token.OpenBracket:\n      result = parseArrayLiteralExpression(state, access, bindingType);\n      access = Access.Reset;\n      break;\n    case Token.OpenBrace:\n      result = parseObjectLiteralExpression(state, bindingType);\n      access = Access.Reset;\n      break;\n    case Token.TemplateTail:\n      result = new Template([state.tokenValue as string]);\n      state.assignable = false;\n      nextToken(state);\n      access = Access.Reset;\n      break;\n    case Token.TemplateContinuation:\n      result = parseTemplate(state, access, bindingType, result as IsLeftHandSide, false);\n      access = Access.Reset;\n      break;\n    case Token.StringLiteral:\n    case Token.NumericLiteral:\n      result = new PrimitiveLiteral(state.tokenValue);\n      state.assignable = false;\n      nextToken(state);\n      access = Access.Reset;\n      break;\n    case Token.NullKeyword:\n    case Token.UndefinedKeyword:\n    case Token.TrueKeyword:\n    case Token.FalseKeyword:\n      result = TokenValues[state.currentToken & Token.Type] as PrimitiveLiteral;\n      state.assignable = false;\n      nextToken(state);\n      access = Access.Reset;\n      break;\n    default:\n      if (state.index >= state.length) {\n        throw Reporter.error(SyntaxError.UnexpectedEndOfExpression, { state });\n      } else {\n        throw Reporter.error(SyntaxError.UnconsumedToken, { state });\n      }\n    }\n\n    if (bindingType & BindingType.IsIterator) {\n      // tslint:disable-next-line:no-any\n      return parseForOfStatement(state, result as BindingIdentifierOrPattern) as any;\n    }\n    // tslint:disable-next-line:no-any\n    if (Precedence.LeftHandSide < minPrecedence) return result as any;\n\n    /** parseMemberExpression (Token.Dot, Token.OpenBracket, Token.TemplateContinuation)\n     * MemberExpression :\n     *   1. PrimaryExpression\n     *   2. MemberExpression [ AssignmentExpression ]\n     *   3. MemberExpression . IdentifierName\n     *   4. MemberExpression TemplateLiteral\n     *\n     * IsValidAssignmentTarget\n     *   1,4 = false\n     *   2,3 = true\n     *\n     *\n     * parseCallExpression (Token.OpenParen)\n     * CallExpression :\n     *   1. MemberExpression Arguments\n     *   2. CallExpression Arguments\n     *   3. CallExpression [ AssignmentExpression ]\n     *   4. CallExpression . IdentifierName\n     *   5. CallExpression TemplateLiteral\n     *\n     * IsValidAssignmentTarget\n     *   1,2,5 = false\n     *   3,4 = true\n     */\n    let name = state.tokenValue as string;\n    while ((state.currentToken & Token.LeftHandSide) > 0) {\n      switch ((state.currentToken as Token)) {\n        case Token.Dot:\n          state.assignable = true;\n          nextToken(state);\n          if ((state.currentToken & Token.IdentifierName) === 0) {\n            throw Reporter.error(SyntaxError.ExpectedIdentifier, { state });\n          }\n          name = state.tokenValue as string;\n          nextToken(state);\n          // Change $This to $Scope, change $Scope to $Member, keep $Member as-is, change $Keyed to $Member, disregard other flags\n          access = ((access & (Access.This | Access.Scope)) << 1) | (access & Access.Member) | ((access & Access.Keyed) >> 1);\n          if ((state.currentToken as Token) === Token.OpenParen) {\n            if (access === Access.Reset) { // if the left hand side is a literal, make sure we parse a CallMember\n              access = Access.Member;\n            }\n            continue;\n          }\n          if (access & Access.Scope) {\n            result = new AccessScope(name, (result as AccessScope | AccessThis).ancestor);\n          } else { // if it's not $Scope, it's $Member\n            result = new AccessMember(result as IsLeftHandSide, name);\n          }\n          continue;\n        case Token.OpenBracket:\n          state.assignable = true;\n          nextToken(state);\n          access = Access.Keyed;\n          result = new AccessKeyed(result as IsLeftHandSide, parse(state, Access.Reset, Precedence.Assign, bindingType));\n          consume(state, Token.CloseBracket);\n          break;\n        case Token.OpenParen:\n          state.assignable = false;\n          nextToken(state);\n          const args = new Array<IsAssign>();\n          while ((state.currentToken as Token) !== Token.CloseParen) {\n            args.push(parse(state, Access.Reset, Precedence.Assign, bindingType));\n            if (!consumeOpt(state, Token.Comma)) {\n              break;\n            }\n          }\n          consume(state, Token.CloseParen);\n          if (access & Access.Scope) {\n            result = new CallScope(name, args, (result as AccessScope | AccessThis).ancestor);\n          } else if (access & Access.Member) {\n            result = new CallMember(result as IsLeftHandSide, name, args);\n          } else {\n            result = new CallFunction(result as IsLeftHandSide, args);\n          }\n          access = 0;\n          break;\n        case Token.TemplateTail:\n          state.assignable = false;\n          const strings = [state.tokenValue as string];\n          result = new TaggedTemplate(strings, strings, result as IsLeftHandSide);\n          nextToken(state);\n          break;\n        case Token.TemplateContinuation:\n          result = parseTemplate(state, access, bindingType, result as IsLeftHandSide, true);\n        default:\n      }\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  if (Precedence.Binary < minPrecedence) return result as any;\n\n  /** parseBinaryExpression\n   * https://tc39.github.io/ecma262/#sec-multiplicative-operators\n   *\n   * MultiplicativeExpression : (local precedence 6)\n   *   UnaryExpression\n   *   MultiplicativeExpression * / % UnaryExpression\n   *\n   * AdditiveExpression : (local precedence 5)\n   *   MultiplicativeExpression\n   *   AdditiveExpression + - MultiplicativeExpression\n   *\n   * RelationalExpression : (local precedence 4)\n   *   AdditiveExpression\n   *   RelationalExpression < > <= >= instanceof in AdditiveExpression\n   *\n   * EqualityExpression : (local precedence 3)\n   *   RelationalExpression\n   *   EqualityExpression == != === !== RelationalExpression\n   *\n   * LogicalANDExpression : (local precedence 2)\n   *   EqualityExpression\n   *   LogicalANDExpression && EqualityExpression\n   *\n   * LogicalORExpression : (local precedence 1)\n   *   LogicalANDExpression\n   *   LogicalORExpression || LogicalANDExpression\n   */\n  while ((state.currentToken & Token.BinaryOp) > 0) {\n    const opToken = state.currentToken;\n    if ((opToken & Token.Precedence) <= minPrecedence) {\n      break;\n    }\n    nextToken(state);\n    result = new Binary(TokenValues[opToken & Token.Type] as BinaryOperator, result as IsBinary, parse(state, access, opToken & Token.Precedence, bindingType));\n    state.assignable = false;\n  }\n  // tslint:disable-next-line:no-any\n  if (Precedence.Conditional < minPrecedence) return result as any;\n\n  /**\n   * parseConditionalExpression\n   * https://tc39.github.io/ecma262/#prod-ConditionalExpression\n   *\n   * ConditionalExpression :\n   *   1. BinaryExpression\n   *   2. BinaryExpression ? AssignmentExpression : AssignmentExpression\n   *\n   * IsValidAssignmentTarget\n   *   1,2 = false\n   */\n\n  if (consumeOpt(state, Token.Question)) {\n    const yes = parse(state, access, Precedence.Assign, bindingType);\n    consume(state, Token.Colon);\n    result = new Conditional(result as IsBinary, yes, parse(state, access, Precedence.Assign, bindingType));\n    state.assignable = false;\n  }\n  // tslint:disable-next-line:no-any\n  if (Precedence.Assign < minPrecedence) return result as any;\n\n  /** parseAssignmentExpression\n   * https://tc39.github.io/ecma262/#prod-AssignmentExpression\n   * Note: AssignmentExpression here is equivalent to ES Expression because we don't parse the comma operator\n   *\n   * AssignmentExpression :\n   *   1. ConditionalExpression\n   *   2. LeftHandSideExpression = AssignmentExpression\n   *\n   * IsValidAssignmentTarget\n   *   1,2 = false\n   */\n  if (consumeOpt(state, Token.Equals)) {\n    if (!state.assignable) {\n      throw Reporter.error(SemanticError.NotAssignable, { state });\n    }\n    result = new Assign(result as IsAssignable, parse(state, access, Precedence.Assign, bindingType));\n  }\n  // tslint:disable-next-line:no-any\n  if (Precedence.Variadic < minPrecedence) return result as any;\n\n  /** parseValueConverter\n   */\n  while (consumeOpt(state, Token.Bar)) {\n    if (state.currentToken === Token.EOF) {\n      throw Reporter.error(112);\n    }\n    const name = state.tokenValue as string;\n    nextToken(state);\n    const args = new Array<IsAssign>();\n    while (consumeOpt(state, Token.Colon)) {\n      args.push(parse(state, access, Precedence.Assign, bindingType));\n    }\n    result = new ValueConverter(result as IsValueConverter, name, args);\n  }\n\n  /** parseBindingBehavior\n   */\n  while (consumeOpt(state, Token.Ampersand)) {\n    if (state.currentToken === Token.EOF) {\n      throw Reporter.error(113);\n    }\n    const name = state.tokenValue as string;\n    nextToken(state);\n    const args = new Array<IsAssign>();\n    while (consumeOpt(state, Token.Colon)) {\n      args.push(parse(state, access, Precedence.Assign, bindingType));\n    }\n    result = new BindingBehavior(result as IsBindingBehavior, name, args);\n  }\n  if (state.currentToken !== Token.EOF) {\n    if (bindingType & BindingType.Interpolation) {\n      // tslint:disable-next-line:no-any\n      return result as any;\n    }\n    if (state.tokenRaw === 'of') {\n      throw Reporter.error(SemanticError.UnexpectedForOf, { state });\n    }\n    throw Reporter.error(SyntaxError.UnconsumedToken, { state });\n  }\n  // tslint:disable-next-line:no-any\n  return result as any;\n}\n\n/**\n * parseArrayLiteralExpression\n * https://tc39.github.io/ecma262/#prod-ArrayLiteral\n *\n * ArrayLiteral :\n *   [ Elision(opt) ]\n *   [ ElementList ]\n *   [ ElementList, Elision(opt) ]\n *\n * ElementList :\n *   Elision(opt) AssignmentExpression\n *   ElementList, Elision(opt) AssignmentExpression\n *\n * Elision :\n *  ,\n *  Elision ,\n */\nfunction parseArrayLiteralExpression(state: ParserState, access: Access, bindingType: BindingType): ArrayBindingPattern | ArrayLiteral {\n  nextToken(state);\n  const elements = new Array<IsAssign>();\n  while (state.currentToken !== Token.CloseBracket) {\n    if (consumeOpt(state, Token.Comma)) {\n      elements.push($undefined);\n      if ((state.currentToken as Token) === Token.CloseBracket) {\n        elements.push($undefined);\n        break;\n      }\n    } else {\n      elements.push(parse(state, access, Precedence.Assign, bindingType & ~BindingType.IsIterator));\n      if (consumeOpt(state, Token.Comma)) {\n        if ((state.currentToken as Token) === Token.CloseBracket) {\n          elements.push($undefined);\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n  }\n  consume(state, Token.CloseBracket);\n  if (bindingType & BindingType.IsIterator) {\n    return new ArrayBindingPattern(elements);\n  } else {\n    state.assignable = false;\n    return new ArrayLiteral(elements);\n  }\n}\n\nfunction parseForOfStatement(state: ParserState, result: BindingIdentifier | ArrayBindingPattern | ObjectBindingPattern): ForOfStatement {\n  if ((result.$kind & ExpressionKind.IsForDeclaration) === 0) {\n    throw Reporter.error(SyntaxError.InvalidForDeclaration, { state });\n  }\n  if (state.currentToken !== Token.OfKeyword) {\n    throw Reporter.error(SyntaxError.InvalidForDeclaration, { state });\n  }\n  nextToken(state);\n  const declaration = result;\n  const statement = parse(state, Access.Reset, Precedence.Variadic, BindingType.None);\n  return new ForOfStatement(declaration, statement as IsBindingBehavior);\n}\n\n/**\n * parseObjectLiteralExpression\n * https://tc39.github.io/ecma262/#prod-Literal\n *\n * ObjectLiteral :\n *   { }\n *   { PropertyDefinitionList }\n *\n * PropertyDefinitionList :\n *   PropertyDefinition\n *   PropertyDefinitionList, PropertyDefinition\n *\n * PropertyDefinition :\n *   IdentifierName\n *   PropertyName : AssignmentExpression\n *\n * PropertyName :\n *   IdentifierName\n *   StringLiteral\n *   NumericLiteral\n */\nfunction parseObjectLiteralExpression(state: ParserState, bindingType: BindingType): ObjectBindingPattern | ObjectLiteral {\n  const keys = new Array<string | number>();\n  const values = new Array<IsAssign>();\n  nextToken(state);\n  while (state.currentToken !== Token.CloseBrace) {\n    keys.push(state.tokenValue);\n    // Literal = mandatory colon\n    if (state.currentToken & Token.StringOrNumericLiteral) {\n      nextToken(state);\n      consume(state, Token.Colon);\n      values.push(parse(state, Access.Reset, Precedence.Assign, bindingType & ~BindingType.IsIterator));\n    } else if (state.currentToken & Token.IdentifierName) {\n      // IdentifierName = optional colon\n      const { currentChar, currentToken, index } = state;\n      nextToken(state);\n      if (consumeOpt(state, Token.Colon)) {\n        values.push(parse(state, Access.Reset, Precedence.Assign, bindingType & ~BindingType.IsIterator));\n      } else {\n        // Shorthand\n        state.currentChar = currentChar;\n        state.currentToken = currentToken;\n        state.index = index;\n        values.push(parse(state, Access.Reset, Precedence.Primary, bindingType & ~BindingType.IsIterator));\n      }\n    } else {\n      throw Reporter.error(SyntaxError.InvalidObjectLiteralPropertyDefinition, { state });\n    }\n    if ((state.currentToken as Token) !== Token.CloseBrace) {\n      consume(state, Token.Comma);\n    }\n  }\n  consume(state, Token.CloseBrace);\n  if (bindingType & BindingType.IsIterator) {\n    return new ObjectBindingPattern(keys, values);\n  } else {\n    state.assignable = false;\n    return new ObjectLiteral(keys, values);\n  }\n}\n\nfunction parseInterpolation(state: ParserState): Interpolation {\n  const parts = [];\n  const expressions = [];\n  const length = state.length;\n  let result = '';\n  while (state.index < length) {\n    switch (state.currentChar) {\n      case Char.Dollar:\n        if (state.input.charCodeAt(state.index + 1) === Char.OpenBrace) {\n          parts.push(result);\n          result = '';\n\n          state.index += 2;\n          state.currentChar = state.input.charCodeAt(state.index);\n          nextToken(state);\n          const expression = parse(state, Access.Reset, Precedence.Variadic, BindingType.Interpolation);\n          expressions.push(expression);\n          continue;\n        } else {\n          result += '$';\n        }\n        break;\n      case Char.Backslash:\n        result += String.fromCharCode(unescapeCode(nextChar(state)));\n        break;\n      default:\n        result += String.fromCharCode(state.currentChar);\n    }\n    nextChar(state);\n  }\n  if (expressions.length) {\n    parts.push(result);\n    return new Interpolation(parts, expressions);\n  }\n  return null;\n}\n\n/**\n * parseTemplateLiteralExpression\n * https://tc39.github.io/ecma262/#prod-Literal\n *\n * Template :\n *   NoSubstitutionTemplate\n *   TemplateHead\n *\n * NoSubstitutionTemplate :\n *   ` TemplateCharacters(opt) `\n *\n * TemplateHead :\n *   ` TemplateCharacters(opt) ${\n *\n * TemplateSubstitutionTail :\n *   TemplateMiddle\n *   TemplateTail\n *\n * TemplateMiddle :\n *   } TemplateCharacters(opt) ${\n *\n * TemplateTail :\n *   } TemplateCharacters(opt) `\n *\n * TemplateCharacters :\n *   TemplateCharacter TemplateCharacters(opt)\n *\n * TemplateCharacter :\n *   $ [lookahead ≠ {]\n *   \\ EscapeSequence\n *   SourceCharacter (but not one of ` or \\ or $)\n */\nfunction parseTemplate(state: ParserState, access: Access, bindingType: BindingType, result: IsLeftHandSide, tagged: boolean): TaggedTemplate | Template {\n  const cooked = [state.tokenValue as string];\n  // TODO: properly implement raw parts / decide whether we want this\n  consume(state, Token.TemplateContinuation);\n  const expressions = [parse(state, access, Precedence.Assign, bindingType)];\n  while ((state.currentToken = scanTemplateTail(state)) !== Token.TemplateTail) {\n    cooked.push(state.tokenValue as string);\n    consume(state, Token.TemplateContinuation);\n    expressions.push(parse(state, access, Precedence.Assign, bindingType));\n  }\n  cooked.push(state.tokenValue as string);\n  state.assignable = false;\n  if (tagged) {\n    nextToken(state);\n    return new TaggedTemplate(cooked, cooked, result, expressions);\n  } else {\n    nextToken(state);\n    return new Template(cooked, expressions);\n  }\n}\n\nfunction nextToken(state: ParserState): void {\n  while (state.index < state.length) {\n    state.startIndex = state.index;\n    if ((state.currentToken = CharScanners[state.currentChar](state)) !== null) { // a null token means the character must be skipped\n      return;\n    }\n  }\n  state.currentToken = Token.EOF;\n}\n\nfunction nextChar(state: ParserState): number {\n  return state.currentChar = state.input.charCodeAt(++state.index);\n}\n\nfunction scanIdentifier(state: ParserState): Token {\n  // run to the next non-idPart\n  while (IdParts[nextChar(state)]);\n\n  const token: Token|undefined = KeywordLookup[state.tokenValue = state.tokenRaw];\n  return token === undefined ? Token.Identifier : token;\n}\n\nfunction scanNumber(state: ParserState, isFloat: boolean): Token {\n  let char = state.currentChar;\n  if (isFloat === false) {\n    do {\n      char = nextChar(state);\n    } while (char <= Char.Nine && char >= Char.Zero);\n\n    if (char !== Char.Dot) {\n      state.tokenValue = parseInt(state.tokenRaw, 10);\n      return Token.NumericLiteral;\n    }\n    // past this point it's always a float\n    char = nextChar(state);\n    if (state.index >= state.length) {\n      // unless the number ends with a dot - that behaves a little different in native ES expressions\n      // but in our AST that behavior has no effect because numbers are always stored in variables\n      state.tokenValue = parseInt(state.tokenRaw.slice(0, -1), 10);\n      return Token.NumericLiteral;\n    }\n  }\n\n  if (char <= Char.Nine && char >= Char.Zero) {\n    do {\n      char = nextChar(state);\n    } while (char <= Char.Nine && char >= Char.Zero);\n  } else {\n    state.currentChar = state.input.charCodeAt(--state.index);\n  }\n\n  state.tokenValue = parseFloat(state.tokenRaw);\n  return Token.NumericLiteral;\n}\n\nfunction scanString(state: ParserState): Token {\n  const quote = state.currentChar;\n  nextChar(state); // Skip initial quote.\n\n  let unescaped = 0;\n  const buffer = new Array<string>();\n  let marker = state.index;\n\n  while (state.currentChar !== quote) {\n    if (state.currentChar === Char.Backslash) {\n      buffer.push(state.input.slice(marker, state.index));\n      nextChar(state);\n      unescaped = unescapeCode(state.currentChar);\n      nextChar(state);\n      buffer.push(String.fromCharCode(unescaped));\n      marker = state.index;\n    } else if (state.index >= state.length) {\n      throw Reporter.error(SyntaxError.UnterminatedQuote, { state });\n    } else {\n      nextChar(state);\n    }\n  }\n\n  const last = state.input.slice(marker, state.index);\n  nextChar(state); // Skip terminating quote.\n\n  // Compute the unescaped string value.\n  buffer.push(last);\n  const unescapedStr = buffer.join('');\n\n  state.tokenValue = unescapedStr;\n  return Token.StringLiteral;\n}\n\nfunction scanTemplate(state: ParserState): Token {\n  let tail = true;\n  let result = '';\n\n  while (nextChar(state) !== Char.Backtick) {\n    if (state.currentChar === Char.Dollar) {\n      if ((state.index + 1) < state.length && state.input.charCodeAt(state.index + 1) === Char.OpenBrace) {\n        state.index++;\n        tail = false;\n        break;\n      } else {\n        result += '$';\n      }\n    } else if (state.currentChar === Char.Backslash) {\n      result += String.fromCharCode(unescapeCode(nextChar(state)));\n    } else {\n      if (state.index >= state.length) {\n        throw Reporter.error(SyntaxError.UnterminatedTemplate, { state });\n      }\n      result += String.fromCharCode(state.currentChar);\n    }\n  }\n\n  nextChar(state);\n  state.tokenValue = result;\n  if (tail) {\n    return Token.TemplateTail;\n  }\n  return Token.TemplateContinuation;\n}\n\nfunction scanTemplateTail(state: ParserState): Token {\n  if (state.index >= state.length) {\n    throw Reporter.error(SyntaxError.UnterminatedTemplate, { state });\n  }\n  state.index--;\n  return scanTemplate(state);\n}\n\nfunction consumeOpt(state: ParserState, token: Token): boolean {\n  // tslint:disable-next-line:possible-timing-attack\n  if (state.currentToken === token) {\n    nextToken(state);\n    return true;\n  }\n\n  return false;\n}\n\nfunction consume(state: ParserState, token: Token): void {\n  // tslint:disable-next-line:possible-timing-attack\n  if (state.currentToken === token) {\n    nextToken(state);\n  } else {\n    throw Reporter.error(SyntaxError.MissingExpectedToken, { state, expected: token });\n  }\n}\n\n/**\n * Array for mapping tokens to token values. The indices of the values\n * correspond to the token bits 0-38.\n * For this to work properly, the values in the array must be kept in\n * the same order as the token bits.\n * Usage: TokenValues[token & Token.Type]\n */\nconst TokenValues = [\n  $false, $true, $null, $undefined, '$this', '$parent',\n\n  '(', '{', '.', '}', ')', ',', '[', ']', ':', '?', '\\'', '\"',\n\n  '&', '|', '||', '&&', '==', '!=', '===', '!==', '<', '>',\n  '<=', '>=', 'in', 'instanceof', '+', '-', 'typeof', 'void', '*', '%', '/', '=', '!',\n  Token.TemplateTail, Token.TemplateContinuation,\n  'of'\n];\n\nconst KeywordLookup: {\n  [key: string]: Token;\n} = Object.create(null);\nKeywordLookup.true = Token.TrueKeyword;\nKeywordLookup.null = Token.NullKeyword;\nKeywordLookup.false = Token.FalseKeyword;\nKeywordLookup.undefined = Token.UndefinedKeyword;\nKeywordLookup.$this = Token.ThisScope;\nKeywordLookup.$parent = Token.ParentScope;\nKeywordLookup.in = Token.InKeyword;\nKeywordLookup.instanceof = Token.InstanceOfKeyword;\nKeywordLookup.typeof = Token.TypeofKeyword;\nKeywordLookup.void = Token.VoidKeyword;\nKeywordLookup.of = Token.OfKeyword;\n\n/**\n * Ranges of code points in pairs of 2 (eg 0x41-0x5B, 0x61-0x7B, ...) where the second value is not inclusive (5-7 means 5 and 6)\n * Single values are denoted by the second value being a 0\n *\n * Copied from output generated with \"node build/generate-unicode.js\"\n *\n * See also: https://en.wikibooks.org/wiki/Unicode/Character_reference/0000-0FFF\n */\nconst codes = {\n  /* [$0-9A-Za_a-z] */\n  AsciiIdPart: [0x24, 0, 0x30, 0x3A, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B],\n  IdStart: /*IdentifierStart*/[0x24, 0, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B, 0xAA, 0, 0xBA, 0, 0xC0, 0xD7, 0xD8, 0xF7, 0xF8, 0x2B9, 0x2E0, 0x2E5, 0x1D00, 0x1D26, 0x1D2C, 0x1D5D, 0x1D62, 0x1D66, 0x1D6B, 0x1D78, 0x1D79, 0x1DBF, 0x1E00, 0x1F00, 0x2071, 0, 0x207F, 0, 0x2090, 0x209D, 0x212A, 0x212C, 0x2132, 0, 0x214E, 0, 0x2160, 0x2189, 0x2C60, 0x2C80, 0xA722, 0xA788, 0xA78B, 0xA7AF, 0xA7B0, 0xA7B8, 0xA7F7, 0xA800, 0xAB30, 0xAB5B, 0xAB5C, 0xAB65, 0xFB00, 0xFB07, 0xFF21, 0xFF3B, 0xFF41, 0xFF5B],\n  Digit: /*DecimalNumber*/[0x30, 0x3A],\n  Skip: /*Skippable*/[0, 0x21, 0x7F, 0xA1]\n};\n\n/**\n * Decompress the ranges into an array of numbers so that the char code\n * can be used as an index to the lookup\n */\nfunction decompress(lookup: (CharScanner | number)[] | null, $set: Set<number> | null, compressed: number[], value: CharScanner | number | boolean): void {\n  const rangeCount = compressed.length;\n  for (let i = 0; i < rangeCount; i += 2) {\n    const start = compressed[i];\n    let end = compressed[i + 1];\n    end = end > 0 ? end : start + 1;\n    if (lookup) {\n      lookup.fill(value as CharScanner | number, start, end);\n    }\n    if ($set) {\n      for (let ch = start; ch < end; ch++) {\n        $set.add(ch);\n      }\n    }\n  }\n}\n\n// CharFuncLookup functions\nfunction returnToken(token: Token): (s: ParserState) => Token {\n  return s => {\n    nextChar(s);\n    return token;\n  };\n}\nconst unexpectedCharacter: CharScanner = s => {\n  throw Reporter.error(SyntaxError.UnexpectedCharacter, { state: s });\n};\nunexpectedCharacter.notMapped = true;\n\n// ASCII IdentifierPart lookup\nconst AsciiIdParts = new Set();\ndecompress(null, AsciiIdParts, codes.AsciiIdPart, true);\n\n// IdentifierPart lookup\nconst IdParts = new Uint8Array(0xFFFF);\n// tslint:disable-next-line:no-any\ndecompress(IdParts as any, null, codes.IdStart, 1);\n// tslint:disable-next-line:no-any\ndecompress(IdParts as any, null, codes.Digit, 1);\n\ntype CharScanner = ((p: ParserState) => Token | null) & { notMapped?: boolean };\n\n// Character scanning function lookup\nconst CharScanners = new Array<CharScanner>(0xFFFF);\nCharScanners.fill(unexpectedCharacter, 0, 0xFFFF);\n\ndecompress(CharScanners, null, codes.Skip, s => {\n  nextChar(s);\n  return null;\n});\ndecompress(CharScanners, null, codes.IdStart, scanIdentifier);\ndecompress(CharScanners, null, codes.Digit, s => scanNumber(s, false));\n\nCharScanners[Char.DoubleQuote] =\nCharScanners[Char.SingleQuote] = s => {\n  return scanString(s);\n};\nCharScanners[Char.Backtick] = s => {\n  return scanTemplate(s);\n};\n\n// !, !=, !==\nCharScanners[Char.Exclamation] = s => {\n  if (nextChar(s) !== Char.Equals) {\n    return Token.Exclamation;\n  }\n  if (nextChar(s) !== Char.Equals) {\n    return Token.ExclamationEquals;\n  }\n  nextChar(s);\n  return Token.ExclamationEqualsEquals;\n};\n\n// =, ==, ===\nCharScanners[Char.Equals] =  s => {\n  if (nextChar(s) !== Char.Equals) {\n    return Token.Equals;\n  }\n  if (nextChar(s) !== Char.Equals) {\n    return Token.EqualsEquals;\n  }\n  nextChar(s);\n  return Token.EqualsEqualsEquals;\n};\n\n// &, &&\nCharScanners[Char.Ampersand] = s => {\n  if (nextChar(s) !== Char.Ampersand) {\n    return Token.Ampersand;\n  }\n  nextChar(s);\n  return Token.AmpersandAmpersand;\n};\n\n// |, ||\nCharScanners[Char.Bar] = s => {\n  if (nextChar(s) !== Char.Bar) {\n    return Token.Bar;\n  }\n  nextChar(s);\n  return Token.BarBar;\n};\n\n// .\nCharScanners[Char.Dot] = s => {\n  if (nextChar(s) <= Char.Nine && s.currentChar >= Char.Zero) {\n    return scanNumber(s, true);\n  }\n  return Token.Dot;\n};\n\n// <, <=\nCharScanners[Char.LessThan] =  s => {\n  if (nextChar(s) !== Char.Equals) {\n    return Token.LessThan;\n  }\n  nextChar(s);\n  return Token.LessThanEquals;\n};\n\n// >, >=\nCharScanners[Char.GreaterThan] =  s => {\n  if (nextChar(s) !== Char.Equals) {\n    return Token.GreaterThan;\n  }\n  nextChar(s);\n  return Token.GreaterThanEquals;\n};\n\nCharScanners[Char.Percent]      = returnToken(Token.Percent);\nCharScanners[Char.OpenParen]    = returnToken(Token.OpenParen);\nCharScanners[Char.CloseParen]   = returnToken(Token.CloseParen);\nCharScanners[Char.Asterisk]     = returnToken(Token.Asterisk);\nCharScanners[Char.Plus]         = returnToken(Token.Plus);\nCharScanners[Char.Comma]        = returnToken(Token.Comma);\nCharScanners[Char.Minus]        = returnToken(Token.Minus);\nCharScanners[Char.Slash]        = returnToken(Token.Slash);\nCharScanners[Char.Colon]        = returnToken(Token.Colon);\nCharScanners[Char.Question]     = returnToken(Token.Question);\nCharScanners[Char.OpenBracket]  = returnToken(Token.OpenBracket);\nCharScanners[Char.CloseBracket] = returnToken(Token.CloseBracket);\nCharScanners[Char.OpenBrace]    = returnToken(Token.OpenBrace);\nCharScanners[Char.CloseBrace]   = returnToken(Token.CloseBrace);\n","import { DI, inject, PLATFORM } from '@aurelia/kernel';\nimport { DOM, IAttr, INode } from '@aurelia/runtime';\nimport { AttrSyntax, ElementSyntax } from './ast';\nimport { IAttributeParser } from './attribute-parser';\n\nconst domParser = DOM.createElement('div') as HTMLDivElement;\n\nexport const enum NodeType {\n  Element = 1,\n  Attr = 2,\n  Text = 3,\n  CDATASection = 4,\n  EntityReference = 5,\n  Entity = 6,\n  ProcessingInstruction = 7,\n  Comment = 8,\n  Document = 9,\n  DocumentType = 10,\n  DocumentFragment = 11,\n  Notation = 12\n}\n\nexport interface IElementParser {\n  parse(markupOrNode: string | INode): ElementSyntax;\n}\n\nexport const IElementParser = DI.createInterface<IElementParser>()\n  .withDefault(x => x.singleton(ElementParser));\n\n/** @internal */\n@inject(IAttributeParser)\nexport class ElementParser implements IElementParser {\n  public attrParser: IAttributeParser;\n\n  constructor(attrParser: IAttributeParser) {\n    this.attrParser = attrParser;\n  }\n\n  public parse(markupOrNode: string | INode): ElementSyntax {\n    let node: INode;\n    if (typeof markupOrNode === 'string') {\n      domParser.innerHTML = markupOrNode;\n      node = domParser.firstElementChild;\n      domParser.removeChild(node as Node);\n    } else {\n      node = markupOrNode;\n    }\n\n    let children: ElementSyntax[];\n    let content: ElementSyntax;\n    if (node.nodeName === 'TEMPLATE') {\n      content = this.parse((node as HTMLTemplateElement).content);\n      children = PLATFORM.emptyArray as ElementSyntax[];\n    } else {\n      content = null;\n      const nodeChildNodes = node.childNodes;\n      const nodeLen = nodeChildNodes.length;\n      if (nodeLen > 0) {\n        children = Array(nodeLen);\n        for (let i = 0, ii = nodeLen; i < ii; ++i) {\n          children[i] = this.parse(nodeChildNodes[i]);\n        }\n      } else {\n        children = PLATFORM.emptyArray as ElementSyntax[];\n      }\n    }\n\n    let attributes: AttrSyntax[];\n    const nodeAttributes = (node as {attributes?: IAttr[]}).attributes;\n    const attrLen = nodeAttributes === undefined ? 0 : nodeAttributes.length;\n    if (attrLen > 0) {\n      attributes = Array(attrLen);\n      for (let i = 0, ii = attrLen; i < ii; ++i) {\n        const attr = nodeAttributes[i];\n        attributes[i] = this.attrParser.parse(attr.name, attr.value);\n      }\n    } else {\n      attributes = PLATFORM.emptyArray as AttrSyntax[];\n    }\n\n    return new ElementSyntax(node as Node, node.nodeName, content, children, attributes);\n  }\n}\n","import { Immutable, IServiceLocator, PLATFORM } from '@aurelia/kernel';\nimport { BindingMode, CustomAttributeResource, CustomElementResource, DOM, HydrateTemplateController, IAttributeDefinition, IBindableDescription, IExpressionParser, IResourceDescriptions, ITemplateDefinition, TargetedInstruction } from '@aurelia/runtime';\nimport { AttrSyntax, ElementSyntax } from './ast';\nimport { IAttributeParser } from './attribute-parser';\nimport { BindingCommandResource,  IBindingCommand } from './binding-command';\nimport { Char } from './common';\nimport { IElementParser, NodeType } from './element-parser';\n\nexport class SemanticModel {\n  public readonly isSemanticModel: true;\n  public readonly root: ElementSymbol;\n\n  public resources: IResourceDescriptions;\n  public attrParser: IAttributeParser;\n  public elParser: IElementParser;\n  public exprParser: IExpressionParser;\n\n  private readonly attrDefCache: Record<string, IAttributeDefinition>;\n  private readonly elDefCache: Record<string, ITemplateDefinition>;\n  private readonly commandCache: Record<string, IBindingCommand>;\n\n  private constructor(\n    definition: ITemplateDefinition,\n    resources: IResourceDescriptions,\n    attrParser: IAttributeParser,\n    elParser: IElementParser,\n    exprParser: IExpressionParser\n  ) {\n    this.isSemanticModel = true;\n\n    this.resources = resources;\n    this.attrParser = attrParser;\n    this.elParser = elParser;\n    this.exprParser = exprParser;\n\n    this.attrDefCache = {};\n    this.elDefCache = {};\n    this.commandCache = {};\n    const syntax = this.elParser.parse(definition.template);\n    definition.template = syntax.node;\n    this.root = new ElementSymbol(\n      /*   semanticModel*/this,\n      /*isDefinitionRoot*/true,\n      /* $definitionRoot*/null,\n      /*         $parent*/null,\n      /*          syntax*/syntax,\n      /*      definition*/definition\n    );\n  }\n\n  public static create(\n    definition: ITemplateDefinition,\n    resources: IResourceDescriptions,\n    attrParser: IAttributeParser,\n    elParser: IElementParser,\n    exprParser: IExpressionParser): SemanticModel;\n  public static create(\n    definition: ITemplateDefinition,\n    resources: IResourceDescriptions,\n    locator: IServiceLocator): SemanticModel;\n  public static create(\n    definition: ITemplateDefinition,\n    resources: IResourceDescriptions,\n    attrParser: IServiceLocator | IAttributeParser,\n    elParser?: IElementParser,\n    exprParser?: IExpressionParser): SemanticModel {\n\n    if ('get' in attrParser) {\n      const locator = attrParser;\n      attrParser = locator.get<IAttributeParser>(IAttributeParser);\n      elParser = locator.get<IElementParser>(IElementParser);\n      exprParser = locator.get<IExpressionParser>(IExpressionParser);\n    }\n\n    return new SemanticModel(definition, resources, attrParser, elParser, exprParser);\n  }\n\n  public getAttributeDefinition(name: string): IAttributeDefinition {\n    const existing = this.attrDefCache[name];\n    if (existing !== undefined) {\n      return existing;\n    }\n    const definition = this.resources.find(CustomAttributeResource, name) as IAttributeDefinition;\n    return this.attrDefCache[name] = definition === undefined ? null : definition;\n  }\n\n  public getElementDefinition(name: string): ITemplateDefinition {\n    const existing = this.elDefCache[name];\n    if (existing !== undefined) {\n      return existing;\n    }\n    const definition = this.resources.find(CustomElementResource, name) as ITemplateDefinition;\n    return this.elDefCache[name] = definition === undefined ? null : definition;\n  }\n\n  public getBindingCommand(name: string): IBindingCommand {\n    const existing = this.commandCache[name];\n    if (existing !== undefined) {\n      return existing;\n    }\n    const instance = this.resources.create(BindingCommandResource, name);\n    return this.commandCache[name] = instance === undefined ? null : instance;\n  }\n\n  public getAttributeSymbol(syntax: AttrSyntax, element: ElementSymbol): AttributeSymbol {\n    const definition = this.getAttributeDefinition(PLATFORM.camelCase(syntax.target));\n    const command = this.getBindingCommand(syntax.command);\n    return new AttributeSymbol(this, element, syntax, definition, command);\n  }\n\n  public getMultiAttrBindingSymbol(syntax: AttrSyntax, parent: AttributeSymbol): MultiAttributeBindingSymbol {\n    const command = this.getBindingCommand(syntax.command);\n    return new MultiAttributeBindingSymbol(this, parent, syntax, command);\n  }\n\n  public getElementSymbol(syntax: ElementSyntax, parent: ElementSymbol): ElementSymbol {\n    const node = syntax.node as Element;\n    let definition: ITemplateDefinition;\n    if (node.nodeType === NodeType.Element) {\n      const resourceKey = (node.getAttribute('as-element') || node.nodeName).toLowerCase();\n      definition = this.getElementDefinition(resourceKey);\n    }\n\n    return new ElementSymbol(\n      /*   semanticModel*/this,\n      /*isDefinitionRoot*/false,\n      /* $definitionRoot*/parent.$root,\n      /*         $parent*/parent,\n      /*          syntax*/syntax,\n      /*      definition*/definition\n    );\n  }\n\n  public getTemplateElementSymbol(syntax: ElementSyntax, parent: ElementSymbol, definition: ITemplateDefinition, definitionRoot: ElementSymbol): ElementSymbol {\n    return new ElementSymbol(\n      /*   semanticModel*/this,\n      /*isDefinitionRoot*/true,\n      /* $definitionRoot*/definitionRoot,\n      /*         $parent*/parent,\n      /*          syntax*/syntax,\n      /*      definition*/definition\n    );\n  }\n}\n\nexport interface IAttributeSymbol {\n  readonly $element: ElementSymbol;\n  readonly syntax: AttrSyntax;\n  readonly command: IBindingCommand | null;\n  readonly target: string;\n  readonly res: string | null;\n  readonly to: string;\n  readonly mode: BindingMode;\n  readonly bindable: IBindableDescription;\n\n  readonly rawName: string;\n  readonly rawValue: string;\n  readonly rawCommand: string;\n\n  readonly hasBindingCommand: boolean;\n  readonly isMultiAttrBinding: boolean;\n  readonly isHandledByBindingCommand: boolean;\n  readonly isTemplateController: boolean;\n  readonly isCustomAttribute: boolean;\n  readonly isAttributeBindable: boolean;\n  readonly isDefaultAttributeBindable: boolean;\n  readonly onCustomElement: boolean;\n  readonly isElementBindable: boolean;\n}\n\nexport class MultiAttributeBindingSymbol implements IAttributeSymbol {\n  public readonly semanticModel: SemanticModel;\n  public readonly $parent: AttributeSymbol;\n\n  public readonly $element: ElementSymbol;\n  public readonly syntax: AttrSyntax;\n  public readonly command: IBindingCommand | null;\n  public readonly target: string;\n  public readonly res: string;\n  public readonly to: string;\n  public readonly mode: BindingMode;\n  public readonly bindable: Immutable<Required<IBindableDescription>> | null;\n\n  public readonly rawName: string;\n  public readonly rawValue: string;\n  public readonly rawCommand: string | null;\n\n  public readonly hasBindingCommand: boolean;\n  public readonly isMultiAttrBinding: boolean;\n  public readonly isHandledByBindingCommand: boolean;\n  public readonly isTemplateController: boolean;\n  public readonly isCustomAttribute: boolean;\n  public readonly isAttributeBindable: boolean;\n  public readonly isDefaultAttributeBindable: boolean;\n  public readonly onCustomElement: boolean;\n  public readonly isElementBindable: boolean;\n\n  constructor(\n    semanticModel: SemanticModel,\n    $parent: AttributeSymbol,\n    syntax: AttrSyntax,\n    command: IBindingCommand | null\n  ) {\n    this.semanticModel = semanticModel;\n    this.$parent = $parent;\n\n    this.$element = null;\n    this.syntax = syntax;\n    this.command = command;\n    this.target = syntax.target;\n    this.res = null;\n    const parentDefinition = $parent.definition;\n    // this.to, this.mode and this.bindable will be overridden if there is a matching bindable property\n    this.to = syntax.target;\n    this.mode = parentDefinition.defaultBindingMode === undefined ? BindingMode.toView : parentDefinition.defaultBindingMode;\n    this.bindable = null;\n\n    this.rawName = syntax.rawName;\n    this.rawValue = syntax.rawValue;\n    this.rawCommand = syntax.command;\n\n    this.hasBindingCommand = !!command;\n    this.isMultiAttrBinding = true;\n    this.isHandledByBindingCommand = this.hasBindingCommand && command.handles(this);\n    this.isTemplateController = false;\n    this.isCustomAttribute = true;\n    this.isAttributeBindable = false;\n    this.onCustomElement = false;\n    this.isElementBindable = false;\n\n    const bindables = parentDefinition.bindables;\n    for (const prop in bindables) {\n      const b = bindables[prop];\n      if (b.property === syntax.target) {\n        this.to = b.property;\n        this.mode =  (b.mode !== undefined && b.mode !== BindingMode.default) ? b.mode : BindingMode.toView;\n        this.bindable = b as Immutable<Required<IBindableDescription>>;\n        this.isAttributeBindable = true;\n        break;\n      }\n    }\n  }\n}\n\nexport class AttributeSymbol implements IAttributeSymbol {\n  public readonly semanticModel: SemanticModel;\n  public readonly definition: IAttributeDefinition | null;\n\n  public readonly $element: ElementSymbol;\n  public readonly syntax: AttrSyntax;\n  public readonly command: IBindingCommand | null;\n  public readonly target: string;\n  public readonly res: string | null;\n  public readonly to: string;\n  public readonly mode: BindingMode;\n  public readonly bindable: Immutable<Required<IBindableDescription>> | null;\n\n  public readonly rawName: string;\n  public readonly rawValue: string;\n  public readonly rawCommand: string | null;\n\n  public readonly hasBindingCommand: boolean;\n  public readonly isMultiAttrBinding: boolean;\n  public readonly isHandledByBindingCommand: boolean;\n  public readonly isTemplateController: boolean;\n  public readonly isCustomAttribute: boolean;\n  public readonly isAttributeBindable: boolean;\n  public readonly isDefaultAttributeBindable: boolean;\n  public readonly onCustomElement: boolean;\n  public readonly isElementBindable: boolean;\n\n  public readonly $multiAttrBindings: ReadonlyArray<MultiAttributeBindingSymbol>;\n  public readonly isBindable: boolean;\n  private _isProcessed: boolean;\n  public get isProcessed(): boolean {\n    return this._isProcessed;\n  }\n\n  // TODO: Reduce complexity (currently at 60)\n  constructor(\n    semanticModel: SemanticModel,\n    $element: ElementSymbol,\n    syntax: AttrSyntax,\n    definition: IAttributeDefinition | null,\n    command: IBindingCommand | null\n  ) {\n    this.semanticModel = semanticModel;\n    this.definition = definition;\n\n    this.$element = $element;\n    this.syntax = syntax;\n    this.command = command;\n    this.target = syntax.target;\n    this.res = null;\n    // this.to, this.mode and this.bindable will be overridden if there is a matching bindable property\n    this.to = syntax.target;\n    this.mode = BindingMode.toView;\n    this.bindable = null;\n\n    this.rawName = syntax.rawName;\n    this.rawValue = syntax.rawValue;\n    this.rawCommand = syntax.command;\n\n    this.hasBindingCommand = !!command;\n    this.isMultiAttrBinding = false;\n    this.isHandledByBindingCommand = this.hasBindingCommand && command.handles(this);\n    this.isTemplateController = false;\n    this.isCustomAttribute = !!definition;\n    this.isAttributeBindable = false;\n    this.isDefaultAttributeBindable = false;\n    this.onCustomElement = $element.isCustomElement;\n    this.isElementBindable = false;\n\n    this.$multiAttrBindings = PLATFORM.emptyArray;\n    this.isBindable = false;\n    this._isProcessed = this.rawName === 'as-element'; // as-element is processed by the semantic model and shouldn't be processed by the template compiler\n\n    if (this.isCustomAttribute) {\n      this.isTemplateController = !!definition.isTemplateController;\n      this.res = definition.name;\n      const value = syntax.rawValue;\n      let lastIndex = 0;\n      let multiAttrBindings: MultiAttributeBindingSymbol[];\n      for (let i = 0, ii = value.length; i < ii; ++i) {\n        if (value.charCodeAt(i) === Char.Semicolon) {\n          if (!this.isMultiAttrBinding) {\n            multiAttrBindings = [];\n            this.isMultiAttrBinding = true;\n          }\n          const innerAttr = value.slice(lastIndex, i).trim();\n          lastIndex = i + 1;\n          if (innerAttr.length === 0) {\n            continue;\n          }\n          for (let j = 0, jj = innerAttr.length; j < jj; ++j) {\n            if (innerAttr.charCodeAt(j) === Char.Colon) {\n              const innerAttrName = innerAttr.slice(0, j).trim();\n              const innerAttrValue = innerAttr.slice(j + 1).trim();\n              const innerAttrSyntax = this.semanticModel.attrParser.parse(innerAttrName, innerAttrValue);\n              multiAttrBindings.push(this.semanticModel.getMultiAttrBindingSymbol(innerAttrSyntax, this));\n            }\n          }\n        }\n      }\n      if (this.isMultiAttrBinding) {\n        this.$multiAttrBindings = multiAttrBindings;\n      }\n      const bindables = definition.bindables;\n      if (!this.isMultiAttrBinding) {\n        for (const prop in bindables) {\n          const b = bindables[prop];\n          const defaultBindingMode = definition.defaultBindingMode === undefined ? BindingMode.toView : definition.defaultBindingMode;\n          this.to = b.property;\n          this.mode = (b.mode !== undefined && b.mode !== BindingMode.default) ? b.mode : defaultBindingMode;\n          this.bindable = b as Immutable<Required<IBindableDescription>>;\n          this.isBindable = this.isAttributeBindable = true;\n          break;\n        }\n        if (!this.isAttributeBindable) {\n          const defaultBindingMode = definition.defaultBindingMode;\n          this.to = 'value';\n          this.mode = defaultBindingMode === undefined ? BindingMode.toView : defaultBindingMode;\n          this.isBindable = this.isAttributeBindable = this.isDefaultAttributeBindable = true;\n        }\n      }\n    } else if ($element.isCustomElement) {\n      const bindables = $element.definition.bindables;\n      for (const prop in bindables) {\n        const b = bindables[prop];\n        if (b.attribute === syntax.target) {\n          this.to = b.property;\n          this.mode = (b.mode !== undefined && b.mode !== BindingMode.default) ? b.mode : BindingMode.toView;\n          this.bindable = b as Immutable<Required<IBindableDescription>>;\n          this.isBindable = this.isElementBindable = true;\n          break;\n        }\n      }\n      if (!this.isElementBindable) {\n        this.to = syntax.target;\n        this.mode = BindingMode.toView;\n      }\n    }\n  }\n\n  public markAsProcessed(): void {\n    this._isProcessed = true;\n    if (this.isTemplateController) {\n      (this.$element.node as Element).removeAttribute(this.rawName);\n    }\n  }\n}\n\nexport class ElementSymbol {\n  public readonly semanticModel: SemanticModel;\n  public readonly isRoot: boolean;\n  public readonly $root: ElementSymbol;\n  public readonly $parent: ElementSymbol;\n  public readonly definition: ITemplateDefinition | null;\n\n  public readonly $attributes: ReadonlyArray<AttributeSymbol>;\n  public readonly $children: ReadonlyArray<ElementSymbol>;\n  public readonly $liftedChildren: ReadonlyArray<ElementSymbol>;\n  public get $content(): ElementSymbol {\n    return this._$content;\n  }\n  public get isMarker(): boolean {\n    return this._isMarker;\n  }\n  public get isTemplate(): boolean {\n    return this._isTemplate;\n  }\n  public get isSlot(): boolean {\n    return this._isSlot;\n  }\n  public get isLet(): boolean {\n    return this._isLet;\n  }\n  public get node(): Node {\n    return this._node;\n  }\n  public get syntax(): ElementSyntax {\n    return this._syntax;\n  }\n  public get name(): string {\n    return this._name;\n  }\n  public get isCustomElement(): boolean {\n    return this._isCustomElement;\n  }\n  public get nextSibling(): ElementSymbol {\n    if (!this.$parent) {\n      return null;\n    }\n    const siblings = this.$parent.$children;\n    for (let i = 0, ii = siblings.length; i < ii; ++i) {\n      if (siblings[i] === this) {\n        const nextSibling = siblings[i + 1];\n        return nextSibling === undefined ? null : nextSibling;\n      }\n    }\n    return null;\n  }\n  public get firstChild(): ElementSymbol {\n    const firstChild = this.$children[0];\n    return firstChild === undefined ? null : firstChild;\n  }\n  public get componentRoot(): ElementSymbol {\n    return this.semanticModel.root;\n  }\n  public get isLifted(): boolean {\n    return this._isLifted;\n  }\n  private _$content: ElementSymbol;\n  private _isMarker: boolean;\n  private _isTemplate: boolean;\n  private _isSlot: boolean;\n  private _isLet: boolean;\n  private _node: Node;\n  private _syntax: ElementSyntax;\n  private _name: string;\n  private _isCustomElement: boolean;\n  private _isLifted: boolean;\n\n  constructor(\n    semanticModel: SemanticModel,\n    isRoot: boolean,\n    $root: ElementSymbol,\n    $parent: ElementSymbol,\n    syntax: ElementSyntax,\n    definition: ITemplateDefinition | null\n  ) {\n    this.semanticModel = semanticModel;\n    this.isRoot = isRoot;\n    this.$root = isRoot ? this : $root;\n    this.$parent = $parent;\n    this.definition = definition;\n\n    this._$content = null;\n    this._isMarker = false;\n    this._isTemplate = false;\n    this._isSlot = false;\n    this._isLet = false;\n    this._node = syntax.node;\n    this._syntax = syntax;\n    this._name = this.node.nodeName;\n    this._isCustomElement = false;\n    this._isLifted = false;\n\n    switch (this.name) {\n      case 'TEMPLATE':\n        this._isTemplate = true;\n        this._$content = this.semanticModel.getElementSymbol(syntax.$content, this);\n        break;\n      case 'SLOT':\n        this._isSlot = true;\n        break;\n      case 'LET':\n        this._isLet = true;\n    }\n    this._isCustomElement = !isRoot && !!definition;\n\n    const attributes = syntax.$attributes;\n    const attrLen = attributes.length;\n    if (attrLen > 0) {\n      const attrSymbols = Array<AttributeSymbol>(attrLen);\n      for (let i = 0, ii = attrLen; i < ii; ++i) {\n        attrSymbols[i] = this.semanticModel.getAttributeSymbol(attributes[i], this);\n      }\n      this.$attributes = attrSymbols;\n    } else {\n      this.$attributes = PLATFORM.emptyArray as AttributeSymbol[];\n    }\n\n    const children = syntax.$children;\n    const childLen = children.length;\n    if (childLen > 0) {\n      const childSymbols = Array<ElementSymbol>(childLen);\n      for (let i = 0, ii = childLen; i < ii; ++i) {\n        childSymbols[i] = this.semanticModel.getElementSymbol(children[i], this);\n      }\n      this.$children = childSymbols;\n    } else {\n      this.$children = PLATFORM.emptyArray as ElementSymbol[];\n    }\n  }\n\n  public makeTarget(): void {\n    (this.node as Element).classList.add('au');\n  }\n\n  public replaceTextNodeWithMarker(): void {\n    const marker = ElementSyntax.createMarker();\n    const node = this.node;\n    node.parentNode.insertBefore(marker.node, node);\n    node.textContent = ' ';\n    while (node.nextSibling && node.nextSibling.nodeType === NodeType.Text) {\n      node.parentNode.removeChild(node.nextSibling);\n    }\n    this.setToMarker(marker);\n  }\n\n  public replaceNodeWithMarker(): void {\n    const marker = ElementSyntax.createMarker();\n    const node = this.node;\n    if (node.parentNode) {\n      node.parentNode.replaceChild(marker.node, node);\n    } else if (this.isTemplate) {\n      (node as HTMLTemplateElement).content.appendChild(marker.node);\n    }\n    this.setToMarker(marker);\n  }\n\n  public lift(instruction: HydrateTemplateController): ElementSymbol {\n    const template = instruction.def.template = DOM.createElement('template') as HTMLTemplateElement;\n    const node = this.node as HTMLTemplateElement;\n    if (this.isTemplate) {\n      // copy remaining attributes over to the newly created template\n      const attributes = node.attributes;\n      while (attributes.length) {\n        const attr = attributes[0];\n        template.setAttribute(attr.name, attr.value);\n        node.removeAttribute(attr.name);\n      }\n      template.content.appendChild(node.content);\n      this.replaceNodeWithMarker();\n    } else {\n      this.replaceNodeWithMarker();\n      template.content.appendChild(node);\n    }\n    this.addInstructions([instruction]);\n    this._isLifted = true;\n    return this.semanticModel.getTemplateElementSymbol(\n      this.semanticModel.elParser.parse(template), this, instruction.def, null\n    );\n  }\n\n  public addInstructions(instructions: TargetedInstruction[]): void {\n    const def = this.$root.definition;\n    if (def.instructions === PLATFORM.emptyArray) {\n      def.instructions = [];\n    }\n    def.instructions.push(instructions);\n  }\n\n  private setToMarker(marker: ElementSyntax): void {\n    this._$content = null;\n    this._isCustomElement = this._isLet = this._isSlot = this._isTemplate = false;\n    this._isMarker = true;\n    this._name = 'AU-M';\n    this._node = marker.node;\n    this._syntax = marker;\n  }\n}\n","import { inject, PLATFORM } from '@aurelia/kernel';\nimport {\n  BindingMode,\n  BindingType,\n  FromViewBindingInstruction,\n  HydrateAttributeInstruction,\n  HydrateElementInstruction,\n  HydrateTemplateController,\n  IExpressionParser,\n  ILetBindingInstruction,\n  InterpolationInstruction,\n  IResourceDescriptions,\n  ITemplateCompiler,\n  ITemplateDefinition,\n  LetBindingInstruction,\n  LetElementInstruction,\n  OneTimeBindingInstruction,\n  RefBindingInstruction,\n  SetAttributeInstruction,\n  SetPropertyInstruction,\n  TargetedInstruction,\n  TargetedInstructionType,\n  TemplateDefinition,\n  TextBindingInstruction,\n  ToViewBindingInstruction,\n  TwoWayBindingInstruction,\n  ViewCompileFlags\n} from '@aurelia/runtime';\nimport { IAttributeParser } from './attribute-parser';\nimport { IElementParser, NodeType } from './element-parser';\nimport { AttributeSymbol, ElementSymbol, IAttributeSymbol, SemanticModel } from './semantic-model';\n\n@inject(IExpressionParser, IElementParser, IAttributeParser)\nexport class TemplateCompiler implements ITemplateCompiler {\n  public exprParser: IExpressionParser;\n  public elParser: IElementParser;\n  public attrParser: IAttributeParser;\n\n  public get name(): string {\n    return 'default';\n  }\n\n  constructor(exprParser: IExpressionParser, elParser: IElementParser, attrParser: IAttributeParser) {\n    this.exprParser = exprParser;\n    this.elParser = elParser;\n    this.attrParser = attrParser;\n  }\n\n  public compile(definition: ITemplateDefinition, resources: IResourceDescriptions, flags?: ViewCompileFlags): TemplateDefinition {\n    const model = SemanticModel.create(definition, resources, this.attrParser, this.elParser, this.exprParser);\n    const root = model.root;\n    let $el = root.isTemplate ? root.$content : root;\n    while ($el = this.compileNode($el));\n\n    // the flag should be passed correctly from rendering engine\n    if (root.isTemplate && (flags & ViewCompileFlags.surrogate)) {\n      this.compileSurrogate(root);\n    }\n\n    return definition as TemplateDefinition;\n  }\n\n  private compileNode($el: ElementSymbol): ElementSymbol {\n    const node = $el.node;\n    const nextSibling = $el.nextSibling;\n    switch (node.nodeType) {\n      case NodeType.Element:\n        if ($el.isSlot) {\n          $el.$root.definition.hasSlots = true;\n        } else if ($el.isLet) {\n          this.compileLetElement($el);\n        } else if ($el.isCustomElement) {\n          this.compileCustomElement($el);\n        } else {\n          this.compileElementNode($el);\n        }\n        if (!$el.isLifted) {\n          let $child = $el.firstChild || $el.$content;\n          while ($child) {\n            $child = this.compileNode($child);\n          }\n        }\n        return nextSibling;\n      case NodeType.Text:\n        const expression = this.exprParser.parse(($el.node as Text).wholeText, BindingType.Interpolation);\n        if (expression === null) {\n          while (($el = $el.nextSibling) && $el.node.nodeType === NodeType.Text);\n          return $el;\n        }\n        $el.replaceTextNodeWithMarker();\n        $el.addInstructions([new TextBindingInstruction(expression)]);\n        return nextSibling;\n      case NodeType.Comment:\n        return nextSibling;\n      case NodeType.Document:\n        return $el.firstChild;\n      case NodeType.DocumentType:\n        return nextSibling;\n      case NodeType.DocumentFragment:\n        return $el.firstChild;\n    }\n  }\n\n  private compileSurrogate($el: ElementSymbol): void {\n    const attributes = $el.$attributes;\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n      const $attr = attributes[i];\n      if ($attr.isTemplateController) {\n        throw new Error('Cannot have template controller on surrogate element.');\n      }\n      const instruction = this.compileAttribute($attr);\n      if (instruction !== null) {\n        $el.definition.surrogates.push(instruction);\n      } else {\n        let attrInst: TargetedInstruction;\n        // Doesn't make sense for these properties as they need to be unique\n        const name = $attr.target;\n        if (name !== 'id' && name !== 'part' && name !== 'replace-part') {\n          // tslint:disable-next-line:no-small-switch\n          switch (name) {\n            // TODO: handle simple surrogate style attribute\n            case 'style':\n            default:\n              attrInst = new SetAttributeInstruction($attr.rawValue, name);\n          }\n          $el.definition.surrogates.push(attrInst);\n        } else {\n          throw new Error(`Invalid surrogate attribute: ${name}`);\n        }\n      }\n    }\n  }\n\n  private compileElementNode($el: ElementSymbol): void {\n    if ($el.$attributes.length === 0) {\n      return;\n    }\n    const attributes = $el.$attributes;\n    const attributeInstructions: TargetedInstruction[] = [];\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n      const $attr = attributes[i];\n      if ($attr.isProcessed) continue;\n      $attr.markAsProcessed();\n      if ($attr.isTemplateController) {\n        let instruction = this.compileAttribute($attr);\n        // compileAttribute will return a HydrateTemplateController if there is a binding command registered that produces one (in our case only \"for\")\n        if (instruction.type !== TargetedInstructionType.hydrateTemplateController) {\n          const name = $attr.res;\n          instruction = new HydrateTemplateController({ name, instructions: [] }, name, [instruction], name === 'else');\n        }\n        // all attribute instructions preceding the template controller become children of the hydrate instruction\n        instruction.instructions.push(...attributeInstructions);\n        this.compileNode($el.lift(instruction));\n        return;\n      } else if ($attr.isCustomAttribute) {\n        attributeInstructions.push(this.compileCustomAttribute($attr));\n      } else {\n        const instruction = this.compileAttribute($attr);\n        if (instruction !== null) {\n          attributeInstructions.push(instruction);\n        }\n      }\n    }\n    if (attributeInstructions.length) {\n      $el.addInstructions(attributeInstructions);\n      $el.makeTarget();\n    }\n  }\n\n  private compileCustomElement($el: ElementSymbol): void {\n    if ($el.$attributes.length === 0) {\n      $el.addInstructions([new HydrateElementInstruction($el.definition.name, PLATFORM.emptyArray as TargetedInstruction[])]);\n      if ($el.definition.containerless) {\n        $el.replaceNodeWithMarker();\n      } else {\n        $el.makeTarget();\n      }\n      return;\n    }\n    const attributeInstructions: TargetedInstruction[] = [];\n    // if there is a custom element, then only the attributes that map to bindables become children of the hydrate instruction,\n    // otherwise they become sibling instructions; if there is no custom element, then sibling instructions are never appended to\n    const siblingInstructions: TargetedInstruction[] = [];\n    const attributes = $el.$attributes;\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n      const $attr = attributes[i];\n      if ($attr.isProcessed) continue;\n      $attr.markAsProcessed();\n      if ($attr.isTemplateController) {\n        let instruction = this.compileAttribute($attr);\n        // compileAttribute will return a HydrateTemplateController if there is a binding command registered that produces one (in our case only \"for\")\n        if (instruction.type !== TargetedInstructionType.hydrateTemplateController) {\n          const name = $attr.res;\n          instruction = new HydrateTemplateController({ name, instructions: [] }, name, [instruction], name === 'else');\n        }\n        // all attribute instructions preceding the template controller become children of the hydrate instruction\n        instruction.instructions.push(...attributeInstructions);\n        this.compileNode($el.lift(instruction));\n        return;\n      } else if ($attr.isCustomAttribute) {\n        if ($attr.isAttributeBindable) {\n          siblingInstructions.push(this.compileCustomAttribute($attr));\n        } else {\n          attributeInstructions.push(this.compileCustomAttribute($attr));\n        }\n      } else {\n        const instruction = this.compileAttribute($attr);\n        if (instruction !== null) {\n          if (!$attr.isElementBindable) {\n            siblingInstructions.push(instruction);\n          } else {\n            attributeInstructions.push(instruction);\n          }\n        }\n      }\n    }\n    $el.addInstructions([new HydrateElementInstruction($el.definition.name, attributeInstructions), ...siblingInstructions]);\n    if ($el.definition.containerless) {\n      $el.replaceNodeWithMarker();\n    } else {\n      $el.makeTarget();\n    }\n  }\n\n  private compileCustomAttribute($attr: AttributeSymbol): HydrateAttributeInstruction {\n    const childInstructions = [];\n    if ($attr.isMultiAttrBinding) {\n      const mBindings = $attr.$multiAttrBindings;\n      for (let j = 0, jj = mBindings.length; j < jj; ++j) {\n        childInstructions.push(this.compileAttribute(mBindings[j]));\n      }\n    } else {\n      childInstructions.push(this.compileAttribute($attr));\n    }\n    return new HydrateAttributeInstruction($attr.res, childInstructions);\n  }\n\n  private compileLetElement($el: ElementSymbol): void {\n    const letInstructions: ILetBindingInstruction[] = [];\n    const attributes = $el.$attributes;\n    let toViewModel = false;\n    for (let i = 0, ii = attributes.length; ii > i; ++i) {\n      const $attr = attributes[i];\n      const to = PLATFORM.camelCase($attr.to);\n      if ($attr.hasBindingCommand) {\n        const expr = this.exprParser.parse($attr.rawValue, BindingType.BindCommand);\n        letInstructions.push(new LetBindingInstruction(expr, to));\n      } else if ($attr.rawName === 'to-view-model') {\n        toViewModel = true;\n        ($el.node as Element).removeAttribute('to-view-model');\n      } else {\n        const expr = this.exprParser.parse($attr.rawValue, BindingType.Interpolation);\n        if (expr === null) {\n          // Should just be a warning, but throw for now\n          throw new Error(`Invalid let binding. String liternal given for attribute: ${$attr.to}`);\n        }\n        letInstructions.push(new LetBindingInstruction(expr, to));\n      }\n    }\n    $el.addInstructions([new LetElementInstruction(letInstructions, toViewModel)]);\n    // theoretically there's no need to replace, but to keep it consistent\n    $el.replaceNodeWithMarker();\n  }\n\n  private compileAttribute($attr: IAttributeSymbol): TargetedInstruction {\n      // binding commands get priority over all; they may override default behaviors\n      // it is the responsibility of the implementor to ensure they filter out stuff they shouldn't override\n      if ($attr.isHandledByBindingCommand) {\n        return $attr.command.compile($attr);\n      }\n      // simple path for ref binding\n      const parser = this.exprParser;\n      if ($attr.target === 'ref') {\n        return new RefBindingInstruction(parser.parse($attr.rawValue, BindingType.IsRef));\n      }\n      // simple path for style bindings (TODO: this doesnt work, but we need to use StylePropertyBindingInstruction right?)\n      // if (target === 'style' || target === 'css') {\n      //   const expression = parser.parse(value, BindingType.Interpolation);\n      //   if (expression === null) {\n      //     return null;\n      //   }\n      //   return new StylePropertyBindingInstruction(expression, target);\n      // }\n      // plain custom attribute on any kind of element\n      if ($attr.isCustomAttribute) {\n        if (!$attr.hasBindingCommand) {\n          const expression = parser.parse($attr.rawValue, BindingType.Interpolation);\n          if (expression !== null) {\n            return new InterpolationInstruction(expression, $attr.to);\n          }\n          if ($attr.isMultiAttrBinding) {\n            return new SetPropertyInstruction($attr.rawValue, $attr.to);\n          }\n        }\n        // intentional nested block without a statement to ensure the expression variable isn't shadowed\n        // (we're not declaring it at the outer block for better typing without explicit casting)\n        {\n          const expression = parser.parse($attr.rawValue, BindingType.ToViewCommand);\n          switch ($attr.mode) {\n            case BindingMode.oneTime:\n              return new OneTimeBindingInstruction(expression, $attr.to);\n            case BindingMode.fromView:\n              return new FromViewBindingInstruction(expression, $attr.to);\n            case BindingMode.twoWay:\n              return new TwoWayBindingInstruction(expression, $attr.to);\n            case BindingMode.toView:\n            default:\n              return new ToViewBindingInstruction(expression, $attr.to);\n          }\n        }\n      }\n      // plain bindable attribute on a custom element\n      if ($attr.onCustomElement && $attr.isElementBindable) {\n        const expression = parser.parse($attr.rawValue, BindingType.Interpolation);\n        if (expression === null) {\n          // no interpolation -> make it a setProperty on the component\n          return new SetPropertyInstruction($attr.rawValue, $attr.to);\n        }\n        // interpolation -> behave like toView (e.g. foo=\"${someProp}\")\n        return new InterpolationInstruction(expression, $attr.to);\n      }\n      {\n        // plain attribute on a normal element\n        const expression = parser.parse($attr.rawValue, BindingType.Interpolation);\n        if (expression === null) {\n          // no interpolation -> do not return an instruction\n          return null;\n        }\n        // interpolation -> behave like toView (e.g. id=\"${someId}\")\n        return new InterpolationInstruction(expression, $attr.to);\n      }\n  }\n}\n","import { IContainer, IRegistry, Registration } from '@aurelia/kernel';\nimport {\n  AttrBindingBehavior,\n  Compose,\n  DebounceBindingBehavior,\n  Else,\n  FromViewBindingBehavior,\n  HtmlRenderer,\n  If,\n  ITemplateCompiler,\n  OneTimeBindingBehavior,\n  Repeat,\n  Replaceable,\n  SanitizeValueConverter,\n  SelfBindingBehavior,\n  SignalBindingBehavior,\n  ThrottleBindingBehavior,\n  ToViewBindingBehavior,\n  TwoWayBindingBehavior,\n  UpdateTriggerBindingBehavior,\n  With\n} from '@aurelia/runtime';\nimport { DotSeparatedAttributePattern } from './attribute-pattern';\nimport {\n  CallBindingCommand,\n  CaptureBindingCommand,\n  DefaultBindingCommand,\n  DelegateBindingCommand,\n  ForBindingCommand,\n  FromViewBindingCommand,\n  OneTimeBindingCommand,\n  ToViewBindingCommand,\n  TriggerBindingCommand,\n  TwoWayBindingCommand\n} from './binding-command';\nimport { ParserRegistration } from './expression-parser';\nimport { TemplateCompiler } from './template-compiler';\n\nconst globalResources: IRegistry[] = [\n  Compose,\n  If,\n  Else,\n  Repeat,\n  Replaceable,\n  With,\n  SanitizeValueConverter,\n  AttrBindingBehavior,\n  DebounceBindingBehavior,\n  OneTimeBindingBehavior,\n  ToViewBindingBehavior,\n  FromViewBindingBehavior,\n  SelfBindingBehavior,\n  SignalBindingBehavior,\n  ThrottleBindingBehavior,\n  TwoWayBindingBehavior,\n  UpdateTriggerBindingBehavior\n];\n\nconst defaultBindingLanguage: IRegistry[] = [\n  DefaultBindingCommand,\n  OneTimeBindingCommand,\n  ToViewBindingCommand,\n  FromViewBindingCommand,\n  TwoWayBindingCommand,\n  TriggerBindingCommand,\n  DelegateBindingCommand,\n  CaptureBindingCommand,\n  CallBindingCommand,\n  ForBindingCommand,\n  DotSeparatedAttributePattern\n];\n\nexport const BasicConfiguration = {\n  register(container: IContainer): void {\n    container.register(\n      ParserRegistration,\n      HtmlRenderer,\n      Registration.singleton(ITemplateCompiler, TemplateCompiler),\n      ...globalResources,\n      ...defaultBindingLanguage\n    );\n  }\n};\n"],"names":["DOM","PLATFORM","DI","Reporter","Registration","DotSeparatedAttributePattern","ColonPrefixedBindAttributePattern","AtPrefixedTriggerAttributePattern","AttributeParser","inject","all","OneTimeBindingCommand","OneTimeBindingInstruction","IExpressionParser","ToViewBindingCommand","ToViewBindingInstruction","FromViewBindingCommand","FromViewBindingInstruction","TwoWayBindingCommand","TwoWayBindingInstruction","DefaultBindingCommand","TriggerBindingCommand","TriggerBindingInstruction","DelegateBindingCommand","DelegateBindingInstruction","CaptureBindingCommand","CaptureBindingInstruction","CallBindingCommand","CallBindingInstruction","ForBindingCommand","IteratorBindingInstruction","SetPropertyInstruction","HydrateTemplateController","PrimitiveLiteral","AccessThis","Unary","BindingIdentifier","AccessScope","Template","AccessMember","AccessKeyed","CallScope","CallMember","CallFunction","TaggedTemplate","Binary","Conditional","Assign","ValueConverter","BindingBehavior","ArrayBindingPattern","ArrayLiteral","ForOfStatement","ObjectBindingPattern","ObjectLiteral","Interpolation","ElementParser","CustomAttributeResource","CustomElementResource","BindingMode","TemplateCompiler","ViewCompileFlags","TextBindingInstruction","SetAttributeInstruction","HydrateElementInstruction","HydrateAttributeInstruction","LetBindingInstruction","LetElementInstruction","RefBindingInstruction","InterpolationInstruction","Compose","If","Else","Repeat","Replaceable","With","SanitizeValueConverter","AttrBindingBehavior","DebounceBindingBehavior","OneTimeBindingBehavior","ToViewBindingBehavior","FromViewBindingBehavior","SelfBindingBehavior","SignalBindingBehavior","ThrottleBindingBehavior","TwoWayBindingBehavior","UpdateTriggerBindingBehavior","HtmlRenderer","ITemplateCompiler"],"mappings":"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"}