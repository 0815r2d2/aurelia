{"version":3,"file":"index.umd.js","sources":["../src/ast.ts","../../../node_modules/tslib/tslib.es6.js","../src/attribute-pattern.ts","../src/attribute-parser.ts","../src/binding-command.ts","../src/common.ts","../src/expression-parser.ts","../src/resource-model.ts","../src/template-binder.ts","../src/template-factory.ts","../src/template-compiler.ts","../src/configuration.ts","../src/debugging.ts"],"sourcesContent":["export class AttrSyntax {\n  public readonly rawName: string;\n  public readonly rawValue: string;\n  public readonly target: string;\n  public readonly command: string | null;\n\n  constructor(rawName: string, rawValue: string, target: string, command: string | null) {\n    this.rawName = rawName;\n    this.rawValue = rawValue;\n    this.target = target;\n    this.command = command;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Class, DI, IContainer, IRegistry, IResolver, PLATFORM, Registration, Reporter } from '@aurelia/kernel';\nimport { AttrSyntax } from './ast';\n\nexport interface AttributePatternDefinition {\n  pattern: string;\n  symbols: string;\n}\n\n/** @internal */\nexport interface ICharSpec {\n  chars: string;\n  repeat: boolean;\n  isSymbol: boolean;\n  isInverted: boolean;\n  has(char: string): boolean;\n  equals(other: ICharSpec): boolean;\n}\n\n/** @internal */\nexport class CharSpec implements ICharSpec {\n  public chars: string;\n  public repeat: boolean;\n  public isSymbol: boolean;\n  public isInverted: boolean;\n\n  public has: (char: string) => boolean;\n\n  constructor(chars: string, repeat: boolean, isSymbol: boolean, isInverted: boolean) {\n    this.chars = chars;\n    this.repeat = repeat;\n    this.isSymbol = isSymbol;\n    this.isInverted = isInverted;\n    if (isInverted) {\n      switch (chars.length) {\n        case 0:\n          this.has = this.hasOfNoneInverse;\n          break;\n        case 1:\n          this.has = this.hasOfSingleInverse;\n          break;\n        default:\n          this.has = this.hasOfMultipleInverse;\n      }\n    } else {\n      switch (chars.length) {\n        case 0:\n          this.has = this.hasOfNone;\n          break;\n        case 1:\n          this.has = this.hasOfSingle;\n          break;\n        default:\n          this.has = this.hasOfMultiple;\n      }\n    }\n  }\n\n  public equals(other: ICharSpec): boolean {\n    return this.chars === other.chars\n        && this.repeat === other.repeat\n        && this.isSymbol === other.isSymbol\n        && this.isInverted === other.isInverted;\n  }\n\n  private hasOfMultiple(char: string): boolean {\n    return this.chars.indexOf(char) !== -1;\n  }\n\n  private hasOfSingle(char: string): boolean {\n    return this.chars === char;\n  }\n\n  private hasOfNone(char: string): boolean {\n    return false;\n  }\n\n  private hasOfMultipleInverse(char: string): boolean {\n    return this.chars.indexOf(char) === -1;\n  }\n\n  private hasOfSingleInverse(char: string): boolean {\n    return this.chars !== char;\n  }\n\n  private hasOfNoneInverse(char: string): boolean {\n    return true;\n  }\n}\n\nexport class Interpretation {\n  public parts: ReadonlyArray<string>;\n  public get pattern(): string | null {\n    const value = this._pattern;\n    if (value === '') {\n      return null;\n    } else {\n      return value;\n    }\n  }\n  public set pattern(value: string | null) {\n    if (value === null) {\n      this._pattern = '';\n      this.parts = PLATFORM.emptyArray;\n    } else {\n      this._pattern = value;\n      this.parts = this.partsRecord[value];\n    }\n  }\n  private _pattern: string;\n  private currentRecord: Record<string, string>;\n  private partsRecord: Record<string, string[]>;\n\n  constructor() {\n    this._pattern = '';\n    this.parts = PLATFORM.emptyArray;\n    this.currentRecord = {};\n    this.partsRecord = {};\n  }\n\n  public append(pattern: string, ch: string): void {\n    const { currentRecord } = this;\n    if (currentRecord[pattern] === undefined) {\n      currentRecord[pattern] = ch;\n    } else {\n      currentRecord[pattern] += ch;\n    }\n  }\n\n  public next(pattern: string): void {\n    const { currentRecord } = this;\n    if (currentRecord[pattern] !== undefined) {\n      const { partsRecord } = this;\n      if (partsRecord[pattern] === undefined) {\n        partsRecord[pattern] = [currentRecord[pattern]];\n      } else {\n        partsRecord[pattern].push(currentRecord[pattern]);\n      }\n      currentRecord[pattern] = undefined;\n    }\n  }\n}\n\n/** @internal */\nexport class State {\n  public charSpec: ICharSpec;\n  public nextStates: State[];\n  public types: SegmentTypes | null;\n  public patterns: string[];\n  public isEndpoint: boolean;\n  public get pattern(): string | null {\n    return this.isEndpoint ? this.patterns[0] : null;\n  }\n\n  constructor(charSpec: ICharSpec, ...patterns: string[]) {\n    this.charSpec = charSpec;\n    this.nextStates = [];\n    this.types = null;\n    this.patterns = patterns;\n    this.isEndpoint = false;\n  }\n\n  public findChild(charSpec: ICharSpec): State {\n    const nextStates = this.nextStates;\n    const len = nextStates.length;\n    let child: State = null;\n    for (let i = 0; i < len; ++i) {\n      child = nextStates[i];\n      if (charSpec.equals(child.charSpec)) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  public append(charSpec: ICharSpec, pattern: string): State {\n    const { patterns } = this;\n    if (patterns.indexOf(pattern) === -1) {\n      patterns.push(pattern);\n    }\n    let state = this.findChild(charSpec);\n    if (state === null) {\n      state = new State(charSpec, pattern);\n      this.nextStates.push(state);\n      if (charSpec.repeat) {\n        state.nextStates.push(state);\n      }\n    }\n    return state;\n  }\n\n  public findMatches(ch: string, interpretation: Interpretation): State[] {\n    // TODO: reuse preallocated arrays\n    const results = [];\n    const nextStates = this.nextStates;\n    const len = nextStates.length;\n    let childLen = 0;\n    let child: State = null;\n    let i = 0;\n    let j = 0;\n    for (; i < len; ++i) {\n      child = nextStates[i];\n      if (child.charSpec.has(ch)) {\n        results.push(child);\n        childLen = child.patterns.length;\n        if (child.charSpec.isSymbol) {\n          for (; j < childLen; ++j) {\n            interpretation.next(child.patterns[j]);\n          }\n        } else {\n          for (; j < childLen; ++j) {\n            interpretation.append(child.patterns[j], ch);\n          }\n        }\n      }\n    }\n    return results;\n  }\n}\n\n/** @internal */\nexport interface ISegment {\n  text: string;\n  eachChar(callback: (spec: CharSpec) => void): void;\n}\n\n/** @internal */\nexport class StaticSegment implements ISegment {\n  public text: string;\n  private len: number;\n  private specs: CharSpec[];\n\n  constructor(text: string) {\n    this.text = text;\n    const len = this.len = text.length;\n    const specs = this.specs = [];\n    for (let i = 0; i < len; ++i) {\n      specs.push(new CharSpec(text[i], false, false, false));\n    }\n  }\n\n  public eachChar(callback: (spec: CharSpec) => void): void {\n    const { len, specs } = this;\n    for (let i = 0; i < len; ++i) {\n      callback(specs[i]);\n    }\n  }\n}\n\n/** @internal */\nexport class DynamicSegment implements ISegment {\n  public text: string;\n  private spec: CharSpec;\n\n  constructor(symbols: string) {\n    this.text = 'PART';\n    this.spec = new CharSpec(symbols, true, false, true);\n  }\n\n  public eachChar(callback: (spec: CharSpec) => void): void {\n    callback(this.spec);\n  }\n}\n\n/** @internal */\nexport class SymbolSegment implements ISegment {\n  public text: string;\n  private spec: CharSpec;\n\n  constructor(text: string) {\n    this.text = text;\n    this.spec = new CharSpec(text, false, true, false);\n  }\n\n  public eachChar(callback: (spec: CharSpec) => void): void {\n    callback(this.spec);\n  }\n}\n\n/** @internal */\nexport class SegmentTypes {\n  public statics: number;\n  public dynamics: number;\n  public symbols: number;\n\n  constructor() {\n    this.statics = 0;\n    this.dynamics = 0;\n    this.symbols = 0;\n  }\n}\n\nexport interface ISyntaxInterpreter {\n  add(def: AttributePatternDefinition): void;\n  add(defs: AttributePatternDefinition[]): void;\n  add(defOrDefs: AttributePatternDefinition | AttributePatternDefinition[]): void;\n  interpret(value: string): Interpretation;\n}\n\nexport const ISyntaxInterpreter = DI.createInterface<ISyntaxInterpreter>().withDefault(x => x.singleton(SyntaxInterpreter));\n\n/** @internal */\nexport class SyntaxInterpreter {\n  public rootState: State;\n  private initialStates: State[];\n\n  constructor() {\n    this.rootState = new State(null);\n    this.initialStates = [this.rootState];\n  }\n\n  public add(def: AttributePatternDefinition): void;\n  public add(defs: AttributePatternDefinition[]): void;\n  public add(defOrDefs: AttributePatternDefinition | AttributePatternDefinition[]): void {\n    let i = 0;\n    if (Array.isArray(defOrDefs)) {\n      const ii = defOrDefs.length;\n      for (; i < ii; ++i) {\n        this.add(defOrDefs[i]);\n      }\n      return;\n    }\n    let currentState = this.rootState;\n    const def = defOrDefs;\n    const pattern = def.pattern;\n    const types = new SegmentTypes();\n    const segments = this.parse(def, types);\n    const len = segments.length;\n    const callback = (ch: ICharSpec): void => {\n      currentState = currentState.append(ch, pattern);\n    };\n    for (i = 0; i < len; ++i) {\n      segments[i].eachChar(callback);\n    }\n    currentState.types = types;\n    currentState.isEndpoint = true;\n  }\n\n  public interpret(name: string): Interpretation {\n    const interpretation = new Interpretation();\n    let states = this.initialStates;\n    const len = name.length;\n    for (let i = 0; i < len; ++i) {\n      states = this.getNextStates(states, name.charAt(i), interpretation);\n      if (states.length === 0) {\n        break;\n      }\n    }\n\n    states.sort((a, b) => {\n      if (a.isEndpoint) {\n        if (!b.isEndpoint) {\n          return -1;\n        }\n      } else if (b.isEndpoint) {\n        return 1;\n      } else {\n        return 0;\n      }\n      const aTypes = a.types;\n      const bTypes = b.types;\n      if (aTypes.statics !== bTypes.statics) {\n        return bTypes.statics - aTypes.statics;\n      }\n      if (aTypes.dynamics !== bTypes.dynamics) {\n        return bTypes.dynamics - aTypes.dynamics;\n      }\n      if (aTypes.symbols !== bTypes.symbols) {\n        return bTypes.symbols - aTypes.symbols;\n      }\n      return 0;\n    });\n\n    if (states.length > 0) {\n      const state = states[0];\n      if (!state.charSpec.isSymbol) {\n        interpretation.next(state.pattern);\n      }\n      interpretation.pattern = state.pattern;\n    }\n    return interpretation;\n  }\n\n  public getNextStates(states: State[], ch: string, interpretation: Interpretation): State[] {\n    // TODO: reuse preallocated arrays\n    const nextStates: State[] = [];\n    let state: State = null;\n    const len = states.length;\n    for (let i = 0; i < len; ++i) {\n      state = states[i];\n      nextStates.push(...state.findMatches(ch, interpretation));\n    }\n\n    return nextStates;\n  }\n\n  private parse(def: AttributePatternDefinition, types: SegmentTypes): ISegment[] {\n    const result = [];\n    const pattern = def.pattern;\n    const len = pattern.length;\n    let i = 0;\n    let start = 0;\n    let c = '';\n\n    while (i < len) {\n      c = pattern.charAt(i);\n      if (def.symbols.indexOf(c) === -1) {\n        if (i === start) {\n          if (c === 'P' && pattern.slice(i, i + 4) === 'PART') {\n            start = i = (i + 4);\n            result.push(new DynamicSegment(def.symbols));\n            ++types.dynamics;\n          } else {\n            ++i;\n          }\n        } else {\n          ++i;\n        }\n      } else if (i !== start) {\n        result.push(new StaticSegment(pattern.slice(start, i)));\n        ++types.statics;\n        start = i;\n      } else {\n        result.push(new SymbolSegment(pattern.slice(start, i + 1)));\n        ++types.symbols;\n        start = ++i;\n      }\n    }\n    if (start !== i) {\n      result.push(new StaticSegment(pattern.slice(start, i)));\n      ++types.statics;\n    }\n\n    return result;\n  }\n}\n\nfunction validatePrototype(handler: IAttributePatternHandler, patternDefs: AttributePatternDefinition[]): void {\n  for (const def of patternDefs) {\n    // note: we're intentionally not throwing here\n    if (!(def.pattern in handler)) {\n      Reporter.write(401, def); // TODO: organize error codes\n    } else if (typeof handler[def.pattern] !== 'function') {\n      Reporter.write(402, def); // TODO: organize error codes\n    }\n  }\n}\n\nexport interface IAttributePattern {\n  $patternDefs: AttributePatternDefinition[];\n}\n\nexport interface IAttributePatternHandler {\n  [pattern: string]: (rawName: string, rawValue: string, parts: ReadonlyArray<string>) => AttrSyntax;\n}\n\nexport const IAttributePattern = DI.createInterface<IAttributePattern>().noDefault();\n\ntype DecoratableAttributePattern<TProto, TClass> = Class<TProto & Partial<IAttributePattern | IAttributePatternHandler>, TClass> & Partial<IRegistry>;\ntype DecoratedAttributePattern<TProto, TClass> =  Class<TProto & IAttributePattern | IAttributePatternHandler, TClass> & IRegistry;\n\ntype AttributePatternDecorator = <TProto, TClass>(target: DecoratableAttributePattern<TProto, TClass>) => DecoratedAttributePattern<TProto, TClass>;\n\nexport function attributePattern(...patternDefs: AttributePatternDefinition[]): AttributePatternDecorator {\n  return function decorator<TProto, TClass>(target: DecoratableAttributePattern<TProto, TClass>): DecoratedAttributePattern<TProto, TClass> {\n    const proto = target.prototype;\n    // Note: the prototype is really meant to be an intersection type between IAttrubutePattern and IAttributePatternHandler, but\n    // a type with an index signature cannot be intersected with anything else that has normal property names.\n    // So we're forced to use a union type and cast it here.\n    validatePrototype(proto as IAttributePatternHandler, patternDefs);\n    proto.$patternDefs = patternDefs;\n\n    target.register = function register(container: IContainer): IResolver {\n      return Registration.singleton(IAttributePattern, target).register(container, IAttributePattern);\n    };\n    return target as DecoratedAttributePattern<TProto, TClass>;\n  } as AttributePatternDecorator;\n}\n\nexport interface DotSeparatedAttributePattern extends IAttributePattern {}\n\n@attributePattern(\n  { pattern: 'PART.PART', symbols: '.' },\n  { pattern: 'PART.PART.PART', symbols: '.' }\n)\nexport class DotSeparatedAttributePattern implements DotSeparatedAttributePattern {\n  public static register: IRegistry['register'];\n\n  public ['PART.PART'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, parts[0], parts[1]);\n  }\n\n  public ['PART.PART.PART'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, parts[0], parts[2]);\n  }\n}\n\nexport interface RefAttributePattern extends IAttributePattern {}\n\n@attributePattern(\n  { pattern: 'ref', symbols: '' },\n  { pattern: 'ref.PART', symbols: '.' }\n)\nexport class RefAttributePattern implements RefAttributePattern {\n  public static register: IRegistry['register'];\n\n  public ['ref'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, 'ref', null);\n  }\n\n  public ['ref.PART'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, 'ref', parts[1]);\n  }\n}\n\nexport interface ColonPrefixedBindAttributePattern extends IAttributePattern {}\n\n@attributePattern({ pattern: ':PART', symbols: ':' })\nexport class ColonPrefixedBindAttributePattern implements ColonPrefixedBindAttributePattern  {\n  public static register: IRegistry['register'];\n\n  public [':PART'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, parts[0], 'bind');\n  }\n}\n\nexport interface AtPrefixedTriggerAttributePattern extends IAttributePattern {}\n\n@attributePattern({ pattern: '@PART', symbols: '@' })\nexport class AtPrefixedTriggerAttributePattern implements AtPrefixedTriggerAttributePattern  {\n  public static register: IRegistry['register'];\n\n  public ['@PART'](rawName: string, rawValue: string, parts: string[]): AttrSyntax {\n    return new AttrSyntax(rawName, rawValue, parts[0], 'trigger');\n  }\n}\n","import { all, DI, inject } from '@aurelia/kernel';\nimport { AttrSyntax } from './ast';\nimport { IAttributePattern, IAttributePatternHandler, Interpretation, ISyntaxInterpreter } from './attribute-pattern';\n\nexport interface IAttributeParser {\n  parse(name: string, value: string): AttrSyntax;\n}\n\nexport const IAttributeParser = DI.createInterface<IAttributeParser>()\n  .withDefault(x => x.singleton(AttributeParser));\n\n/** @internal */\n@inject(ISyntaxInterpreter, all(IAttributePattern))\nexport class AttributeParser implements IAttributeParser {\n  private interpreter: ISyntaxInterpreter;\n  private cache: Record<string, Interpretation>;\n  private patterns: Record<string, IAttributePatternHandler>;\n\n  constructor(interpreter: ISyntaxInterpreter, attrPatterns: IAttributePattern[]) {\n    this.interpreter = interpreter;\n    this.cache = {};\n    const patterns: AttributeParser['patterns'] = this.patterns = {};\n    attrPatterns.forEach(attrPattern => {\n      const defs = attrPattern.$patternDefs;\n      interpreter.add(defs);\n      defs.forEach(def => {\n        patterns[def.pattern] = attrPattern as unknown as IAttributePatternHandler;\n      });\n    });\n  }\n\n  public parse(name: string, value: string): AttrSyntax {\n    let interpretation = this.cache[name];\n    if (interpretation === undefined) {\n      interpretation = this.cache[name] = this.interpreter.interpret(name);\n    }\n    const pattern = interpretation.pattern;\n    if (pattern === null) {\n      return new AttrSyntax(name, value, name, null);\n    } else {\n      return this.patterns[pattern][pattern](name, value, interpretation.parts);\n    }\n  }\n}\n","import {\n  Class,\n  Constructable,\n  IContainer,\n  IRegistry,\n  IResourceDefinition,\n  IResourceKind,\n  IResourceType,\n  PLATFORM,\n  Registration,\n  Writable\n} from '@aurelia/kernel';\nimport {\n  AttributeInstruction,\n  BindingMode,\n  BindingType,\n  CallBindingInstruction,\n  CaptureBindingInstruction,\n  DelegateBindingInstruction,\n  ForOfStatement,\n  FromViewBindingInstruction,\n  IsBindingBehavior,\n  IteratorBindingInstruction,\n  OneTimeBindingInstruction,\n  ToViewBindingInstruction,\n  TriggerBindingInstruction,\n  TwoWayBindingInstruction\n} from '@aurelia/runtime';\nimport { BindingSymbol, PlainAttributeSymbol, SymbolFlags } from './template-binder';\n\nexport interface IBindingCommand {\n  bindingType: BindingType;\n  compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction;\n}\n\nexport interface IBindingCommandDefinition extends IResourceDefinition { }\n\nexport interface IBindingCommandType extends IResourceType<IBindingCommandDefinition, IBindingCommand, Class<IBindingCommand>> { }\n\nexport interface IBindingCommandResource extends\n  IResourceKind<IBindingCommandDefinition, IBindingCommand, Class<IBindingCommand>> { }\n\ntype BindingCommandDecorator = <TProto, TClass>(target: Class<TProto, TClass> & Partial<IBindingCommandType>) => Class<TProto, TClass> & IBindingCommandType;\n\nfunction register(this: IBindingCommandType, container: IContainer): void {\n  const resourceKey = BindingCommandResource.keyFrom(this.description.name);\n  container.register(Registration.singleton(resourceKey, this));\n}\n\nexport function bindingCommand(name: string): BindingCommandDecorator;\nexport function bindingCommand(definition: IBindingCommandDefinition): BindingCommandDecorator;\nexport function bindingCommand(nameOrDefinition: string | IBindingCommandDefinition): BindingCommandDecorator {\n  return target => BindingCommandResource.define(nameOrDefinition, target);\n}\n\nfunction keyFrom(this: IBindingCommandResource, name: string): string {\n  return `${this.name}:${name}`;\n}\n\nfunction isType<T>(this: IBindingCommandResource, Type: T & Partial<IBindingCommandType>): Type is T & IBindingCommandType {\n  return Type.kind === this;\n}\n\nfunction define<T extends Constructable>(this: IBindingCommandResource, name: string, ctor: T): T & IBindingCommandType;\nfunction define<T extends Constructable>(this: IBindingCommandResource, definition: IBindingCommandDefinition, ctor: T): T & IBindingCommandType;\nfunction define<T extends Constructable>(this: IBindingCommandResource, nameOrDefinition: string | IBindingCommandDefinition, ctor: T): T & IBindingCommandType {\n  const Type = ctor as T & Writable<IBindingCommandType>;\n  const description = typeof nameOrDefinition === 'string' ? { name: nameOrDefinition, target: null } : nameOrDefinition;\n\n  Type.kind = BindingCommandResource;\n  Type.description = description;\n  Type.register = register;\n\n  return Type;\n}\n\nexport const BindingCommandResource: IBindingCommandResource = {\n  name: 'binding-command',\n  keyFrom,\n  isType,\n  define\n};\n\nfunction getTarget(binding: PlainAttributeSymbol | BindingSymbol, camelCase: boolean): string {\n  if (binding.flags & SymbolFlags.isBinding) {\n    return (binding as BindingSymbol).bindable.propName;\n  } else if (camelCase) {\n    return PLATFORM.camelCase((binding as PlainAttributeSymbol).syntax.target);\n  } else {\n    return (binding as PlainAttributeSymbol).syntax.target;\n  }\n}\n\nfunction getMode(binding: PlainAttributeSymbol | BindingSymbol): BindingMode {\n  if (binding.flags & SymbolFlags.isBinding) {\n    return (binding as BindingSymbol).bindable.mode;\n  } else {\n    return commandToMode[(binding as PlainAttributeSymbol).syntax.command];\n  }\n}\n\nexport interface OneTimeBindingCommand extends IBindingCommand {}\n\n@bindingCommand('one-time')\nexport class OneTimeBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.OneTimeCommand;\n\n  constructor() {\n    this.bindingType = BindingType.OneTimeCommand;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return new OneTimeBindingInstruction(binding.expression as IsBindingBehavior, getTarget(binding, false));\n  }\n}\n\nexport interface ToViewBindingCommand extends IBindingCommand {}\n\n@bindingCommand('to-view')\nexport class ToViewBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.ToViewCommand;\n\n  constructor() {\n    this.bindingType = BindingType.ToViewCommand;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return new ToViewBindingInstruction(binding.expression as IsBindingBehavior, getTarget(binding, false));\n  }\n}\n\nexport interface FromViewBindingCommand extends IBindingCommand {}\n\n@bindingCommand('from-view')\nexport class FromViewBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.FromViewCommand;\n\n  constructor() {\n    this.bindingType = BindingType.FromViewCommand;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return new FromViewBindingInstruction(binding.expression as IsBindingBehavior, getTarget(binding, false));\n  }\n}\n\nexport interface TwoWayBindingCommand extends IBindingCommand {}\n\n@bindingCommand('two-way')\nexport class TwoWayBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.TwoWayCommand;\n\n  constructor() {\n    this.bindingType = BindingType.TwoWayCommand;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return new TwoWayBindingInstruction(binding.expression as IsBindingBehavior, getTarget(binding, false));\n  }\n}\n\n// Not bothering to throw on non-existing modes, should never happen anyway.\n// Keeping all array elements of the same type for better optimizeability.\nconst modeToProperty = ['', '$1', '$2', '', '$4', '', '$6'];\nconst commandToMode = {\n  'bind': BindingMode.toView,\n  'one-time': BindingMode.oneTime,\n  'to-view': BindingMode.toView,\n  'from-view': BindingMode.fromView,\n  'two-way': BindingMode.twoWay,\n};\n\nexport interface DefaultBindingCommand extends IBindingCommand {}\n\n@bindingCommand('bind')\nexport class DefaultBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.BindCommand;\n  public $1: typeof OneTimeBindingCommand.prototype.compile;\n  public $2: typeof ToViewBindingCommand.prototype.compile;\n  public $4: typeof FromViewBindingCommand.prototype.compile;\n  public $6: typeof TwoWayBindingCommand.prototype.compile;\n\n  constructor() {\n    this.bindingType = BindingType.BindCommand;\n    this.$1 = OneTimeBindingCommand.prototype.compile;\n    this.$2 = ToViewBindingCommand.prototype.compile;\n    this.$4 = FromViewBindingCommand.prototype.compile;\n    this.$6 = TwoWayBindingCommand.prototype.compile;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return this[modeToProperty[getMode(binding)]](binding);\n  }\n}\n\nexport interface TriggerBindingCommand extends IBindingCommand {}\n\n@bindingCommand('trigger')\nexport class TriggerBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.TriggerCommand;\n\n  constructor() {\n    this.bindingType = BindingType.TriggerCommand;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return new TriggerBindingInstruction(binding.expression as IsBindingBehavior, getTarget(binding, false));\n  }\n}\n\nexport interface DelegateBindingCommand extends IBindingCommand {}\n\n@bindingCommand('delegate')\nexport class DelegateBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.DelegateCommand;\n\n  constructor() {\n    this.bindingType = BindingType.DelegateCommand;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return new DelegateBindingInstruction(binding.expression as IsBindingBehavior, getTarget(binding, false));\n  }\n}\n\nexport interface CaptureBindingCommand extends IBindingCommand {}\n\n@bindingCommand('capture')\nexport class CaptureBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.CaptureCommand;\n\n  constructor() {\n    this.bindingType = BindingType.CaptureCommand;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return new CaptureBindingInstruction(binding.expression as IsBindingBehavior, getTarget(binding, false));\n  }\n}\n\nexport interface CallBindingCommand extends IBindingCommand {}\n\n@bindingCommand('call')\nexport class CallBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.CallCommand;\n\n  constructor() {\n    this.bindingType = BindingType.CallCommand;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return new CallBindingInstruction(binding.expression as IsBindingBehavior, getTarget(binding, true));\n  }\n}\n\n@bindingCommand('for')\nexport class ForBindingCommand implements IBindingCommand {\n  public static register: IRegistry['register'];\n  public bindingType: BindingType.ForCommand;\n\n  constructor() {\n    this.bindingType = BindingType.ForCommand;\n  }\n\n  public compile(binding: PlainAttributeSymbol | BindingSymbol): AttributeInstruction {\n    return new IteratorBindingInstruction(binding.expression as ForOfStatement, getTarget(binding, false));\n  }\n}\n","/** @internal */\nexport function unescapeCode(code: number): number {\n  switch (code) {\n    case Char.LowerB: return Char.Backspace;\n    case Char.LowerT: return Char.Tab;\n    case Char.LowerN: return Char.LineFeed;\n    case Char.LowerV: return Char.VerticalTab;\n    case Char.LowerF: return Char.FormFeed;\n    case Char.LowerR: return Char.CarriageReturn;\n    case Char.DoubleQuote: return Char.DoubleQuote;\n    case Char.SingleQuote: return Char.SingleQuote;\n    case Char.Backslash: return Char.Backslash;\n    default: return code;\n  }\n}\n\n/** @internal */\nexport const enum Access {\n  Reset                   = 0b0000000000000,\n  Ancestor                = 0b0000111111111,\n  This                    = 0b0001000000000,\n  Scope                   = 0b0010000000000,\n  Member                  = 0b0100000000000,\n  Keyed                   = 0b1000000000000\n}\n/** @internal */\nexport const enum Precedence {\n  Variadic                = 0b000111101,\n  Assign                  = 0b000111110,\n  Conditional             = 0b000111111,\n  LogicalOR               = 0b001000000,\n  LogicalAND              = 0b010000000,\n  Equality                = 0b011000000,\n  Relational              = 0b100000000,\n  Additive                = 0b101000000,\n  Multiplicative          = 0b110000000,\n  Binary                  = 0b111000000,\n  LeftHandSide            = 0b111000001,\n  Primary                 = 0b111000010,\n  Unary                   = 0b111000011,\n}\n/** @internal */\nexport const enum Token {\n  EOF                     = 0b110000000000_000_000000,\n  ExpressionTerminal      = 0b100000000000_000_000000,\n  AccessScopeTerminal     = 0b010000000000_000_000000,\n  ClosingToken            = 0b001000000000_000_000000,\n  OpeningToken            = 0b000100000000_000_000000,\n  BinaryOp                = 0b000010000000_000_000000,\n  UnaryOp                 = 0b000001000000_000_000000,\n  LeftHandSide            = 0b000000100000_000_000000,\n  StringOrNumericLiteral  = 0b000000011000_000_000000,\n  NumericLiteral          = 0b000000010000_000_000000,\n  StringLiteral           = 0b000000001000_000_000000,\n  IdentifierName          = 0b000000000110_000_000000,\n  Keyword                 = 0b000000000100_000_000000,\n  Identifier              = 0b000000000010_000_000000,\n  Contextual              = 0b000000000001_000_000000,\n  Precedence              = 0b000000000000_111_000000,\n  Type                    = 0b000000000000_000_111111,\n  FalseKeyword            = 0b000000000100_000_000000,\n  TrueKeyword             = 0b000000000100_000_000001,\n  NullKeyword             = 0b000000000100_000_000010,\n  UndefinedKeyword        = 0b000000000100_000_000011,\n  ThisScope               = 0b000000000110_000_000100,\n  ParentScope             = 0b000000000110_000_000101,\n  OpenParen               = 0b010100100000_000_000110,\n  OpenBrace               = 0b000100000000_000_000111,\n  Dot                     = 0b000000100000_000_001000,\n  CloseBrace              = 0b111000000000_000_001001,\n  CloseParen              = 0b111000000000_000_001010,\n  Comma                   = 0b110000000000_000_001011,\n  OpenBracket             = 0b010100100000_000_001100,\n  CloseBracket            = 0b111000000000_000_001101,\n  Colon                   = 0b110000000000_000_001110,\n  Question                = 0b110000000000_000_001111,\n  Ampersand               = 0b110000000000_000_010000,\n  Bar                     = 0b110000000000_000_010011,\n  BarBar                  = 0b110010000000_010_010100,\n  AmpersandAmpersand      = 0b110010000000_011_010101,\n  EqualsEquals            = 0b110010000000_100_010110,\n  ExclamationEquals       = 0b110010000000_100_010111,\n  EqualsEqualsEquals      = 0b110010000000_100_011000,\n  ExclamationEqualsEquals = 0b110010000000_100_011001,\n  LessThan                = 0b110010000000_101_011010,\n  GreaterThan             = 0b110010000000_101_011011,\n  LessThanEquals          = 0b110010000000_101_011100,\n  GreaterThanEquals       = 0b110010000000_101_011101,\n  InKeyword               = 0b110010000100_101_011110,\n  InstanceOfKeyword       = 0b110010000100_101_011111,\n  Plus                    = 0b010011000000_110_100000,\n  Minus                   = 0b010011000000_110_100001,\n  TypeofKeyword           = 0b000001000100_000_100010,\n  VoidKeyword             = 0b000001000100_000_100011,\n  Asterisk                = 0b110010000000_111_100100,\n  Percent                 = 0b110010000000_111_100101,\n  Slash                   = 0b110010000000_111_100110,\n  Equals                  = 0b100000000000_000_100111,\n  Exclamation             = 0b000001000000_000_101000,\n  TemplateTail            = 0b010000100000_000_101001,\n  TemplateContinuation    = 0b010000100000_000_101010,\n  OfKeyword               = 0b100000000101_000_101011\n}\n\n/** @internal */\nexport const enum Char {\n  Null           = 0x00,\n  Backspace      = 0x08,\n  Tab            = 0x09,\n  LineFeed       = 0x0A,\n  VerticalTab    = 0x0B,\n  FormFeed       = 0x0C,\n  CarriageReturn = 0x0D,\n  Space          = 0x20,\n  Exclamation    = 0x21,\n  DoubleQuote    = 0x22,\n  Dollar         = 0x24,\n  Percent        = 0x25,\n  Ampersand      = 0x26,\n  SingleQuote    = 0x27,\n  OpenParen      = 0x28,\n  CloseParen     = 0x29,\n  Asterisk       = 0x2A,\n  Plus           = 0x2B,\n  Comma          = 0x2C,\n  Minus          = 0x2D,\n  Dot            = 0x2E,\n  Slash          = 0x2F,\n  Semicolon      = 0x3B,\n  Backtick       = 0x60,\n  OpenBracket    = 0x5B,\n  Backslash      = 0x5C,\n  CloseBracket   = 0x5D,\n  Caret          = 0x5E,\n  Underscore     = 0x5F,\n  OpenBrace      = 0x7B,\n  Bar            = 0x7C,\n  CloseBrace     = 0x7D,\n  Colon          = 0x3A,\n  LessThan       = 0x3C,\n  Equals         = 0x3D,\n  GreaterThan    = 0x3E,\n  Question       = 0x3F,\n\n  Zero   = 0x30,\n  One    = 0x31,\n  Two    = 0x32,\n  Three  = 0x33,\n  Four   = 0x34,\n  Five   = 0x35,\n  Six    = 0x36,\n  Seven  = 0x37,\n  Eight  = 0x38,\n  Nine   = 0x39,\n\n  UpperA = 0x41,\n  UpperB = 0x42,\n  UpperC = 0x43,\n  UpperD = 0x44,\n  UpperE = 0x45,\n  UpperF = 0x46,\n  UpperG = 0x47,\n  UpperH = 0x48,\n  UpperI = 0x49,\n  UpperJ = 0x4A,\n  UpperK = 0x4B,\n  UpperL = 0x4C,\n  UpperM = 0x4D,\n  UpperN = 0x4E,\n  UpperO = 0x4F,\n  UpperP = 0x50,\n  UpperQ = 0x51,\n  UpperR = 0x52,\n  UpperS = 0x53,\n  UpperT = 0x54,\n  UpperU = 0x55,\n  UpperV = 0x56,\n  UpperW = 0x57,\n  UpperX = 0x58,\n  UpperY = 0x59,\n  UpperZ = 0x5A,\n\n  LowerA  = 0x61,\n  LowerB  = 0x62,\n  LowerC  = 0x63,\n  LowerD  = 0x64,\n  LowerE  = 0x65,\n  LowerF  = 0x66,\n  LowerG  = 0x67,\n  LowerH  = 0x68,\n  LowerI  = 0x69,\n  LowerJ  = 0x6A,\n  LowerK  = 0x6B,\n  LowerL  = 0x6C,\n  LowerM  = 0x6D,\n  LowerN  = 0x6E,\n  LowerO  = 0x6F,\n  LowerP  = 0x70,\n  LowerQ  = 0x71,\n  LowerR  = 0x72,\n  LowerS  = 0x73,\n  LowerT  = 0x74,\n  LowerU  = 0x75,\n  LowerV  = 0x76,\n  LowerW  = 0x77,\n  LowerX  = 0x78,\n  LowerY  = 0x79,\n  LowerZ  = 0x7A\n}\n","import { IContainer, IRegistry, Reporter } from '@aurelia/kernel';\nimport {\n  AccessKeyed, AccessMember, AccessScope, AccessThis,\n  ArrayBindingPattern, ArrayLiteral, Assign, Binary,\n  BinaryOperator, BindingBehavior, BindingIdentifier,\n  BindingIdentifierOrPattern, BindingType, CallFunction,\n  CallMember, CallScope, Conditional, ExpressionKind, ForOfStatement,\n  IExpression, IExpressionParser, Interpolation, IsAssign, IsAssignable,\n  IsBinary, IsBindingBehavior, IsConditional,\n  IsExpressionOrStatement, IsLeftHandSide, IsPrimary, IsUnary,\n  IsValueConverter, ObjectBindingPattern, ObjectLiteral, PrimitiveLiteral, TaggedTemplate, Template, Unary, UnaryOperator, ValueConverter\n} from '@aurelia/runtime';\nimport { Access, Char, Precedence, Token, unescapeCode } from './common';\n\nexport const ParserRegistration: IRegistry = {\n  register(container: IContainer): void {\n    container.registerTransformer(IExpressionParser, parser => {\n      parser['parseCore'] = parseCore;\n      return parser;\n    });\n  }\n};\n\nconst $false = PrimitiveLiteral.$false;\nconst $true = PrimitiveLiteral.$true;\nconst $null = PrimitiveLiteral.$null;\nconst $undefined = PrimitiveLiteral.$undefined;\nconst $this = AccessThis.$this;\nconst $parent = AccessThis.$parent;\n\n/** @internal */\nexport class ParserState {\n  public index: number;\n  public startIndex: number;\n  public input: string;\n  public lastIndex: number;\n  public length: number;\n  public currentToken: Token;\n  public tokenValue: string | number;\n  public currentChar: number;\n  public assignable: boolean;\n  public get tokenRaw(): string {\n    return this.input.slice(this.startIndex, this.index);\n  }\n\n  constructor(input: string) {\n    this.index = 0;\n    this.startIndex = 0;\n    this.lastIndex = 0;\n    this.input = input;\n    this.length = input.length;\n    this.currentToken = Token.EOF;\n    this.tokenValue = '';\n    this.currentChar = input.charCodeAt(0);\n    this.assignable = true;\n  }\n}\n\nconst $state = new ParserState('');\n\nconst enum SyntaxError {\n  InvalidExpressionStart = 100,\n  UnconsumedToken = 101,\n  DoubleDot = 102,\n  InvalidMemberExpression = 103,\n  UnexpectedEndOfExpression = 104,\n  ExpectedIdentifier = 105,\n  InvalidForDeclaration = 106,\n  InvalidObjectLiteralPropertyDefinition = 107,\n  UnterminatedQuote = 108,\n  UnterminatedTemplate = 109,\n  MissingExpectedToken = 110,\n  UnexpectedCharacter = 111,\n  MissingValueConverter = 112,\n  MissingBindingBehavior = 113\n}\n\nconst enum SemanticError {\n  NotAssignable = 150,\n  UnexpectedForOf = 151\n}\n\n/** @internal */\nexport function parseCore(input: string, bindingType?: BindingType): IExpression {\n  $state.input = input;\n  $state.length = input.length;\n  $state.index = 0;\n  $state.currentChar = input.charCodeAt(0);\n  return parse($state, Access.Reset, Precedence.Variadic, bindingType === undefined ? BindingType.BindCommand : bindingType);\n}\n\n/** @internal */\n// JUSTIFICATION: This is performance-critical code which follows a subset of the well-known ES spec.\n// Knowing the spec, or parsers in general, will help with understanding this code and it is therefore not the\n// single source of information for being able to figure it out.\n// It generally does not need to change unless the spec changes or spec violations are found, or optimization\n// opportunities are found (which would likely not fix these warnings in any case).\n// It's therefore not considered to have any tangible impact on the maintainability of the code base.\n// For reference, most of the parsing logic is based on: https://tc39.github.io/ecma262/#sec-ecmascript-language-expressions\n// tslint:disable-next-line:no-big-function cognitive-complexity\nexport function parse<TPrec extends Precedence, TType extends BindingType>(state: ParserState, access: Access, minPrecedence: TPrec, bindingType: TType):\n  TPrec extends Precedence.Unary ? IsUnary :\n  TPrec extends Precedence.Binary ? IsBinary :\n  TPrec extends Precedence.LeftHandSide ? IsLeftHandSide :\n  TPrec extends Precedence.Assign ? IsAssign :\n  TPrec extends Precedence.Conditional ? IsConditional :\n  TPrec extends Precedence.Primary ? IsPrimary :\n  TPrec extends Precedence.Multiplicative ? IsBinary :\n  TPrec extends Precedence.Additive ? IsBinary :\n  TPrec extends Precedence.Relational ? IsBinary :\n  TPrec extends Precedence.Equality ? IsBinary :\n  TPrec extends Precedence.LogicalAND ? IsBinary :\n  TPrec extends Precedence.LogicalOR ? IsBinary :\n  TPrec extends Precedence.Variadic ?\n    TType extends BindingType.Interpolation ? Interpolation :\n    TType extends BindingType.ForCommand ? ForOfStatement :\n    never : never {\n\n  if (state.index === 0) {\n    if (bindingType & BindingType.Interpolation) {\n      // tslint:disable-next-line:no-any\n      return parseInterpolation(state) as any;\n    }\n    nextToken(state);\n    if (state.currentToken & Token.ExpressionTerminal) {\n      throw Reporter.error(SyntaxError.InvalidExpressionStart, { state });\n    }\n  }\n\n  state.assignable = Precedence.Binary > minPrecedence;\n  let result = undefined as IsExpressionOrStatement;\n\n  if (state.currentToken & Token.UnaryOp) {\n    /** parseUnaryExpression\n     * https://tc39.github.io/ecma262/#sec-unary-operators\n     *\n     * UnaryExpression :\n     *   1. LeftHandSideExpression\n     *   2. void UnaryExpression\n     *   3. typeof UnaryExpression\n     *   4. + UnaryExpression\n     *   5. - UnaryExpression\n     *   6. ! UnaryExpression\n     *\n     * IsValidAssignmentTarget\n     *   2,3,4,5,6 = false\n     *   1 = see parseLeftHandSideExpression\n     *\n     * Note: technically we should throw on ++ / -- / +++ / ---, but there's nothing to gain from that\n     */\n    const op = TokenValues[state.currentToken & Token.Type] as UnaryOperator;\n    nextToken(state);\n    result = new Unary(op, parse(state, access, Precedence.LeftHandSide, bindingType));\n    state.assignable = false;\n  } else {\n    /** parsePrimaryExpression\n     * https://tc39.github.io/ecma262/#sec-primary-expression\n     *\n     * PrimaryExpression :\n     *   1. this\n     *   2. IdentifierName\n     *   3. Literal\n     *   4. ArrayLiteral\n     *   5. ObjectLiteral\n     *   6. TemplateLiteral\n     *   7. ParenthesizedExpression\n     *\n     * Literal :\n     *    NullLiteral\n     *    BooleanLiteral\n     *    NumericLiteral\n     *    StringLiteral\n     *\n     * ParenthesizedExpression :\n     *   ( AssignmentExpression )\n     *\n     * IsValidAssignmentTarget\n     *   1,3,4,5,6,7 = false\n     *   2 = true\n     */\n    primary: switch (state.currentToken) {\n    case Token.ParentScope: // $parent\n      state.assignable = false;\n      do {\n        nextToken(state);\n        access++; // ancestor\n        if (consumeOpt(state, Token.Dot)) {\n          if ((state.currentToken as Token) === Token.Dot) {\n            throw Reporter.error(SyntaxError.DoubleDot, { state });\n          } else if ((state.currentToken as Token) === Token.EOF) {\n            throw Reporter.error(SyntaxError.ExpectedIdentifier, { state });\n          }\n        } else if (state.currentToken & Token.AccessScopeTerminal) {\n          const ancestor = access & Access.Ancestor;\n          result = ancestor === 0 ? $this : ancestor === 1 ? $parent : new AccessThis(ancestor);\n          access = Access.This;\n          break primary;\n        } else {\n          throw Reporter.error(SyntaxError.InvalidMemberExpression, { state });\n        }\n      } while (state.currentToken === Token.ParentScope);\n    // falls through\n    case Token.Identifier: // identifier\n      if (bindingType & BindingType.IsIterator) {\n        result = new BindingIdentifier(state.tokenValue as string);\n      } else {\n        result = new AccessScope(state.tokenValue as string, access & Access.Ancestor);\n        access = Access.Scope;\n      }\n      state.assignable = true;\n      nextToken(state);\n      break;\n    case Token.ThisScope: // $this\n      state.assignable = false;\n      nextToken(state);\n      result = $this;\n      access = Access.This;\n      break;\n    case Token.OpenParen: // parenthesized expression\n      nextToken(state);\n      result = parse(state, Access.Reset, Precedence.Assign, bindingType);\n      consume(state, Token.CloseParen);\n      access = Access.Reset;\n      break;\n    case Token.OpenBracket:\n      result = parseArrayLiteralExpression(state, access, bindingType);\n      access = Access.Reset;\n      break;\n    case Token.OpenBrace:\n      result = parseObjectLiteralExpression(state, bindingType);\n      access = Access.Reset;\n      break;\n    case Token.TemplateTail:\n      result = new Template([state.tokenValue as string]);\n      state.assignable = false;\n      nextToken(state);\n      access = Access.Reset;\n      break;\n    case Token.TemplateContinuation:\n      result = parseTemplate(state, access, bindingType, result as IsLeftHandSide, false);\n      access = Access.Reset;\n      break;\n    case Token.StringLiteral:\n    case Token.NumericLiteral:\n      result = new PrimitiveLiteral(state.tokenValue);\n      state.assignable = false;\n      nextToken(state);\n      access = Access.Reset;\n      break;\n    case Token.NullKeyword:\n    case Token.UndefinedKeyword:\n    case Token.TrueKeyword:\n    case Token.FalseKeyword:\n      result = TokenValues[state.currentToken & Token.Type] as PrimitiveLiteral;\n      state.assignable = false;\n      nextToken(state);\n      access = Access.Reset;\n      break;\n    default:\n      if (state.index >= state.length) {\n        throw Reporter.error(SyntaxError.UnexpectedEndOfExpression, { state });\n      } else {\n        throw Reporter.error(SyntaxError.UnconsumedToken, { state });\n      }\n    }\n\n    if (bindingType & BindingType.IsIterator) {\n      // tslint:disable-next-line:no-any\n      return parseForOfStatement(state, result as BindingIdentifierOrPattern) as any;\n    }\n    // tslint:disable-next-line:no-any\n    if (Precedence.LeftHandSide < minPrecedence) return result as any;\n\n    /** parseMemberExpression (Token.Dot, Token.OpenBracket, Token.TemplateContinuation)\n     * MemberExpression :\n     *   1. PrimaryExpression\n     *   2. MemberExpression [ AssignmentExpression ]\n     *   3. MemberExpression . IdentifierName\n     *   4. MemberExpression TemplateLiteral\n     *\n     * IsValidAssignmentTarget\n     *   1,4 = false\n     *   2,3 = true\n     *\n     *\n     * parseCallExpression (Token.OpenParen)\n     * CallExpression :\n     *   1. MemberExpression Arguments\n     *   2. CallExpression Arguments\n     *   3. CallExpression [ AssignmentExpression ]\n     *   4. CallExpression . IdentifierName\n     *   5. CallExpression TemplateLiteral\n     *\n     * IsValidAssignmentTarget\n     *   1,2,5 = false\n     *   3,4 = true\n     */\n    let name = state.tokenValue as string;\n    while ((state.currentToken & Token.LeftHandSide) > 0) {\n      switch ((state.currentToken as Token)) {\n        case Token.Dot:\n          state.assignable = true;\n          nextToken(state);\n          if ((state.currentToken & Token.IdentifierName) === 0) {\n            throw Reporter.error(SyntaxError.ExpectedIdentifier, { state });\n          }\n          name = state.tokenValue as string;\n          nextToken(state);\n          // Change $This to $Scope, change $Scope to $Member, keep $Member as-is, change $Keyed to $Member, disregard other flags\n          access = ((access & (Access.This | Access.Scope)) << 1) | (access & Access.Member) | ((access & Access.Keyed) >> 1);\n          if ((state.currentToken as Token) === Token.OpenParen) {\n            if (access === Access.Reset) { // if the left hand side is a literal, make sure we parse a CallMember\n              access = Access.Member;\n            }\n            continue;\n          }\n          if (access & Access.Scope) {\n            result = new AccessScope(name, (result as AccessScope | AccessThis).ancestor);\n          } else { // if it's not $Scope, it's $Member\n            result = new AccessMember(result as IsLeftHandSide, name);\n          }\n          continue;\n        case Token.OpenBracket:\n          state.assignable = true;\n          nextToken(state);\n          access = Access.Keyed;\n          result = new AccessKeyed(result as IsLeftHandSide, parse(state, Access.Reset, Precedence.Assign, bindingType));\n          consume(state, Token.CloseBracket);\n          break;\n        case Token.OpenParen:\n          state.assignable = false;\n          nextToken(state);\n          const args = new Array<IsAssign>();\n          while ((state.currentToken as Token) !== Token.CloseParen) {\n            args.push(parse(state, Access.Reset, Precedence.Assign, bindingType));\n            if (!consumeOpt(state, Token.Comma)) {\n              break;\n            }\n          }\n          consume(state, Token.CloseParen);\n          if (access & Access.Scope) {\n            result = new CallScope(name, args, (result as AccessScope | AccessThis).ancestor);\n          } else if (access & Access.Member) {\n            result = new CallMember(result as IsLeftHandSide, name, args);\n          } else {\n            result = new CallFunction(result as IsLeftHandSide, args);\n          }\n          access = 0;\n          break;\n        case Token.TemplateTail:\n          state.assignable = false;\n          const strings = [state.tokenValue as string];\n          result = new TaggedTemplate(strings, strings, result as IsLeftHandSide);\n          nextToken(state);\n          break;\n        case Token.TemplateContinuation:\n          result = parseTemplate(state, access, bindingType, result as IsLeftHandSide, true);\n        default:\n      }\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  if (Precedence.Binary < minPrecedence) return result as any;\n\n  /** parseBinaryExpression\n   * https://tc39.github.io/ecma262/#sec-multiplicative-operators\n   *\n   * MultiplicativeExpression : (local precedence 6)\n   *   UnaryExpression\n   *   MultiplicativeExpression * / % UnaryExpression\n   *\n   * AdditiveExpression : (local precedence 5)\n   *   MultiplicativeExpression\n   *   AdditiveExpression + - MultiplicativeExpression\n   *\n   * RelationalExpression : (local precedence 4)\n   *   AdditiveExpression\n   *   RelationalExpression < > <= >= instanceof in AdditiveExpression\n   *\n   * EqualityExpression : (local precedence 3)\n   *   RelationalExpression\n   *   EqualityExpression == != === !== RelationalExpression\n   *\n   * LogicalANDExpression : (local precedence 2)\n   *   EqualityExpression\n   *   LogicalANDExpression && EqualityExpression\n   *\n   * LogicalORExpression : (local precedence 1)\n   *   LogicalANDExpression\n   *   LogicalORExpression || LogicalANDExpression\n   */\n  while ((state.currentToken & Token.BinaryOp) > 0) {\n    const opToken = state.currentToken;\n    if ((opToken & Token.Precedence) <= minPrecedence) {\n      break;\n    }\n    nextToken(state);\n    result = new Binary(TokenValues[opToken & Token.Type] as BinaryOperator, result as IsBinary, parse(state, access, opToken & Token.Precedence, bindingType));\n    state.assignable = false;\n  }\n  // tslint:disable-next-line:no-any\n  if (Precedence.Conditional < minPrecedence) return result as any;\n\n  /**\n   * parseConditionalExpression\n   * https://tc39.github.io/ecma262/#prod-ConditionalExpression\n   *\n   * ConditionalExpression :\n   *   1. BinaryExpression\n   *   2. BinaryExpression ? AssignmentExpression : AssignmentExpression\n   *\n   * IsValidAssignmentTarget\n   *   1,2 = false\n   */\n\n  if (consumeOpt(state, Token.Question)) {\n    const yes = parse(state, access, Precedence.Assign, bindingType);\n    consume(state, Token.Colon);\n    result = new Conditional(result as IsBinary, yes, parse(state, access, Precedence.Assign, bindingType));\n    state.assignable = false;\n  }\n  // tslint:disable-next-line:no-any\n  if (Precedence.Assign < minPrecedence) return result as any;\n\n  /** parseAssignmentExpression\n   * https://tc39.github.io/ecma262/#prod-AssignmentExpression\n   * Note: AssignmentExpression here is equivalent to ES Expression because we don't parse the comma operator\n   *\n   * AssignmentExpression :\n   *   1. ConditionalExpression\n   *   2. LeftHandSideExpression = AssignmentExpression\n   *\n   * IsValidAssignmentTarget\n   *   1,2 = false\n   */\n  if (consumeOpt(state, Token.Equals)) {\n    if (!state.assignable) {\n      throw Reporter.error(SemanticError.NotAssignable, { state });\n    }\n    result = new Assign(result as IsAssignable, parse(state, access, Precedence.Assign, bindingType));\n  }\n  // tslint:disable-next-line:no-any\n  if (Precedence.Variadic < minPrecedence) return result as any;\n\n  /** parseValueConverter\n   */\n  while (consumeOpt(state, Token.Bar)) {\n    if (state.currentToken === Token.EOF) {\n      throw Reporter.error(112);\n    }\n    const name = state.tokenValue as string;\n    nextToken(state);\n    const args = new Array<IsAssign>();\n    while (consumeOpt(state, Token.Colon)) {\n      args.push(parse(state, access, Precedence.Assign, bindingType));\n    }\n    result = new ValueConverter(result as IsValueConverter, name, args);\n  }\n\n  /** parseBindingBehavior\n   */\n  while (consumeOpt(state, Token.Ampersand)) {\n    if (state.currentToken === Token.EOF) {\n      throw Reporter.error(113);\n    }\n    const name = state.tokenValue as string;\n    nextToken(state);\n    const args = new Array<IsAssign>();\n    while (consumeOpt(state, Token.Colon)) {\n      args.push(parse(state, access, Precedence.Assign, bindingType));\n    }\n    result = new BindingBehavior(result as IsBindingBehavior, name, args);\n  }\n  if (state.currentToken !== Token.EOF) {\n    if (bindingType & BindingType.Interpolation) {\n      // tslint:disable-next-line:no-any\n      return result as any;\n    }\n    if (state.tokenRaw === 'of') {\n      throw Reporter.error(SemanticError.UnexpectedForOf, { state });\n    }\n    throw Reporter.error(SyntaxError.UnconsumedToken, { state });\n  }\n  // tslint:disable-next-line:no-any\n  return result as any;\n}\n\n/**\n * parseArrayLiteralExpression\n * https://tc39.github.io/ecma262/#prod-ArrayLiteral\n *\n * ArrayLiteral :\n *   [ Elision(opt) ]\n *   [ ElementList ]\n *   [ ElementList, Elision(opt) ]\n *\n * ElementList :\n *   Elision(opt) AssignmentExpression\n *   ElementList, Elision(opt) AssignmentExpression\n *\n * Elision :\n *  ,\n *  Elision ,\n */\nfunction parseArrayLiteralExpression(state: ParserState, access: Access, bindingType: BindingType): ArrayBindingPattern | ArrayLiteral {\n  nextToken(state);\n  const elements = new Array<IsAssign>();\n  while (state.currentToken !== Token.CloseBracket) {\n    if (consumeOpt(state, Token.Comma)) {\n      elements.push($undefined);\n      if ((state.currentToken as Token) === Token.CloseBracket) {\n        elements.push($undefined);\n        break;\n      }\n    } else {\n      elements.push(parse(state, access, Precedence.Assign, bindingType & ~BindingType.IsIterator));\n      if (consumeOpt(state, Token.Comma)) {\n        if ((state.currentToken as Token) === Token.CloseBracket) {\n          elements.push($undefined);\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n  }\n  consume(state, Token.CloseBracket);\n  if (bindingType & BindingType.IsIterator) {\n    return new ArrayBindingPattern(elements);\n  } else {\n    state.assignable = false;\n    return new ArrayLiteral(elements);\n  }\n}\n\nfunction parseForOfStatement(state: ParserState, result: BindingIdentifier | ArrayBindingPattern | ObjectBindingPattern): ForOfStatement {\n  if ((result.$kind & ExpressionKind.IsForDeclaration) === 0) {\n    throw Reporter.error(SyntaxError.InvalidForDeclaration, { state });\n  }\n  if (state.currentToken !== Token.OfKeyword) {\n    throw Reporter.error(SyntaxError.InvalidForDeclaration, { state });\n  }\n  nextToken(state);\n  const declaration = result;\n  const statement = parse(state, Access.Reset, Precedence.Variadic, BindingType.None);\n  return new ForOfStatement(declaration, statement as IsBindingBehavior);\n}\n\n/**\n * parseObjectLiteralExpression\n * https://tc39.github.io/ecma262/#prod-Literal\n *\n * ObjectLiteral :\n *   { }\n *   { PropertyDefinitionList }\n *\n * PropertyDefinitionList :\n *   PropertyDefinition\n *   PropertyDefinitionList, PropertyDefinition\n *\n * PropertyDefinition :\n *   IdentifierName\n *   PropertyName : AssignmentExpression\n *\n * PropertyName :\n *   IdentifierName\n *   StringLiteral\n *   NumericLiteral\n */\nfunction parseObjectLiteralExpression(state: ParserState, bindingType: BindingType): ObjectBindingPattern | ObjectLiteral {\n  const keys = new Array<string | number>();\n  const values = new Array<IsAssign>();\n  nextToken(state);\n  while (state.currentToken !== Token.CloseBrace) {\n    keys.push(state.tokenValue);\n    // Literal = mandatory colon\n    if (state.currentToken & Token.StringOrNumericLiteral) {\n      nextToken(state);\n      consume(state, Token.Colon);\n      values.push(parse(state, Access.Reset, Precedence.Assign, bindingType & ~BindingType.IsIterator));\n    } else if (state.currentToken & Token.IdentifierName) {\n      // IdentifierName = optional colon\n      const { currentChar, currentToken, index } = state;\n      nextToken(state);\n      if (consumeOpt(state, Token.Colon)) {\n        values.push(parse(state, Access.Reset, Precedence.Assign, bindingType & ~BindingType.IsIterator));\n      } else {\n        // Shorthand\n        state.currentChar = currentChar;\n        state.currentToken = currentToken;\n        state.index = index;\n        values.push(parse(state, Access.Reset, Precedence.Primary, bindingType & ~BindingType.IsIterator));\n      }\n    } else {\n      throw Reporter.error(SyntaxError.InvalidObjectLiteralPropertyDefinition, { state });\n    }\n    if ((state.currentToken as Token) !== Token.CloseBrace) {\n      consume(state, Token.Comma);\n    }\n  }\n  consume(state, Token.CloseBrace);\n  if (bindingType & BindingType.IsIterator) {\n    return new ObjectBindingPattern(keys, values);\n  } else {\n    state.assignable = false;\n    return new ObjectLiteral(keys, values);\n  }\n}\n\nfunction parseInterpolation(state: ParserState): Interpolation {\n  const parts = [];\n  const expressions = [];\n  const length = state.length;\n  let result = '';\n  while (state.index < length) {\n    switch (state.currentChar) {\n      case Char.Dollar:\n        if (state.input.charCodeAt(state.index + 1) === Char.OpenBrace) {\n          parts.push(result);\n          result = '';\n\n          state.index += 2;\n          state.currentChar = state.input.charCodeAt(state.index);\n          nextToken(state);\n          const expression = parse(state, Access.Reset, Precedence.Variadic, BindingType.Interpolation);\n          expressions.push(expression);\n          continue;\n        } else {\n          result += '$';\n        }\n        break;\n      case Char.Backslash:\n        result += String.fromCharCode(unescapeCode(nextChar(state)));\n        break;\n      default:\n        result += String.fromCharCode(state.currentChar);\n    }\n    nextChar(state);\n  }\n  if (expressions.length) {\n    parts.push(result);\n    return new Interpolation(parts, expressions);\n  }\n  return null;\n}\n\n/**\n * parseTemplateLiteralExpression\n * https://tc39.github.io/ecma262/#prod-Literal\n *\n * Template :\n *   NoSubstitutionTemplate\n *   TemplateHead\n *\n * NoSubstitutionTemplate :\n *   ` TemplateCharacters(opt) `\n *\n * TemplateHead :\n *   ` TemplateCharacters(opt) ${\n *\n * TemplateSubstitutionTail :\n *   TemplateMiddle\n *   TemplateTail\n *\n * TemplateMiddle :\n *   } TemplateCharacters(opt) ${\n *\n * TemplateTail :\n *   } TemplateCharacters(opt) `\n *\n * TemplateCharacters :\n *   TemplateCharacter TemplateCharacters(opt)\n *\n * TemplateCharacter :\n *   $ [lookahead ≠ {]\n *   \\ EscapeSequence\n *   SourceCharacter (but not one of ` or \\ or $)\n */\nfunction parseTemplate(state: ParserState, access: Access, bindingType: BindingType, result: IsLeftHandSide, tagged: boolean): TaggedTemplate | Template {\n  const cooked = [state.tokenValue as string];\n  // TODO: properly implement raw parts / decide whether we want this\n  consume(state, Token.TemplateContinuation);\n  const expressions = [parse(state, access, Precedence.Assign, bindingType)];\n  while ((state.currentToken = scanTemplateTail(state)) !== Token.TemplateTail) {\n    cooked.push(state.tokenValue as string);\n    consume(state, Token.TemplateContinuation);\n    expressions.push(parse(state, access, Precedence.Assign, bindingType));\n  }\n  cooked.push(state.tokenValue as string);\n  state.assignable = false;\n  if (tagged) {\n    nextToken(state);\n    return new TaggedTemplate(cooked, cooked, result, expressions);\n  } else {\n    nextToken(state);\n    return new Template(cooked, expressions);\n  }\n}\n\nfunction nextToken(state: ParserState): void {\n  while (state.index < state.length) {\n    state.startIndex = state.index;\n    if ((state.currentToken = CharScanners[state.currentChar](state)) !== null) { // a null token means the character must be skipped\n      return;\n    }\n  }\n  state.currentToken = Token.EOF;\n}\n\nfunction nextChar(state: ParserState): number {\n  return state.currentChar = state.input.charCodeAt(++state.index);\n}\n\nfunction scanIdentifier(state: ParserState): Token {\n  // run to the next non-idPart\n  while (IdParts[nextChar(state)]);\n\n  const token: Token|undefined = KeywordLookup[state.tokenValue = state.tokenRaw];\n  return token === undefined ? Token.Identifier : token;\n}\n\nfunction scanNumber(state: ParserState, isFloat: boolean): Token {\n  let char = state.currentChar;\n  if (isFloat === false) {\n    do {\n      char = nextChar(state);\n    } while (char <= Char.Nine && char >= Char.Zero);\n\n    if (char !== Char.Dot) {\n      state.tokenValue = parseInt(state.tokenRaw, 10);\n      return Token.NumericLiteral;\n    }\n    // past this point it's always a float\n    char = nextChar(state);\n    if (state.index >= state.length) {\n      // unless the number ends with a dot - that behaves a little different in native ES expressions\n      // but in our AST that behavior has no effect because numbers are always stored in variables\n      state.tokenValue = parseInt(state.tokenRaw.slice(0, -1), 10);\n      return Token.NumericLiteral;\n    }\n  }\n\n  if (char <= Char.Nine && char >= Char.Zero) {\n    do {\n      char = nextChar(state);\n    } while (char <= Char.Nine && char >= Char.Zero);\n  } else {\n    state.currentChar = state.input.charCodeAt(--state.index);\n  }\n\n  state.tokenValue = parseFloat(state.tokenRaw);\n  return Token.NumericLiteral;\n}\n\nfunction scanString(state: ParserState): Token {\n  const quote = state.currentChar;\n  nextChar(state); // Skip initial quote.\n\n  let unescaped = 0;\n  const buffer = new Array<string>();\n  let marker = state.index;\n\n  while (state.currentChar !== quote) {\n    if (state.currentChar === Char.Backslash) {\n      buffer.push(state.input.slice(marker, state.index));\n      nextChar(state);\n      unescaped = unescapeCode(state.currentChar);\n      nextChar(state);\n      buffer.push(String.fromCharCode(unescaped));\n      marker = state.index;\n    } else if (state.index >= state.length) {\n      throw Reporter.error(SyntaxError.UnterminatedQuote, { state });\n    } else {\n      nextChar(state);\n    }\n  }\n\n  const last = state.input.slice(marker, state.index);\n  nextChar(state); // Skip terminating quote.\n\n  // Compute the unescaped string value.\n  buffer.push(last);\n  const unescapedStr = buffer.join('');\n\n  state.tokenValue = unescapedStr;\n  return Token.StringLiteral;\n}\n\nfunction scanTemplate(state: ParserState): Token {\n  let tail = true;\n  let result = '';\n\n  while (nextChar(state) !== Char.Backtick) {\n    if (state.currentChar === Char.Dollar) {\n      if ((state.index + 1) < state.length && state.input.charCodeAt(state.index + 1) === Char.OpenBrace) {\n        state.index++;\n        tail = false;\n        break;\n      } else {\n        result += '$';\n      }\n    } else if (state.currentChar === Char.Backslash) {\n      result += String.fromCharCode(unescapeCode(nextChar(state)));\n    } else {\n      if (state.index >= state.length) {\n        throw Reporter.error(SyntaxError.UnterminatedTemplate, { state });\n      }\n      result += String.fromCharCode(state.currentChar);\n    }\n  }\n\n  nextChar(state);\n  state.tokenValue = result;\n  if (tail) {\n    return Token.TemplateTail;\n  }\n  return Token.TemplateContinuation;\n}\n\nfunction scanTemplateTail(state: ParserState): Token {\n  if (state.index >= state.length) {\n    throw Reporter.error(SyntaxError.UnterminatedTemplate, { state });\n  }\n  state.index--;\n  return scanTemplate(state);\n}\n\nfunction consumeOpt(state: ParserState, token: Token): boolean {\n  // tslint:disable-next-line:possible-timing-attack\n  if (state.currentToken === token) {\n    nextToken(state);\n    return true;\n  }\n\n  return false;\n}\n\nfunction consume(state: ParserState, token: Token): void {\n  // tslint:disable-next-line:possible-timing-attack\n  if (state.currentToken === token) {\n    nextToken(state);\n  } else {\n    throw Reporter.error(SyntaxError.MissingExpectedToken, { state, expected: token });\n  }\n}\n\n/**\n * Array for mapping tokens to token values. The indices of the values\n * correspond to the token bits 0-38.\n * For this to work properly, the values in the array must be kept in\n * the same order as the token bits.\n * Usage: TokenValues[token & Token.Type]\n */\nconst TokenValues = [\n  $false, $true, $null, $undefined, '$this', '$parent',\n\n  '(', '{', '.', '}', ')', ',', '[', ']', ':', '?', '\\'', '\"',\n\n  '&', '|', '||', '&&', '==', '!=', '===', '!==', '<', '>',\n  '<=', '>=', 'in', 'instanceof', '+', '-', 'typeof', 'void', '*', '%', '/', '=', '!',\n  Token.TemplateTail, Token.TemplateContinuation,\n  'of'\n];\n\nconst KeywordLookup: {\n  [key: string]: Token;\n} = Object.create(null);\nKeywordLookup.true = Token.TrueKeyword;\nKeywordLookup.null = Token.NullKeyword;\nKeywordLookup.false = Token.FalseKeyword;\nKeywordLookup.undefined = Token.UndefinedKeyword;\nKeywordLookup.$this = Token.ThisScope;\nKeywordLookup.$parent = Token.ParentScope;\nKeywordLookup.in = Token.InKeyword;\nKeywordLookup.instanceof = Token.InstanceOfKeyword;\nKeywordLookup.typeof = Token.TypeofKeyword;\nKeywordLookup.void = Token.VoidKeyword;\nKeywordLookup.of = Token.OfKeyword;\n\n/**\n * Ranges of code points in pairs of 2 (eg 0x41-0x5B, 0x61-0x7B, ...) where the second value is not inclusive (5-7 means 5 and 6)\n * Single values are denoted by the second value being a 0\n *\n * Copied from output generated with \"node build/generate-unicode.js\"\n *\n * See also: https://en.wikibooks.org/wiki/Unicode/Character_reference/0000-0FFF\n */\nconst codes = {\n  /* [$0-9A-Za_a-z] */\n  AsciiIdPart: [0x24, 0, 0x30, 0x3A, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B],\n  IdStart: /*IdentifierStart*/[0x24, 0, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B, 0xAA, 0, 0xBA, 0, 0xC0, 0xD7, 0xD8, 0xF7, 0xF8, 0x2B9, 0x2E0, 0x2E5, 0x1D00, 0x1D26, 0x1D2C, 0x1D5D, 0x1D62, 0x1D66, 0x1D6B, 0x1D78, 0x1D79, 0x1DBF, 0x1E00, 0x1F00, 0x2071, 0, 0x207F, 0, 0x2090, 0x209D, 0x212A, 0x212C, 0x2132, 0, 0x214E, 0, 0x2160, 0x2189, 0x2C60, 0x2C80, 0xA722, 0xA788, 0xA78B, 0xA7AF, 0xA7B0, 0xA7B8, 0xA7F7, 0xA800, 0xAB30, 0xAB5B, 0xAB5C, 0xAB65, 0xFB00, 0xFB07, 0xFF21, 0xFF3B, 0xFF41, 0xFF5B],\n  Digit: /*DecimalNumber*/[0x30, 0x3A],\n  Skip: /*Skippable*/[0, 0x21, 0x7F, 0xA1]\n};\n\n/**\n * Decompress the ranges into an array of numbers so that the char code\n * can be used as an index to the lookup\n */\nfunction decompress(lookup: (CharScanner | number)[] | null, $set: Set<number> | null, compressed: number[], value: CharScanner | number | boolean): void {\n  const rangeCount = compressed.length;\n  for (let i = 0; i < rangeCount; i += 2) {\n    const start = compressed[i];\n    let end = compressed[i + 1];\n    end = end > 0 ? end : start + 1;\n    if (lookup) {\n      lookup.fill(value as CharScanner | number, start, end);\n    }\n    if ($set) {\n      for (let ch = start; ch < end; ch++) {\n        $set.add(ch);\n      }\n    }\n  }\n}\n\n// CharFuncLookup functions\nfunction returnToken(token: Token): (s: ParserState) => Token {\n  return s => {\n    nextChar(s);\n    return token;\n  };\n}\nconst unexpectedCharacter: CharScanner = s => {\n  throw Reporter.error(SyntaxError.UnexpectedCharacter, { state: s });\n};\nunexpectedCharacter.notMapped = true;\n\n// ASCII IdentifierPart lookup\nconst AsciiIdParts = new Set();\ndecompress(null, AsciiIdParts, codes.AsciiIdPart, true);\n\n// IdentifierPart lookup\nconst IdParts = new Uint8Array(0xFFFF);\n// tslint:disable-next-line:no-any\ndecompress(IdParts as any, null, codes.IdStart, 1);\n// tslint:disable-next-line:no-any\ndecompress(IdParts as any, null, codes.Digit, 1);\n\ntype CharScanner = ((p: ParserState) => Token | null) & { notMapped?: boolean };\n\n// Character scanning function lookup\nconst CharScanners = new Array<CharScanner>(0xFFFF);\nCharScanners.fill(unexpectedCharacter, 0, 0xFFFF);\n\ndecompress(CharScanners, null, codes.Skip, s => {\n  nextChar(s);\n  return null;\n});\ndecompress(CharScanners, null, codes.IdStart, scanIdentifier);\ndecompress(CharScanners, null, codes.Digit, s => scanNumber(s, false));\n\nCharScanners[Char.DoubleQuote] =\nCharScanners[Char.SingleQuote] = s => {\n  return scanString(s);\n};\nCharScanners[Char.Backtick] = s => {\n  return scanTemplate(s);\n};\n\n// !, !=, !==\nCharScanners[Char.Exclamation] = s => {\n  if (nextChar(s) !== Char.Equals) {\n    return Token.Exclamation;\n  }\n  if (nextChar(s) !== Char.Equals) {\n    return Token.ExclamationEquals;\n  }\n  nextChar(s);\n  return Token.ExclamationEqualsEquals;\n};\n\n// =, ==, ===\nCharScanners[Char.Equals] =  s => {\n  if (nextChar(s) !== Char.Equals) {\n    return Token.Equals;\n  }\n  if (nextChar(s) !== Char.Equals) {\n    return Token.EqualsEquals;\n  }\n  nextChar(s);\n  return Token.EqualsEqualsEquals;\n};\n\n// &, &&\nCharScanners[Char.Ampersand] = s => {\n  if (nextChar(s) !== Char.Ampersand) {\n    return Token.Ampersand;\n  }\n  nextChar(s);\n  return Token.AmpersandAmpersand;\n};\n\n// |, ||\nCharScanners[Char.Bar] = s => {\n  if (nextChar(s) !== Char.Bar) {\n    return Token.Bar;\n  }\n  nextChar(s);\n  return Token.BarBar;\n};\n\n// .\nCharScanners[Char.Dot] = s => {\n  if (nextChar(s) <= Char.Nine && s.currentChar >= Char.Zero) {\n    return scanNumber(s, true);\n  }\n  return Token.Dot;\n};\n\n// <, <=\nCharScanners[Char.LessThan] =  s => {\n  if (nextChar(s) !== Char.Equals) {\n    return Token.LessThan;\n  }\n  nextChar(s);\n  return Token.LessThanEquals;\n};\n\n// >, >=\nCharScanners[Char.GreaterThan] =  s => {\n  if (nextChar(s) !== Char.Equals) {\n    return Token.GreaterThan;\n  }\n  nextChar(s);\n  return Token.GreaterThanEquals;\n};\n\nCharScanners[Char.Percent]      = returnToken(Token.Percent);\nCharScanners[Char.OpenParen]    = returnToken(Token.OpenParen);\nCharScanners[Char.CloseParen]   = returnToken(Token.CloseParen);\nCharScanners[Char.Asterisk]     = returnToken(Token.Asterisk);\nCharScanners[Char.Plus]         = returnToken(Token.Plus);\nCharScanners[Char.Comma]        = returnToken(Token.Comma);\nCharScanners[Char.Minus]        = returnToken(Token.Minus);\nCharScanners[Char.Slash]        = returnToken(Token.Slash);\nCharScanners[Char.Colon]        = returnToken(Token.Colon);\nCharScanners[Char.Question]     = returnToken(Token.Question);\nCharScanners[Char.OpenBracket]  = returnToken(Token.OpenBracket);\nCharScanners[Char.CloseBracket] = returnToken(Token.CloseBracket);\nCharScanners[Char.OpenBrace]    = returnToken(Token.OpenBrace);\nCharScanners[Char.CloseBrace]   = returnToken(Token.CloseBrace);\n","import { IResourceDescriptions, PLATFORM, Reporter } from '@aurelia/kernel';\nimport { AttributeDefinition, BindingMode, CustomAttributeResource, CustomElementResource, IBindableDescription, IElement, TemplateDefinition } from '@aurelia/runtime';\nimport { AttrSyntax } from './ast';\nimport { BindingCommandResource, IBindingCommand } from './binding-command';\n\n/**\n * A pre-processed piece of information about declared custom elements, attributes and\n * binding commands, optimized for consumption by the template compiler.\n */\nexport class ResourceModel {\n\n  private resources: IResourceDescriptions;\n  private elementLookup: Record<string, ElementInfo>;\n  private attributeLookup: Record<string, AttrInfo>;\n  private commandLookup: Record<string, IBindingCommand>;\n\n  constructor(resources: IResourceDescriptions) {\n    this.resources = resources;\n    this.elementLookup = {};\n    this.attributeLookup = {};\n    this.commandLookup = {};\n  }\n\n  /**\n   * Retrieve information about a custom element resource.\n   *\n   * @param element The original DOM element.\n   *\n   * @returns The resource information if the element exists, or `null` if it does not exist.\n   */\n  public getElementInfo(element: IElement): ElementInfo | null {\n    let name = element.getAttribute('as-element');\n    if (name === null) {\n      name = element.nodeName.toLowerCase();\n    }\n    let result = this.elementLookup[name];\n    if (result === undefined) {\n      const def = this.resources.find(CustomElementResource, name);\n      if (def === null) {\n        result = null;\n      } else {\n        result = createElementInfo(def);\n      }\n      this.elementLookup[name] = result;\n    }\n    return result;\n  }\n\n  /**\n   * Retrieve information about a custom attribute resource.\n   *\n   * @param syntax The parsed `AttrSyntax`\n   *\n   * @returns The resource information if the attribute exists, or `null` if it does not exist.\n   */\n  public getAttributeInfo(syntax: AttrSyntax): AttrInfo | null {\n    const name = PLATFORM.camelCase(syntax.target);\n    let result = this.attributeLookup[name];\n    if (result === undefined) {\n      const def = this.resources.find(CustomAttributeResource, name);\n      if (def === null) {\n        result = null;\n      } else {\n        result = createAttributeInfo(def);\n      }\n      this.attributeLookup[name] = result;\n    }\n    return result;\n  }\n\n  /**\n   * Retrieve a binding command resource.\n   *\n   * @param name The parsed `AttrSyntax`\n   *\n   * @returns An instance of the command if it exists, or `null` if it does not exist.\n   */\n  public getBindingCommand(syntax: AttrSyntax): IBindingCommand | null {\n    const name = syntax.command;\n    if (name === null) {\n      return null;\n    }\n    let result = this.commandLookup[name];\n    if (result === undefined) {\n      result = this.resources.create(BindingCommandResource, name);\n      if (result === null) {\n        // unknown binding command\n        throw Reporter.error(0); // TODO: create error code\n      }\n      this.commandLookup[name] = result;\n    }\n    return result;\n  }\n}\n\nfunction createElementInfo(def: TemplateDefinition): ElementInfo {\n  const info = new ElementInfo(def.name, def.containerless);\n  const bindables = def.bindables;\n  const defaultBindingMode = BindingMode.toView;\n\n  let bindable: IBindableDescription;\n  let prop: string;\n  let attr: string;\n  let mode: BindingMode;\n\n  for (prop in bindables) {\n    bindable = bindables[prop];\n    // explicitly provided property name has priority over the implicit property name\n    if (bindable.property !== undefined) {\n      prop = bindable.property;\n    }\n    // explicitly provided attribute name has priority over the derived implicit attribute name\n    if (bindable.attribute !== undefined) {\n      attr = bindable.attribute;\n    } else {\n      // derive the attribute name from the resolved property name\n      attr = PLATFORM.kebabCase(prop);\n    }\n    if (bindable.mode !== undefined && bindable.mode !== BindingMode.default) {\n      mode = bindable.mode;\n    } else {\n      mode = defaultBindingMode;\n    }\n    info.bindables[attr] = new BindableInfo(prop, mode);\n  }\n  return info;\n}\n\nfunction createAttributeInfo(def: AttributeDefinition): AttrInfo {\n  const info = new AttrInfo(def.name, def.isTemplateController);\n  const bindables = def.bindables;\n  const defaultBindingMode = def.defaultBindingMode !== undefined && def.defaultBindingMode !== BindingMode.default\n    ? def.defaultBindingMode\n    : BindingMode.toView;\n\n  let bindable: IBindableDescription;\n  let prop: string;\n  let mode: BindingMode;\n  let bindableCount: number = 0;\n\n  for (prop in bindables) {\n    ++bindableCount;\n    bindable = bindables[prop];\n    // explicitly provided property name has priority over the implicit property name\n    if (bindable.property !== undefined) {\n      prop = bindable.property;\n    }\n    if (bindable.mode !== undefined && bindable.mode !== BindingMode.default) {\n      mode = bindable.mode;\n    } else {\n      mode = defaultBindingMode;\n    }\n    info.bindables[prop] = new BindableInfo(prop, mode);\n    // set to first bindable by convention\n    if (info.bindable === null) {\n      info.bindable = info.bindables[prop];\n    }\n  }\n  // if no bindables are present, default to \"value\"\n  if (info.bindable === null) {\n    info.bindable = new BindableInfo('value', defaultBindingMode);\n  }\n  if (def.hasDynamicOptions || bindableCount > 1) {\n    info.hasDynamicOptions = true;\n  }\n  return info;\n}\n\n/**\n * A pre-processed piece of information about a defined bindable property on a custom\n * element or attribute, optimized for consumption by the template compiler.\n */\nexport class BindableInfo {\n  /**\n   * The pre-processed *property* (not attribute) name of the bindable, which is\n   * (in order of priority):\n   *\n   * 1. The `property` from the description (if defined)\n   * 2. The name of the property of the bindable itself\n   */\n  public propName: string;\n  /**\n   * The pre-processed (default) bindingMode of the bindable, which is (in order of priority):\n   *\n   * 1. The `mode` from the bindable (if defined and not bindingMode.default)\n   * 2. The `defaultBindingMode` (if it's an attribute, defined, and not bindingMode.default)\n   * 3. `bindingMode.toView`\n   */\n  public mode: BindingMode;\n\n  constructor(propName: string, mode: BindingMode) {\n    this.propName = propName;\n    this.mode = mode;\n  }\n}\n\n/**\n * Pre-processed information about a custom element resource, optimized\n * for consumption by the template compiler.\n */\nexport class ElementInfo {\n  public name: string;\n  public containerless: boolean;\n\n  /**\n   * A lookup of the bindables of this element, indexed by the (pre-processed)\n   * attribute names as they would be found in parsed markup.\n   */\n  public bindables: Record<string, BindableInfo>;\n\n  constructor(name: string, containerless: boolean) {\n    this.name = name;\n    this.containerless = containerless;\n    this.bindables = {};\n  }\n}\n\n/**\n * Pre-processed information about a custom attribute resource, optimized\n * for consumption by the template compiler.\n */\nexport class AttrInfo {\n  public name: string;\n\n  /**\n   * A lookup of the bindables of this attribute, indexed by the (pre-processed)\n   * bindable names as they would be found in the attribute value.\n   *\n   * Only applicable to multi attribute bindings (semicolon-separated).\n   */\n  public bindables: Record<string, BindableInfo>;\n  /**\n   * The single or first bindable of this attribute, or a default 'value'\n   * bindable if no bindables were defined on the attribute.\n   *\n   * Only applicable to single attribute bindings (where the attribute value\n   * contains no semicolons)\n   */\n  public bindable: BindableInfo;\n\n  public isTemplateController: boolean;\n\n  public hasDynamicOptions: boolean;\n\n  constructor(name: string, isTemplateController: boolean) {\n    this.name = name;\n    this.bindables = {};\n    this.bindable = null;\n    this.isTemplateController = isTemplateController;\n    this.hasDynamicOptions = false;\n  }\n}\n","import { PLATFORM, Reporter, Tracer } from '@aurelia/kernel';\nimport { BindingMode, BindingType, DOM, IExpressionParser, IHTMLElement, IHTMLTemplateElement, INode, Interpolation, IsExpressionOrStatement, IText, NodeType } from '@aurelia/runtime';\nimport { AttrSyntax } from './ast';\nimport { IAttributeParser } from './attribute-parser';\nimport { IBindingCommand } from './binding-command';\nimport { Char } from './common';\nimport { AttrInfo, BindableInfo, ElementInfo, ResourceModel } from './resource-model';\n\nexport const enum SymbolFlags {\n  type                 = 0b000000_111111111,\n  isTemplateController = 0b000000_000000001,\n  isReplacePart        = 0b000000_000000010,\n  isCustomAttribute    = 0b000000_000000100,\n  isPlainAttribute     = 0b000000_000001000,\n  isCustomElement      = 0b000000_000010000,\n  isLetElement         = 0b000000_000100000,\n  isPlainElement       = 0b000000_001000000,\n  isText               = 0b000000_010000000,\n  isBinding            = 0b000000_100000000,\n  hasMarker            = 0b000001_000000000,\n  hasTemplate          = 0b000010_000000000,\n  hasAttributes        = 0b000100_000000000,\n  hasBindings          = 0b001000_000000000,\n  hasChildNodes        = 0b010000_000000000,\n  hasParts             = 0b100000_000000000,\n}\n\n/**\n * A html attribute that is associated with a registered resource, specifically a template controller.\n */\nexport class TemplateControllerSymbol {\n  public flags: SymbolFlags;\n  public res: string;\n  public partName: string | null;\n  public physicalNode: IHTMLTemplateElement | null;\n  public syntax: AttrSyntax;\n  public template: ParentNodeSymbol | null;\n  public templateController: TemplateControllerSymbol | null;\n  public marker: IHTMLElement;\n\n  private _bindings: BindingSymbol[] | null;\n  public get bindings(): BindingSymbol[] {\n    if (this._bindings === null) {\n      this._bindings = [];\n      this.flags |= SymbolFlags.hasBindings;\n    }\n    return this._bindings;\n  }\n\n  constructor(syntax: AttrSyntax, info: AttrInfo, partName: string | null) {\n    this.flags = SymbolFlags.isTemplateController | SymbolFlags.hasMarker;\n    this.res = info.name;\n    this.partName = partName;\n    this.physicalNode = null;\n    this.syntax = syntax;\n    this.template = null;\n    this.templateController = null;\n    this.marker = createMarker();\n    this._bindings = null;\n  }\n}\n\n/**\n * Wrapper for an element (with all of its attributes, regardless of the order in which they are declared)\n * that has a replace-part attribute on it.\n *\n * This element will be lifted from the DOM just like a template controller.\n */\nexport class ReplacePartSymbol {\n  public flags: SymbolFlags;\n  public name: string;\n  public physicalNode: IHTMLTemplateElement | null;\n  public parent: ParentNodeSymbol | null;\n  public template: ParentNodeSymbol | null;\n\n  constructor(name: string) {\n    this.flags = SymbolFlags.isReplacePart;\n    this.name = name;\n    this.physicalNode = null;\n    this.parent = null;\n    this.template = null;\n  }\n}\n\n/**\n * A html attribute that is associated with a registered resource, but not a template controller.\n */\nexport class CustomAttributeSymbol {\n  public flags: SymbolFlags;\n  public res: string;\n  public syntax: AttrSyntax;\n\n  private _bindings: BindingSymbol[] | null;\n  public get bindings(): BindingSymbol[] {\n    if (this._bindings === null) {\n      this._bindings = [];\n      this.flags |= SymbolFlags.hasBindings;\n    }\n    return this._bindings;\n  }\n\n  constructor(syntax: AttrSyntax, info: AttrInfo) {\n    this.flags = SymbolFlags.isCustomAttribute;\n    this.res = info.name;\n    this.syntax = syntax;\n    this._bindings = null;\n  }\n}\n\n/**\n * An attribute, with either a binding command or an interpolation, whose target is the html\n * attribute of the element.\n *\n * This will never target a bindable property of a custom attribute or element;\n */\nexport class PlainAttributeSymbol {\n  public flags: SymbolFlags;\n  public syntax: AttrSyntax;\n  public command: IBindingCommand | null;\n  public expression: IsExpressionOrStatement | null;\n\n  constructor(\n    syntax: AttrSyntax,\n    command: IBindingCommand | null,\n    expression: IsExpressionOrStatement | null\n  ) {\n    this.flags = SymbolFlags.isPlainAttribute;\n    this.syntax = syntax;\n    this.command = command;\n    this.expression = expression;\n  }\n}\n\n/**\n * Either an attribute on an custom element that maps to a declared bindable property of that element,\n * a single-value bound custom attribute, or one of several bindables that were extracted from the attribute\n * value of a dynamicOptions custom attribute.\n *\n * This will always target a bindable property of a custom attribute or element;\n */\nexport class BindingSymbol {\n  public flags: SymbolFlags;\n  public command: IBindingCommand | null;\n  public bindable: BindableInfo;\n  public expression: IsExpressionOrStatement | null;\n  public rawValue: string;\n  public target: string;\n\n  constructor(\n    command: IBindingCommand | null,\n    bindable: BindableInfo,\n    expression: IsExpressionOrStatement | null,\n    rawValue: string,\n    target: string\n  ) {\n    this.flags = SymbolFlags.isBinding;\n    this.command = command;\n    this.bindable = bindable;\n    this.expression = expression;\n    this.rawValue = rawValue;\n    this.target = target;\n  }\n}\n\n/**\n * A html element that is associated with a registered resource either via its (lowerCase) `nodeName`\n * or the value of its `as-element` attribute.\n */\nexport class CustomElementSymbol {\n  public flags: SymbolFlags;\n  public res: string;\n  public physicalNode: IHTMLElement;\n  public bindables: Record<string, BindableInfo>;\n  public isTarget: true;\n  public templateController: TemplateControllerSymbol | null;\n  public isContainerless: boolean;\n  public marker: IHTMLElement | null;\n\n  private _attributes: AttributeSymbol[] | null;\n  public get attributes(): AttributeSymbol[] {\n    if (this._attributes === null) {\n      this._attributes = [];\n      this.flags |= SymbolFlags.hasAttributes;\n    }\n    return this._attributes;\n  }\n\n  private _bindings: BindingSymbol[] | null;\n  public get bindings(): BindingSymbol[] {\n    if (this._bindings === null) {\n      this._bindings = [];\n      this.flags |= SymbolFlags.hasBindings;\n    }\n    return this._bindings;\n  }\n\n  private _childNodes: NodeSymbol[] | null;\n  public get childNodes(): NodeSymbol[] {\n    if (this._childNodes === null) {\n      this._childNodes = [];\n      this.flags |= SymbolFlags.hasChildNodes;\n    }\n    return this._childNodes;\n  }\n\n  private _parts: ReplacePartSymbol[] | null;\n  public get parts(): ReplacePartSymbol[] {\n    if (this._parts === null) {\n      this._parts = [];\n      this.flags |= SymbolFlags.hasParts;\n    }\n    return this._parts;\n  }\n\n  constructor(node: IHTMLElement, info: ElementInfo) {\n    this.flags = SymbolFlags.isCustomElement;\n    this.res = info.name;\n    this.physicalNode = node;\n    this.bindables = info.bindables;\n    this.isTarget = true;\n    this.templateController = null;\n    if (info.containerless) {\n      this.isContainerless = true;\n      this.marker = createMarker();\n      this.flags |= SymbolFlags.hasMarker;\n    } else {\n      this.isContainerless = false;\n      this.marker = null;\n    }\n    this._attributes = null;\n    this._bindings = null;\n    this._childNodes = null;\n    this._parts = null;\n  }\n}\n\nexport class LetElementSymbol {\n  public flags: SymbolFlags;\n  public physicalNode: IHTMLElement;\n  public toViewModel: boolean;\n  public marker: IHTMLElement;\n\n  private _bindings: BindingSymbol[] | null;\n  public get bindings(): BindingSymbol[] {\n    if (this._bindings === null) {\n      this._bindings = [];\n      this.flags |= SymbolFlags.hasBindings;\n    }\n    return this._bindings;\n  }\n\n  constructor(node: IHTMLElement) {\n    this.flags = SymbolFlags.isLetElement | SymbolFlags.hasMarker;\n    this.physicalNode = node;\n    this.toViewModel = false;\n    this.marker = createMarker();\n    this._bindings = null;\n  }\n}\n\n/**\n * A normal html element that may or may not have attribute behaviors and/or child node behaviors.\n *\n * It is possible for a PlainElementSymbol to not yield any instructions during compilation.\n */\nexport class PlainElementSymbol {\n  public flags: SymbolFlags;\n  public physicalNode: IHTMLElement;\n  public isTarget: boolean;\n  public templateController: TemplateControllerSymbol | null;\n  public hasSlots?: boolean;\n\n  private _attributes: AttributeSymbol[] | null;\n  public get attributes(): AttributeSymbol[] {\n    if (this._attributes === null) {\n      this._attributes = [];\n      this.flags |= SymbolFlags.hasAttributes;\n    }\n    return this._attributes;\n  }\n\n  private _childNodes: NodeSymbol[] | null;\n  public get childNodes(): NodeSymbol[] {\n    if (this._childNodes === null) {\n      this._childNodes = [];\n      this.flags |= SymbolFlags.hasChildNodes;\n    }\n    return this._childNodes;\n  }\n\n  constructor(node: IHTMLElement) {\n    this.flags = SymbolFlags.isPlainElement;\n    this.physicalNode = node;\n    this.isTarget = false;\n    this.templateController = null;\n    this._attributes = null;\n    this._childNodes = null;\n  }\n}\n\n/**\n * A standalone text node that has an interpolation.\n */\nexport class TextSymbol {\n  public flags: SymbolFlags;\n  public physicalNode: IText;\n  public interpolation: Interpolation;\n  public marker: IHTMLElement;\n\n  constructor(node: IText, interpolation: Interpolation) {\n    this.flags = SymbolFlags.isText | SymbolFlags.hasMarker;\n    this.physicalNode = node;\n    this.interpolation = interpolation;\n    this.marker = createMarker();\n  }\n}\n\nexport type AttributeSymbol = CustomAttributeSymbol | PlainAttributeSymbol;\nexport type ResourceAttributeSymbol = CustomAttributeSymbol | TemplateControllerSymbol;\nexport type ElementSymbol = CustomElementSymbol | PlainElementSymbol;\nexport type ParentNodeSymbol = ElementSymbol | TemplateControllerSymbol;\nexport type NodeSymbol = TextSymbol | LetElementSymbol | ParentNodeSymbol;\nexport type SymbolWithBindings = LetElementSymbol | CustomElementSymbol | ResourceAttributeSymbol;\nexport type SymbolWithTemplate = TemplateControllerSymbol | ReplacePartSymbol;\nexport type SymbolWithMarker = TemplateControllerSymbol | TextSymbol | LetElementSymbol | CustomElementSymbol;\nexport type AnySymbol =\n  TemplateControllerSymbol |\n  ReplacePartSymbol |\n  CustomAttributeSymbol |\n  PlainAttributeSymbol |\n  CustomElementSymbol |\n  PlainElementSymbol |\n  TextSymbol;\n\nconst slice = Array.prototype.slice;\n\nfunction createMarker(): IHTMLElement {\n  const marker = DOM.createElement('au-m');\n  marker.className = 'au';\n  return marker as IHTMLElement;\n}\n\nconst invalidSurrogateAttribute = {\n  'id': true,\n  'part': true,\n  'replace-part': true\n};\n\nconst attributesToIgnore = {\n  'as-element': true,\n  'part': true,\n  'replace-part': true\n};\n\nexport class TemplateBinder {\n  public resources: ResourceModel;\n  public attrParser: IAttributeParser;\n  public exprParser: IExpressionParser;\n\n  private surrogate: PlainElementSymbol | null;\n\n  // This is any \"original\" (as in, not a template created for a template controller) element.\n  // It collects all attribute symbols except for template controllers and replace-parts.\n  private manifest: ElementSymbol | null;\n\n  // This is the nearest wrapping custom element.\n  // It only collects replace-parts (and inherently everything that the manifest collects, if they are the same instance)\n  private manifestRoot: CustomElementSymbol | null;\n\n  // This is the nearest wrapping custom element relative to the current manifestRoot (the manifestRoot \"one level up\").\n  // It exclusively collects replace-parts that are placed on the current manifestRoot.\n  private parentManifestRoot: CustomElementSymbol | null;\n\n  private partName: string | null;\n\n  constructor(resources: ResourceModel, attrParser: IAttributeParser, exprParser: IExpressionParser) {\n    this.resources = resources;\n    this.attrParser = attrParser;\n    this.exprParser = exprParser;\n    this.surrogate = null;\n    this.manifest = null;\n    this.manifestRoot = null;\n    this.parentManifestRoot = null;\n    this.partName = null;\n  }\n\n  public bind(node: IHTMLTemplateElement): PlainElementSymbol {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.bind', slice.call(arguments)); }\n\n    const surrogateSave = this.surrogate;\n    const parentManifestRootSave = this.parentManifestRoot;\n    const manifestRootSave = this.manifestRoot;\n    const manifestSave = this.manifest;\n\n    const manifest = this.surrogate = this.manifest = new PlainElementSymbol(node);\n\n    const attributes = node.attributes;\n    let i = 0;\n    while (i < attributes.length) {\n      const attr = attributes[i];\n      const attrSyntax = this.attrParser.parse(attr.name, attr.value);\n\n      if (invalidSurrogateAttribute[attrSyntax.target] === true) {\n        throw new Error(`Invalid surrogate attribute: ${attrSyntax.target}`);\n        // TODO: use reporter\n      }\n      const attrInfo = this.resources.getAttributeInfo(attrSyntax);\n      if (attrInfo === null) {\n        this.bindPlainAttribute(attrSyntax);\n      } else if (attrInfo.isTemplateController) {\n        throw new Error('Cannot have template controller on surrogate element.');\n        // TODO: use reporter\n      } else {\n        this.bindCustomAttribute(attrSyntax, attrInfo);\n      }\n      ++i;\n    }\n\n    this.bindChildNodes(node);\n\n    this.surrogate = surrogateSave;\n    this.parentManifestRoot = parentManifestRootSave;\n    this.manifestRoot = manifestRootSave;\n    this.manifest = manifestSave;\n\n    if (Tracer.enabled) { Tracer.leave(); }\n    return manifest;\n  }\n\n  private bindManifest(parentManifest: ElementSymbol, node: IHTMLTemplateElement | IHTMLElement): void {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.bindManifest', slice.call(arguments)); }\n\n    switch (node.nodeName) {\n      case 'LET':\n        // let cannot have children and has some different processing rules, so return early\n        this.bindLetElement(parentManifest, node);\n        if (Tracer.enabled) { Tracer.leave(); }\n        return;\n      case 'SLOT':\n        // slot requires no compilation\n        this.surrogate.hasSlots = true;\n        if (Tracer.enabled) { Tracer.leave(); }\n        return;\n    }\n\n    // nodes are processed bottom-up so we need to store the manifests before traversing down and\n    // restore them again afterwards\n    const parentManifestRootSave = this.parentManifestRoot;\n    const manifestRootSave = this.manifestRoot;\n    const manifestSave = this.manifest;\n\n    // get the part name to override the name of the compiled definition\n    this.partName = node.getAttribute('part');\n\n    let manifestRoot: CustomElementSymbol;\n    const elementInfo = this.resources.getElementInfo(node);\n    if (elementInfo === null) {\n      // there is no registered custom element with this name\n      this.manifest = new PlainElementSymbol(node);\n    } else {\n      // it's a custom element so we set the manifestRoot as well (for storing replace-parts)\n      this.parentManifestRoot = this.manifestRoot;\n      manifestRoot = this.manifestRoot = this.manifest = new CustomElementSymbol(node, elementInfo);\n    }\n\n    // lifting operations done by template controllers and replace-parts effectively unlink the nodes, so start at the bottom\n    this.bindChildNodes(node);\n\n    // the parentManifest will receive either the direct child nodes, or the template controllers / replace-parts\n    // wrapping them\n    this.bindAttributes(node, parentManifest);\n\n    if (manifestRoot !== undefined && manifestRoot.isContainerless) {\n      node.parentNode.replaceChild(manifestRoot.marker, node);\n    } else if (this.manifest.isTarget) {\n      node.classList.add('au');\n    }\n\n    // restore the stored manifests so the attributes are processed on the correct lavel\n    this.parentManifestRoot = parentManifestRootSave;\n    this.manifestRoot = manifestRootSave;\n    this.manifest = manifestSave;\n\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  private bindLetElement(parentManifest: ElementSymbol, node: IHTMLElement): void {\n    const symbol = new LetElementSymbol(node);\n    parentManifest.childNodes.push(symbol);\n\n    const attributes = node.attributes;\n    let i = 0;\n    while (i < attributes.length) {\n      const attr = attributes[i];\n      if (attr.name === 'to-view-model') {\n        node.removeAttribute('to-view-model');\n        symbol.toViewModel = true;\n        continue;\n      }\n      const attrSyntax = this.attrParser.parse(attr.name, attr.value);\n      const command = this.resources.getBindingCommand(attrSyntax);\n      const bindingType = command === null ? BindingType.Interpolation : command.bindingType;\n      const expr = this.exprParser.parse(attrSyntax.rawValue, bindingType);\n      const to = PLATFORM.camelCase(attrSyntax.target);\n      const info = new BindableInfo(to, BindingMode.toView);\n      symbol.bindings.push(new BindingSymbol(command, info, expr, attrSyntax.rawValue, to));\n\n      ++i;\n    }\n    node.parentNode.replaceChild(symbol.marker, node);\n  }\n\n  private bindAttributes(node: IHTMLTemplateElement | IHTMLElement, parentManifest: ElementSymbol): void {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.bindAttributes', slice.call(arguments)); }\n\n    const { parentManifestRoot, manifestRoot, manifest } = this;\n    // This is the top-level symbol for the current depth.\n    // If there are no template controllers or replace-parts, it is always the manifest itself.\n    // If there are template controllers, then this will be the outer-most TemplateControllerSymbol.\n    let manifestProxy = manifest as ParentNodeSymbol;\n\n    const replacePart = this.declareReplacePart(node);\n\n    let previousController: TemplateControllerSymbol;\n    let currentController: TemplateControllerSymbol;\n\n    const attributes = node.attributes;\n    let i = 0;\n    while (i < attributes.length) {\n      const attr = attributes[i];\n      ++i;\n      if (attributesToIgnore[attr.name] === true) {\n        continue;\n      }\n      const attrSyntax = this.attrParser.parse(attr.name, attr.value);\n      const attrInfo = this.resources.getAttributeInfo(attrSyntax);\n\n      if (attrInfo === null) {\n        // it's not a custom attribute but might be a regular bound attribute or interpolation (it might also be nothing)\n        this.bindPlainAttribute(attrSyntax);\n      } else if (attrInfo.isTemplateController) {\n        // the manifest is wrapped by the inner-most template controller (if there are multiple on the same element)\n        // so keep setting manifest.templateController to the latest template controller we find\n        currentController = manifest.templateController = this.declareTemplateController(attrSyntax, attrInfo);\n\n        // the proxy and the manifest are only identical when we're at the first template controller (since the controller\n        // is assigned to the proxy), so this evaluates to true at most once per node\n        if (manifestProxy === manifest) {\n          currentController.template = manifest;\n          manifestProxy = currentController;\n        } else {\n          currentController.templateController = previousController;\n          currentController.template = previousController.template;\n          previousController.template = currentController;\n        }\n        previousController = currentController;\n      } else {\n        // a regular custom attribute\n        this.bindCustomAttribute(attrSyntax, attrInfo);\n      }\n    }\n\n    processTemplateControllers(manifestProxy, manifest);\n\n    if (replacePart === null) {\n      // the proxy is either the manifest itself or the outer-most controller; add it directly to the parent\n      parentManifest.childNodes.push(manifestProxy);\n    } else {\n      // there is a replace-part attribute on this node, so add it to the parts collection of the manifestRoot\n      // instead of to the childNodes\n      replacePart.parent = parentManifest;\n      replacePart.template = manifestProxy;\n\n      // if the current manifest is also the manifestRoot, it means the replace-part sits on a custom\n      // element, so add the part to the parent wrapping custom element instead\n      const partOwner = manifest === manifestRoot ? parentManifestRoot : manifestRoot;\n      partOwner.parts.push(replacePart);\n\n      processReplacePart(replacePart, manifestProxy);\n    }\n\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  private bindChildNodes(node: IHTMLTemplateElement | IHTMLElement): void {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.bindChildNodes', slice.call(arguments)); }\n\n    let childNode: INode;\n    if (node.nodeName === 'TEMPLATE') {\n      childNode = (node as IHTMLTemplateElement).content.firstChild;\n    } else {\n      childNode = node.firstChild;\n    }\n\n    let nextChild: INode;\n    while (childNode !== null) {\n      switch (childNode.nodeType) {\n        case NodeType.Element:\n          nextChild = childNode.nextSibling;\n          this.bindManifest(this.manifest, childNode as IHTMLElement);\n          childNode = nextChild;\n          break;\n        case NodeType.Text:\n          childNode = this.bindText(childNode as IText).nextSibling;\n          break;\n        case NodeType.CDATASection:\n        case NodeType.ProcessingInstruction:\n        case NodeType.Comment:\n        case NodeType.DocumentType:\n          childNode = childNode.nextSibling;\n          break;\n        case NodeType.Document:\n        case NodeType.DocumentFragment:\n          childNode = childNode.firstChild;\n      }\n    }\n\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  private bindText(node: IText): INode {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.bindText', slice.call(arguments)); }\n    const interpolation = this.exprParser.parse(node.wholeText, BindingType.Interpolation);\n    if (interpolation !== null) {\n      const symbol = new TextSymbol(node, interpolation);\n      this.manifest.childNodes.push(symbol);\n      processInterpolationText(symbol);\n    }\n    while (node.nextSibling !== null && node.nextSibling.nodeType === NodeType.Text) {\n      node = node.nextSibling as IText;\n    }\n    if (Tracer.enabled) { Tracer.leave(); }\n    return node;\n  }\n\n  private declareTemplateController(attrSyntax: AttrSyntax, attrInfo: AttrInfo): TemplateControllerSymbol {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.declareTemplateController', slice.call(arguments)); }\n\n    let symbol: TemplateControllerSymbol;\n    // dynamicOptions logic here is similar to (and explained in) bindCustomAttribute\n    const command = this.resources.getBindingCommand(attrSyntax);\n    if (command === null && attrInfo.hasDynamicOptions) {\n      symbol = new TemplateControllerSymbol(attrSyntax, attrInfo, this.partName);\n      this.partName = null;\n      this.bindMultiAttribute(symbol, attrInfo, attrSyntax.rawValue);\n    } else {\n      symbol = new TemplateControllerSymbol(attrSyntax, attrInfo, this.partName);\n      const bindingType = command === null ? BindingType.Interpolation : command.bindingType;\n      const expr = this.exprParser.parse(attrSyntax.rawValue, bindingType);\n      symbol.bindings.push(new BindingSymbol(command, attrInfo.bindable, expr, attrSyntax.rawValue, attrSyntax.target));\n      this.partName = null;\n    }\n\n    if (Tracer.enabled) { Tracer.leave(); }\n    return symbol;\n  }\n\n  private bindCustomAttribute(attrSyntax: AttrSyntax, attrInfo: AttrInfo): void {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.bindCustomAttribute', slice.call(arguments)); }\n\n    const command = this.resources.getBindingCommand(attrSyntax);\n    let symbol: CustomAttributeSymbol;\n    if (command === null && attrInfo.hasDynamicOptions) {\n      // a dynamicOptions (semicolon separated binding) is only valid without a binding command;\n      // the binding commands must be declared in the dynamicOptions expression itself\n      symbol = new CustomAttributeSymbol(attrSyntax, attrInfo);\n      this.bindMultiAttribute(symbol, attrInfo, attrSyntax.rawValue);\n    } else {\n      // we've either got a command (with or without dynamicOptions, the latter maps to the first bindable),\n      // or a null command but without dynamicOptions (which may be an interpolation or a normal string)\n      symbol = new CustomAttributeSymbol(attrSyntax, attrInfo);\n      const bindingType = command === null ? BindingType.Interpolation : command.bindingType;\n      const expr = this.exprParser.parse(attrSyntax.rawValue, bindingType);\n      symbol.bindings.push(new BindingSymbol(command, attrInfo.bindable, expr, attrSyntax.rawValue, attrSyntax.target));\n    }\n    this.manifest.attributes.push(symbol);\n    this.manifest.isTarget = true;\n\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  private bindMultiAttribute(symbol: ResourceAttributeSymbol, attrInfo: AttrInfo, value: string): void {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.bindMultiAttribute', slice.call(arguments)); }\n\n    const attributes = parseMultiAttributeBinding(value);\n    let attr: IAttrLike;\n    for (let i = 0, ii = attributes.length; i < ii; ++i) {\n      attr = attributes[i];\n      const attrSyntax = this.attrParser.parse(attr.name, attr.value);\n      const command = this.resources.getBindingCommand(attrSyntax);\n      const bindingType = command === null ? BindingType.Interpolation : command.bindingType;\n      const expr = this.exprParser.parse(attrSyntax.rawValue, bindingType);\n      let bindable = attrInfo.bindables[attrSyntax.target];\n      if (bindable === undefined) {\n        // everything in a dynamicOptions expression must be used, so if it's not a bindable then we create one on the spot\n        bindable = attrInfo.bindables[attrSyntax.target] = new BindableInfo(attrSyntax.target, BindingMode.toView);\n      }\n\n      symbol.bindings.push(new BindingSymbol(command, bindable, expr, attrSyntax.rawValue, attrSyntax.target));\n    }\n\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  private bindPlainAttribute(attrSyntax: AttrSyntax): void {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.bindPlainAttribute', slice.call(arguments)); }\n\n    if (attrSyntax.rawValue.length === 0) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return;\n    }\n\n    const command = this.resources.getBindingCommand(attrSyntax);\n    const bindingType = command === null ? BindingType.Interpolation : command.bindingType;\n    const manifest = this.manifest;\n    const expr = this.exprParser.parse(attrSyntax.rawValue, bindingType);\n\n    if (manifest.flags & SymbolFlags.isCustomElement) {\n      const bindable = (manifest as CustomElementSymbol).bindables[attrSyntax.target];\n      if (bindable !== undefined) {\n        // if the attribute name matches a bindable property name, add it regardless of whether it's a command, interpolation, or just a plain string;\n        // the template compiler will translate it to the correct instruction\n        (manifest as CustomElementSymbol).bindings.push(new BindingSymbol(command, bindable, expr, attrSyntax.rawValue, attrSyntax.target));\n        manifest.isTarget = true;\n      } else if (expr !== null) {\n        // if it does not map to a bindable, only add it if we were able to parse an expression (either a command or interpolation)\n        manifest.attributes.push(new PlainAttributeSymbol(attrSyntax, command, expr));\n        manifest.isTarget = true;\n      }\n    } else if (expr !== null || attrSyntax.target === 'ref') {\n      // either a binding command, an interpolation, or a ref\n      manifest.attributes.push(new PlainAttributeSymbol(attrSyntax, command, expr));\n      manifest.isTarget = true;\n    } else if (manifest === this.surrogate) {\n      // any attributes, even if they are plain (no command/interpolation etc), should be added if they\n      // are on the surrogate element\n      manifest.attributes.push(new PlainAttributeSymbol(attrSyntax, command, expr));\n    }\n\n    if (Tracer.enabled) { Tracer.leave(); }\n  }\n\n  private declareReplacePart(node: IHTMLTemplateElement | IHTMLElement): ReplacePartSymbol {\n    if (Tracer.enabled) { Tracer.enter('TemplateBinder.declareReplacePart', slice.call(arguments)); }\n\n    const name = node.getAttribute('replace-part');\n    if (name === null) {\n      if (Tracer.enabled) { Tracer.leave(); }\n      return null;\n    }\n    node.removeAttribute('replace-part');\n\n    const symbol = new ReplacePartSymbol(name);\n\n    if (Tracer.enabled) { Tracer.leave(); }\n    return symbol;\n  }\n}\n\nfunction processInterpolationText(symbol: TextSymbol): void {\n  const node = symbol.physicalNode;\n  const parentNode = node.parentNode;\n  while (node.nextSibling !== null && node.nextSibling.nodeType === NodeType.Text) {\n    parentNode.removeChild(node.nextSibling);\n  }\n  node.textContent = '';\n  parentNode.insertBefore(symbol.marker, node);\n}\n\n/**\n * A (temporary) standalone function that purely does the DOM processing (lifting) related to template controllers.\n * It's a first refactoring step towards separating DOM parsing/binding from mutations.\n */\nfunction processTemplateControllers(manifestProxy: ParentNodeSymbol, manifest: ElementSymbol): void {\n  const manifestNode = manifest.physicalNode;\n  let current = manifestProxy as TemplateControllerSymbol;\n  while ((current as ParentNodeSymbol) !== manifest) {\n    if (current.template === manifest) {\n      // the DOM linkage is still in its original state here so we can safely assume the parentNode is non-null\n      manifestNode.parentNode.replaceChild(current.marker, manifestNode);\n\n      // if the manifest is a template element (e.g. <template repeat.for=\"...\">) then we can skip one lift operation\n      // and simply use the template directly, saving a bit of work\n      if (manifestNode.nodeName === 'TEMPLATE') {\n        current.physicalNode = manifestNode as IHTMLTemplateElement;\n        // the template could safely stay without affecting anything visible, but let's keep the DOM tidy\n        manifestNode.remove();\n      } else {\n        // the manifest is not a template element so we need to wrap it in one\n        current.physicalNode = DOM.createTemplate();\n        current.physicalNode.content.appendChild(manifestNode);\n      }\n    } else {\n      current.physicalNode = DOM.createTemplate();\n      current.physicalNode.content.appendChild(current.marker);\n    }\n    manifestNode.removeAttribute(current.syntax.rawName);\n    current = current.template as TemplateControllerSymbol;\n  }\n}\n\nfunction processReplacePart(replacePart: ReplacePartSymbol, manifestProxy: ParentNodeSymbol): void {\n    let proxyNode: IHTMLElement;\n    if (manifestProxy.flags & SymbolFlags.hasMarker) {\n      proxyNode = (manifestProxy as SymbolWithMarker).marker;\n    } else {\n      proxyNode = manifestProxy.physicalNode;\n    }\n    if (proxyNode.nodeName === 'TEMPLATE') {\n      // if it's a template element, no need to do anything special, just assign it to the replacePart\n      replacePart.physicalNode = proxyNode as IHTMLTemplateElement;\n    } else {\n      // otherwise wrap the replace-part in a template\n      replacePart.physicalNode = DOM.createTemplate();\n      replacePart.physicalNode.content.appendChild(proxyNode);\n    }\n}\n\ninterface IAttrLike {\n  name: string;\n  value: string;\n}\n\nclass ParserState {\n  public input: string;\n  public index: number;\n  public length: number;\n\n  constructor(input: string) {\n    this.input = input;\n    this.index = 0;\n    this.length = input.length;\n  }\n}\n\nconst fromCharCode = String.fromCharCode;\n\n// TODO: move to expression parser\nfunction parseMultiAttributeBinding(input: string): IAttrLike[] {\n  const attributes: IAttrLike[] = [];\n\n  const state = new ParserState(input);\n  const length = state.length;\n  let name: string;\n  let value: string;\n\n  while (state.index < length) {\n    name = scanAttributeName(state);\n    if (name.length === 0) {\n      return attributes;\n    }\n    value = scanAttributeValue(state);\n    attributes.push({ name, value });\n  }\n\n  return attributes;\n}\n\nfunction scanAttributeName(state: ParserState): string {\n  const start = state.index;\n  const { length, input } = state;\n  while (state.index < length && input.charCodeAt(++state.index) !== Char.Colon);\n\n  return input.slice(start, state.index).trim();\n}\n\nfunction scanAttributeValue(state: ParserState): string {\n  ++state.index;\n  const { length, input } = state;\n  let token = '';\n  let inString = false;\n  let quote = null;\n  let ch = 0;\n  while (state.index < length) {\n    ch = input.charCodeAt(state.index);\n    switch (ch) {\n      case Char.Semicolon:\n        ++state.index;\n        return token.trim();\n      case Char.Slash:\n        ch = input.charCodeAt(++state.index);\n        if (ch === Char.DoubleQuote) {\n          if (inString === false) {\n            inString = true;\n            quote = Char.DoubleQuote;\n          } else if (quote === Char.DoubleQuote) {\n            inString = false;\n            quote = null;\n          }\n        }\n        token += `\\\\${fromCharCode(ch)}`;\n        break;\n      case Char.SingleQuote:\n        if (inString === false) {\n          inString = true;\n          quote = Char.SingleQuote;\n        } else if (quote === Char.SingleQuote) {\n          inString = false;\n          quote = null;\n        }\n        token += '\\'';\n        break;\n      default:\n        token += fromCharCode(ch);\n    }\n    ++state.index;\n  }\n\n  return token.trim();\n}\n","import { DI } from '@aurelia/kernel';\nimport { DOM, IElement, IHTMLTemplateElement, INode } from '@aurelia/runtime';\n\n/**\n * Utility that creates a `HTMLTemplateElement` out of string markup or an existing DOM node.\n *\n * It is idempotent in the sense that passing in an existing template element will simply return that template element,\n * so it is always safe to pass in a node without causing unnecessary DOM parsing or template creation.\n */\nexport interface ITemplateFactory {\n  /**\n   * Create a `HTMLTemplateElement` from a provided html string.\n   *\n   * @param markup A raw html string that may or may not be wrapped in `<template></template>`\n   */\n  createTemplate(markup: string): IHTMLTemplateElement;\n  /**\n   * Create a `HTMLTemplateElement` from a provided DOM node. If the node is already a template, it\n   * will be returned as-is (and removed from the DOM).\n   *\n   * @param node A DOM node that may or may not be wrapped in `<template></template>`\n   */\n  createTemplate(node: INode): IHTMLTemplateElement;\n  /**\n   * Create a `HTMLTemplateElement` from a provided DOM node or html string.\n   *\n   * @param input A DOM node or raw html string that may or may not be wrapped in `<template></template>`\n   */\n  createTemplate(input: unknown): IHTMLTemplateElement;\n  createTemplate(input: unknown): IHTMLTemplateElement;\n}\n\nexport const ITemplateFactory = DI.createInterface<ITemplateFactory>()\n  .withDefault(x => x.singleton(TemplateFactory));\n\n/**\n * Default implementation for `ITemplateFactory` for use in an HTML based runtime.\n *\n * @internal\n */\nexport class TemplateFactory {\n  private template: IHTMLTemplateElement;\n\n  constructor() {\n    this.template = DOM.createTemplate();\n  }\n\n  public createTemplate(markup: string): IHTMLTemplateElement;\n  public createTemplate(node: INode): IHTMLTemplateElement;\n  public createTemplate(input: unknown): IHTMLTemplateElement;\n  public createTemplate(input: string | INode): IHTMLTemplateElement {\n    if (typeof input === 'string') {\n      const template = this.template;\n      template.innerHTML = input;\n      const node = template.content.firstElementChild as IElement;\n      // if the input is either not wrapped in a template or there is more than one node,\n      // return the whole template that wraps it/them (and create a new one for the next input)\n      if (node === null || node.nodeName !== 'TEMPLATE' || node.nextElementSibling !== null) {\n        this.template = DOM.createTemplate();\n        return template;\n      }\n      // the node to return is both a template and the only node, so return just the node\n      // and clean up the template for the next input\n      template.content.removeChild(node);\n      return node as IHTMLTemplateElement;\n    }\n    if (input.nodeName !== 'TEMPLATE') {\n      // if we get one node that is not a template, wrap it in one\n      const template = DOM.createTemplate();\n      template.content.appendChild(input);\n      return template;\n    }\n    // we got a template element, remove it from the DOM if it's present there and don't\n    // do any other processing\n    if (input.parentNode !== null) {\n      input.parentNode.removeChild(input);\n    }\n    return input as IHTMLTemplateElement;\n  }\n}\n","import { inject, IResourceDescriptions, PLATFORM } from '@aurelia/kernel';\nimport {\n  AttributeInstruction,\n  HydrateAttributeInstruction,\n  HydrateElementInstruction,\n  HydrateTemplateController,\n  IBuildInstruction,\n  IExpressionParser,\n  ILetBindingInstruction,\n  InstructionRow,\n  Interpolation,\n  InterpolationInstruction,\n  IsBindingBehavior,\n  ITemplateCompiler,\n  ITemplateDefinition,\n  LetBindingInstruction,\n  LetElementInstruction,\n  RefBindingInstruction,\n  SetAttributeInstruction,\n  SetPropertyInstruction,\n  TargetedInstruction,\n  TemplateDefinition,\n  TextBindingInstruction\n} from '@aurelia/runtime';\nimport { IAttributeParser } from './attribute-parser';\nimport { ResourceModel } from './resource-model';\nimport {\n  AttributeSymbol,\n  BindingSymbol,\n  CustomAttributeSymbol,\n  CustomElementSymbol,\n  ElementSymbol,\n  LetElementSymbol,\n  NodeSymbol,\n  ParentNodeSymbol,\n  PlainAttributeSymbol,\n  PlainElementSymbol,\n  ReplacePartSymbol,\n  SymbolFlags,\n  SymbolWithBindings,\n  TemplateBinder,\n  TemplateControllerSymbol,\n  TextSymbol\n} from './template-binder';\nimport { ITemplateFactory } from './template-factory';\n\nconst buildNotRequired: IBuildInstruction = Object.freeze({\n  required: false,\n  compiler: 'default'\n});\n\n/**\n * Default (runtime-agnostic) implementation for `ITemplateCompiler`.\n *\n * @internal\n */\n@inject(ITemplateFactory, IAttributeParser, IExpressionParser)\nexport class TemplateCompiler implements ITemplateCompiler {\n  private factory: ITemplateFactory;\n  private attrParser: IAttributeParser;\n  private exprParser: IExpressionParser;\n\n  /**\n   * The instructions array for the currently instruction-collecting `ITemplateDefinition`\n   */\n  private instructionRows: InstructionRow[];\n\n  public get name(): string {\n    return 'default';\n  }\n\n  constructor(factory: ITemplateFactory, attrParser: IAttributeParser, exprParser: IExpressionParser) {\n    this.factory = factory;\n    this.attrParser = attrParser;\n    this.exprParser = exprParser;\n    this.instructionRows = null;\n  }\n\n  public compile(definition: ITemplateDefinition, descriptions: IResourceDescriptions): TemplateDefinition {\n    const resources = new ResourceModel(descriptions);\n    const binder = new TemplateBinder(resources, this.attrParser, this.exprParser);\n    const template = definition.template = this.factory.createTemplate(definition.template);\n    const surrogate = binder.bind(template);\n    if (definition.instructions === undefined || definition.instructions === PLATFORM.emptyArray) {\n      definition.instructions = [];\n    }\n    if (surrogate.hasSlots === true) {\n      definition.hasSlots = true;\n    }\n\n    this.instructionRows = definition.instructions as InstructionRow[];\n\n    const attributes = surrogate.attributes;\n    const len = attributes.length;\n    if (len > 0) {\n      let surrogates: TargetedInstruction[];\n      if (definition.surrogates === undefined || definition.surrogates === PLATFORM.emptyArray) {\n        definition.surrogates = Array(len);\n      }\n      surrogates = definition.surrogates;\n      for (let i = 0; i < len; ++i) {\n        surrogates[i] = this.compileAttribute(attributes[i]);\n      }\n    }\n\n    this.compileChildNodes(surrogate);\n\n    this.instructionRows = null;\n\n    return definition as TemplateDefinition;\n  }\n\n  private compileChildNodes(parent: ElementSymbol): void {\n    if (parent.flags & SymbolFlags.hasChildNodes) {\n      const { childNodes } = parent;\n      let childNode: NodeSymbol;\n      const ii = childNodes.length;\n      for (let i = 0; i < ii; ++i) {\n        childNode = childNodes[i];\n        if (childNode.flags & SymbolFlags.isText) {\n          this.instructionRows.push([new TextBindingInstruction((childNode as TextSymbol).interpolation)]);\n        } else if (childNode.flags & SymbolFlags.isLetElement) {\n          const bindings = (childNode as LetElementSymbol).bindings;\n          const instructions: ILetBindingInstruction[] = [];\n          let binding: BindingSymbol;\n          const jj = bindings.length;\n          for (let j = 0; j < jj; ++j) {\n            binding = bindings[j];\n            instructions[j] = new LetBindingInstruction(binding.expression as IsBindingBehavior, binding.target);\n          }\n          this.instructionRows.push([new LetElementInstruction(instructions, (childNode as LetElementSymbol).toViewModel)]);\n        } else {\n          this.compileParentNode(childNode as ParentNodeSymbol);\n        }\n      }\n    }\n  }\n\n  private compileCustomElement(symbol: CustomElementSymbol): void {\n    // offset 1 to leave a spot for the hydrate instruction so we don't need to create 2 arrays with a spread etc\n    const instructionRow = this.compileAttributes(symbol, 1) as InstructionRow;\n    instructionRow[0] = new HydrateElementInstruction(\n      symbol.res,\n      this.compileBindings(symbol),\n      this.compileParts(symbol)\n    );\n\n    this.instructionRows.push(instructionRow);\n  }\n\n  private compilePlainElement(symbol: PlainElementSymbol): void {\n    const attributes = this.compileAttributes(symbol, 0);\n    if (attributes.length > 0) {\n      this.instructionRows.push(attributes as InstructionRow);\n    }\n    this.compileChildNodes(symbol);\n  }\n\n  private compileParentNode(symbol: ParentNodeSymbol): void {\n    switch (symbol.flags & SymbolFlags.type) {\n      case SymbolFlags.isCustomElement:\n        this.compileCustomElement(symbol as CustomElementSymbol);\n        break;\n      case SymbolFlags.isPlainElement:\n        this.compilePlainElement(symbol as PlainElementSymbol);\n        break;\n      case SymbolFlags.isTemplateController:\n        this.compileTemplateController(symbol as TemplateControllerSymbol);\n    }\n  }\n\n  private compileTemplateController(symbol: TemplateControllerSymbol): void {\n    const bindings = this.compileBindings(symbol);\n    const instructionRowsSave = this.instructionRows;\n    const controllerInstructions = this.instructionRows = [];\n    this.compileParentNode(symbol.template);\n    this.instructionRows = instructionRowsSave;\n\n    const def = {\n      name: symbol.partName === null ? symbol.res : symbol.partName,\n      template: symbol.physicalNode,\n      instructions: controllerInstructions,\n      build: buildNotRequired\n    };\n    this.instructionRows.push([new HydrateTemplateController(def, symbol.res, bindings, symbol.res === 'else')]);\n  }\n\n  private compileBindings(symbol: SymbolWithBindings): AttributeInstruction[] {\n    let bindingInstructions: AttributeInstruction[];\n    if (symbol.flags & SymbolFlags.hasBindings) {\n      // either a custom element with bindings, a custom attribute / template controller with dynamic options,\n      // or a single value custom attribute binding\n      const { bindings } = symbol;\n      const len = bindings.length;\n      bindingInstructions = Array(len);\n      let i = 0;\n      for (; i < len; ++i) {\n        bindingInstructions[i] = this.compileBinding(bindings[i]);\n      }\n    } else {\n      bindingInstructions = PLATFORM.emptyArray as AttributeInstruction[];\n    }\n    return bindingInstructions;\n  }\n\n  private compileBinding(symbol: BindingSymbol): AttributeInstruction {\n    if (symbol.command === null) {\n      // either an interpolation or a normal string value assigned to an element or attribute binding\n      if (symbol.expression === null) {\n        // the template binder already filtered out non-bindables, so we know we need a setProperty here\n        return new SetPropertyInstruction(symbol.rawValue, symbol.bindable.propName);\n      } else {\n        // either an element binding interpolation or a dynamic options attribute binding interpolation\n        return new InterpolationInstruction(symbol.expression as Interpolation, symbol.bindable.propName);\n      }\n    } else {\n      // either an element binding command, dynamic options attribute binding command,\n      // or custom attribute / template controller (single value) binding command\n      return symbol.command.compile(symbol);\n    }\n  }\n\n  private compileAttributes(symbol: ElementSymbol, offset: number): AttributeInstruction[] {\n    let attributeInstructions: AttributeInstruction[];\n    if (symbol.flags & SymbolFlags.hasAttributes) {\n      // any attributes on a custom element (which are not bindables) or a plain element\n      const { attributes } = symbol;\n      const len = attributes.length;\n      attributeInstructions = Array(offset + len);\n      for (let i = 0; i < len; ++i) {\n        attributeInstructions[i + offset] = this.compileAttribute(attributes[i]);\n      }\n    } else if (offset > 0) {\n      attributeInstructions = Array(offset);\n    } else {\n      attributeInstructions = PLATFORM.emptyArray as AttributeInstruction[];\n    }\n    return attributeInstructions;\n  }\n\n  private compileAttribute(symbol: AttributeSymbol): AttributeInstruction {\n    if (symbol.syntax.target === 'ref') {\n      return new RefBindingInstruction(symbol.syntax.rawValue);\n    }\n    // any attribute on a custom element (which is not a bindable) or a plain element\n    if (symbol.flags & SymbolFlags.isCustomAttribute) {\n      // a normal custom attribute (not template controller)\n      const bindings = this.compileBindings(symbol as CustomAttributeSymbol);\n      return new HydrateAttributeInstruction((symbol as CustomAttributeSymbol).res, bindings);\n    } else if ((symbol as PlainAttributeSymbol).command === null) {\n      if ((symbol as PlainAttributeSymbol).expression === null) {\n        // a plain attribute on a surrogate\n        return new SetAttributeInstruction(symbol.syntax.rawValue, symbol.syntax.target);\n      } else {\n        // a plain attribute with an interpolation\n        return new InterpolationInstruction((symbol as PlainAttributeSymbol).expression as Interpolation, symbol.syntax.target);\n      }\n    } else {\n      // a plain attribute with a binding command\n      return (symbol as PlainAttributeSymbol).command.compile(symbol as PlainAttributeSymbol);\n    }\n  }\n\n  private compileParts(symbol: CustomElementSymbol): Record<string, ITemplateDefinition> {\n    let parts: Record<string, ITemplateDefinition>;\n    if (symbol.flags & SymbolFlags.hasParts) {\n      parts = {};\n      const replaceParts = symbol.parts;\n      const ii = replaceParts.length;\n      let instructionRowsSave: InstructionRow[];\n      let partInstructions: InstructionRow[];\n      let replacePart: ReplacePartSymbol;\n      for (let i = 0; i < ii; ++i) {\n        replacePart = replaceParts[i];\n        instructionRowsSave = this.instructionRows;\n        partInstructions = this.instructionRows = [];\n        this.compileParentNode(replacePart.template);\n        parts[replacePart.name] = {\n          name: replacePart.name,\n          template: replacePart.physicalNode,\n          instructions: partInstructions,\n          build: buildNotRequired\n        };\n        this.instructionRows = instructionRowsSave;\n      }\n    } else {\n      parts = PLATFORM.emptyObject;\n    }\n    return parts;\n  }\n}\n","import { IContainer, IRegistry, Registration } from '@aurelia/kernel';\nimport {\n  AttrBindingBehavior,\n  Compose,\n  DebounceBindingBehavior,\n  Else,\n  FromViewBindingBehavior,\n  HtmlRenderer,\n  If,\n  ITemplateCompiler,\n  OneTimeBindingBehavior,\n  Repeat,\n  Replaceable,\n  SanitizeValueConverter,\n  SelfBindingBehavior,\n  SignalBindingBehavior,\n  ThrottleBindingBehavior,\n  ToViewBindingBehavior,\n  TwoWayBindingBehavior,\n  UpdateTriggerBindingBehavior,\n  With\n} from '@aurelia/runtime';\nimport {\n  DotSeparatedAttributePattern,\n  RefAttributePattern\n} from './attribute-pattern';\nimport {\n  CallBindingCommand,\n  CaptureBindingCommand,\n  DefaultBindingCommand,\n  DelegateBindingCommand,\n  ForBindingCommand,\n  FromViewBindingCommand,\n  OneTimeBindingCommand,\n  ToViewBindingCommand,\n  TriggerBindingCommand,\n  TwoWayBindingCommand\n} from './binding-command';\nimport { ParserRegistration } from './expression-parser';\nimport { TemplateCompiler } from './template-compiler';\n\nexport const GlobalResources: IRegistry[] = [\n  Compose,\n  If,\n  Else,\n  Repeat,\n  Replaceable,\n  With,\n  SanitizeValueConverter,\n  AttrBindingBehavior,\n  DebounceBindingBehavior,\n  OneTimeBindingBehavior,\n  ToViewBindingBehavior,\n  FromViewBindingBehavior,\n  SelfBindingBehavior,\n  SignalBindingBehavior,\n  ThrottleBindingBehavior,\n  TwoWayBindingBehavior,\n  UpdateTriggerBindingBehavior\n];\n\nexport const DefaultBindingLanguage: IRegistry[] = [\n  DefaultBindingCommand,\n  OneTimeBindingCommand,\n  ToViewBindingCommand,\n  FromViewBindingCommand,\n  TwoWayBindingCommand,\n  TriggerBindingCommand,\n  DelegateBindingCommand,\n  CaptureBindingCommand,\n  CallBindingCommand,\n  ForBindingCommand,\n  DotSeparatedAttributePattern,\n  RefAttributePattern\n];\n\nexport const BasicConfiguration = {\n  register(container: IContainer): void {\n    container.register(\n      ParserRegistration,\n      HtmlRenderer,\n      Registration.singleton(ITemplateCompiler, TemplateCompiler),\n      ...GlobalResources,\n      ...DefaultBindingLanguage\n    );\n  }\n};\n","import { IHTMLElement, IHTMLTemplateElement, INode, ITemplateDefinition, NodeType, TargetedInstruction, TargetedInstructionType } from '@aurelia/runtime';\n\nexport function stringifyDOM(node: INode, depth: number): string {\n  const indent = ' '.repeat(depth);\n  let output = indent;\n  output += `Node: ${node.nodeName}`;\n  if (node.nodeType === NodeType.Text) {\n    output += ` \"${node.textContent}\"`;\n  }\n  if (node.nodeType === NodeType.Element) {\n    let i = 0;\n    let attr;\n    const attributes = (node as IHTMLElement).attributes;\n    const len = attributes.length;\n    for (; i < len; ++i) {\n      attr = attributes[i];\n      output += ` ${attr.name}=${attr.value}`;\n    }\n  }\n  output += '\\n';\n  if (node.nodeType === NodeType.Element) {\n    let i = 0;\n    let childNodes = node.childNodes;\n    let len = childNodes.length;\n    for (; i < len; ++i) {\n      output += stringifyDOM(childNodes[i], depth + 1);\n    }\n    if (node.nodeName === 'TEMPLATE') {\n      i = 0;\n      childNodes = (node as IHTMLTemplateElement).content.childNodes;\n      len = childNodes.length;\n      for (; i < len; ++i) {\n        output += stringifyDOM(childNodes[i], depth + 1);\n      }\n    }\n  }\n  return output;\n}\n\nexport function stringifyInstructions(instruction: TargetedInstruction, depth: number): string {\n  const indent = ' '.repeat(depth);\n  let output = indent;\n  switch (instruction.type) {\n    case TargetedInstructionType.textBinding:\n      output += 'textBinding\\n';\n      break;\n    case TargetedInstructionType.callBinding:\n      output += 'callBinding\\n';\n      break;\n    case TargetedInstructionType.iteratorBinding:\n      output += 'iteratorBinding\\n';\n      break;\n    case TargetedInstructionType.listenerBinding:\n      output += 'listenerBinding\\n';\n      break;\n    case TargetedInstructionType.propertyBinding:\n      output += 'propertyBinding\\n';\n      break;\n    case TargetedInstructionType.refBinding:\n      output += 'refBinding\\n';\n      break;\n    case TargetedInstructionType.stylePropertyBinding:\n      output += 'stylePropertyBinding\\n';\n      break;\n    case TargetedInstructionType.setProperty:\n      output += 'setProperty\\n';\n      break;\n    case TargetedInstructionType.setAttribute:\n      output += 'setAttribute\\n';\n      break;\n    case TargetedInstructionType.interpolation:\n      output += 'interpolation\\n';\n      break;\n    case TargetedInstructionType.hydrateLetElement:\n      output += 'hydrateLetElement\\n';\n      instruction.instructions.forEach(i => {\n        output += stringifyInstructions(i, depth + 1);\n      });\n      break;\n    case TargetedInstructionType.hydrateAttribute:\n      output += `hydrateAttribute: ${instruction.res}\\n`;\n      instruction.instructions.forEach(i => {\n        output += stringifyInstructions(i, depth + 1);\n      });\n      break;\n    case TargetedInstructionType.hydrateElement:\n      output += `hydrateElement: ${instruction.res}\\n`;\n      instruction.instructions.forEach(i => {\n        output += stringifyInstructions(i, depth + 1);\n      });\n      break;\n    case TargetedInstructionType.hydrateTemplateController:\n      output += `hydrateTemplateController: ${instruction.res}\\n`;\n      output += stringifyTemplateDefinition(instruction.def, depth + 1);\n      instruction.instructions.forEach(i => {\n        output += stringifyInstructions(i, depth + 1);\n      });\n  }\n  return output;\n}\n\nexport function stringifyTemplateDefinition(def: ITemplateDefinition, depth: number): string {\n  const indent = ' '.repeat(depth);\n  let output = indent;\n\n  output += `TemplateDefinition: ${def.name}\\n`;\n  output += stringifyDOM(def.template as INode, depth + 1);\n  output += `${indent} Instructions:\\n`;\n  def.instructions.forEach(row => {\n    output += `${indent}  Row:\\n`;\n    row.forEach(i => {\n      output += stringifyInstructions(i, depth + 3);\n    });\n  });\n\n  return output;\n}\n"],"names":["PLATFORM","DI","Reporter","Registration","DotSeparatedAttributePattern","RefAttributePattern","ColonPrefixedBindAttributePattern","AtPrefixedTriggerAttributePattern","AttributeParser","inject","all","OneTimeBindingCommand","OneTimeBindingInstruction","ToViewBindingCommand","ToViewBindingInstruction","FromViewBindingCommand","FromViewBindingInstruction","TwoWayBindingCommand","TwoWayBindingInstruction","BindingMode","DefaultBindingCommand","TriggerBindingCommand","TriggerBindingInstruction","DelegateBindingCommand","DelegateBindingInstruction","CaptureBindingCommand","CaptureBindingInstruction","CallBindingCommand","CallBindingInstruction","ForBindingCommand","IteratorBindingInstruction","IExpressionParser","PrimitiveLiteral","AccessThis","Unary","BindingIdentifier","AccessScope","Template","AccessMember","AccessKeyed","CallScope","CallMember","CallFunction","TaggedTemplate","Binary","Conditional","Assign","ValueConverter","BindingBehavior","ArrayBindingPattern","ArrayLiteral","ForOfStatement","ObjectBindingPattern","ObjectLiteral","Interpolation","CustomElementResource","CustomAttributeResource","DOM","Tracer","ParserState","TemplateCompiler","TextBindingInstruction","LetBindingInstruction","LetElementInstruction","HydrateElementInstruction","HydrateTemplateController","SetPropertyInstruction","InterpolationInstruction","RefBindingInstruction","HydrateAttributeInstruction","SetAttributeInstruction","Compose","If","Else","Repeat","Replaceable","With","SanitizeValueConverter","AttrBindingBehavior","DebounceBindingBehavior","OneTimeBindingBehavior","ToViewBindingBehavior","FromViewBindingBehavior","SelfBindingBehavior","SignalBindingBehavior","ThrottleBindingBehavior","TwoWayBindingBehavior","UpdateTriggerBindingBehavior","HtmlRenderer","ITemplateCompiler"],"mappings":"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"}